{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to the ngena PL/SQL and SQL Coding Guidelines SQL and PL/SQL code is fundamentally some of the most important code that we write. The difference between SQL and PL/SQL that performs well and that doesn't can be the difference between a successful system and a huge disappointment. For a PDF version of these guidelines use ngena-PLSQL-and-SQL-Coding-Guidelines.pdf In 2021 Neil Fernandez of ngena forked these guidelines from Insum guidelines and changed rules to comply with ngena coding standards. In 2019, Rich Soule of Insum forked these guidelines from the Trivadis guidelines and changed most of the rules to comply with Insum coding standards and added many new guidelines. New rules were also suggested in the Trivadis Issues, and while many were adopted, some (and some we consider very important) were not. Originally, Trivadis published their guidelines for PL/SQL & SQL in 2009 in the context of the DOAG conference in Nuremberg. Since then these guidelines have been continuously extended and improved. Now they are managed as a set of markdown files. This makes the the guidelines more adaptable for individual application needs and simplifies the continous improvement. We all stand in the shoulders of giants. Many people have participated in the creation and refinement of these guidelines. Without the efforts from Roger Troller, J\u00f6rn Kulessa, Daniela Reiner, Richard Bushnell, Andreas Flubacher, Thomas Mauch, and Philipp Salvisberg, and, more recently, many folks from the Insum Team, these guidelines wouldn't be what they are today. Why are standards important For a machine executing a program, code formatting is of no importance. However, for the human eye, well-formatted code is much easier to read. Modern tools can help to implement format and coding rules. Implementing formatting and coding standards has the following advantages for PL/SQL development: Well-formatted code is easier to read, analyze and maintain (not only for the author but also for other developers). The developers do not have to define their own guidelines - it is already defined. The code has a structure that makes it easier to avoid making errors. The code is more efficient concerning performance and organization of the whole application. The code is more modular and thus easier to use for other applications. This document only defines possible standards. These standards are not written in stone, but are meant as guidelines. If standards already exist, and they are different from those in this document, it makes no sense to change them unless the existing standards have fundamental flaws that would decrease performance and/or significantly decrease the maintainability of code. Almost every system has a mixture of \"code that follows the standards\" and \"code that doesn't follow the standards\". Gentle migration over time to follow a good set of reasonable standards will always be much better than giving up because standards were not followed in the past. Overall, the most important thing when writing good code is that you must be able to defend your work. License The ngena PL/SQL & SQL Coding Guidelines are licensed under the Apache License, Version 2.0. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 . Trademarks All terms that are known trademarks or service marks have been capitalized. All trademarks are the property of their respective owners. Disclaimer The authors and publisher shall have neither liability nor responsibility to any person or entity with respect to the loss or damages arising from the information contained in this work. This work may include inaccuracies or typographical errors and solely represent the opinions of the authors. Changes are periodically made to this document without notice. The authors reserve the right to revise this document at any time without notice. Revision History Version Who Date Comment 1.0 Soule 2020.02.05 Forked from the Trivadis standards with many updates due to coding style and minor updates to grammar, removal of some sections, changes to titles of other sections, etc.","title":"Introduction to the ngena PL/SQL and SQL Coding Guidelines"},{"location":"#introduction-to-the-ngena-plsql-and-sql-coding-guidelines","text":"SQL and PL/SQL code is fundamentally some of the most important code that we write. The difference between SQL and PL/SQL that performs well and that doesn't can be the difference between a successful system and a huge disappointment. For a PDF version of these guidelines use ngena-PLSQL-and-SQL-Coding-Guidelines.pdf In 2021 Neil Fernandez of ngena forked these guidelines from Insum guidelines and changed rules to comply with ngena coding standards. In 2019, Rich Soule of Insum forked these guidelines from the Trivadis guidelines and changed most of the rules to comply with Insum coding standards and added many new guidelines. New rules were also suggested in the Trivadis Issues, and while many were adopted, some (and some we consider very important) were not. Originally, Trivadis published their guidelines for PL/SQL & SQL in 2009 in the context of the DOAG conference in Nuremberg. Since then these guidelines have been continuously extended and improved. Now they are managed as a set of markdown files. This makes the the guidelines more adaptable for individual application needs and simplifies the continous improvement. We all stand in the shoulders of giants. Many people have participated in the creation and refinement of these guidelines. Without the efforts from Roger Troller, J\u00f6rn Kulessa, Daniela Reiner, Richard Bushnell, Andreas Flubacher, Thomas Mauch, and Philipp Salvisberg, and, more recently, many folks from the Insum Team, these guidelines wouldn't be what they are today.","title":"Introduction to the ngena PL/SQL and SQL Coding Guidelines"},{"location":"#why-are-standards-important","text":"For a machine executing a program, code formatting is of no importance. However, for the human eye, well-formatted code is much easier to read. Modern tools can help to implement format and coding rules. Implementing formatting and coding standards has the following advantages for PL/SQL development: Well-formatted code is easier to read, analyze and maintain (not only for the author but also for other developers). The developers do not have to define their own guidelines - it is already defined. The code has a structure that makes it easier to avoid making errors. The code is more efficient concerning performance and organization of the whole application. The code is more modular and thus easier to use for other applications. This document only defines possible standards. These standards are not written in stone, but are meant as guidelines. If standards already exist, and they are different from those in this document, it makes no sense to change them unless the existing standards have fundamental flaws that would decrease performance and/or significantly decrease the maintainability of code. Almost every system has a mixture of \"code that follows the standards\" and \"code that doesn't follow the standards\". Gentle migration over time to follow a good set of reasonable standards will always be much better than giving up because standards were not followed in the past. Overall, the most important thing when writing good code is that you must be able to defend your work.","title":"Why are standards important"},{"location":"#license","text":"The ngena PL/SQL & SQL Coding Guidelines are licensed under the Apache License, Version 2.0. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 .","title":"License"},{"location":"#trademarks","text":"All terms that are known trademarks or service marks have been capitalized. All trademarks are the property of their respective owners.","title":"Trademarks"},{"location":"#disclaimer","text":"The authors and publisher shall have neither liability nor responsibility to any person or entity with respect to the loss or damages arising from the information contained in this work. This work may include inaccuracies or typographical errors and solely represent the opinions of the authors. Changes are periodically made to this document without notice. The authors reserve the right to revise this document at any time without notice.","title":"Disclaimer"},{"location":"#revision-history","text":"Version Who Date Comment 1.0 Soule 2020.02.05 Forked from the Trivadis standards with many updates due to coding style and minor updates to grammar, removal of some sections, changes to titles of other sections, etc.","title":"Revision History"},{"location":"1-document-conventions/1-document-conventions/","text":"Document Conventions This document describes rules and recommendations for developing applications using the PL/SQL & SQL Language. Scope This document applies to the PL/SQL and SQL language as used within ORACLE databases and tools, which access ORACLE databases. SQALE SQALE (Software Quality Assessment based on Lifecycle Expectations) is a method to support the evaluation of a software application source code. It is a generic method, independent of the language and source code analysis tools. SQALE characteristics and subcharacteristics Characteristic Description and Subcharacteristics Changeability The capability of the software product to enable a specified modification to be implemented. Architecture related changeability Logic related changeability Data related changeability Efficiency The capability of the software product to provide appropriate performance, relative to the amount of resources used, under stated conditions. Memory use Processor use Network use Maintainability The capability of the software product to be modified. Modifications may include corrections, improvements or adaptation of the software to changes in environment, and in requirements and functional specifications. Understandability Readability Portability The capability of the software product to be transferred from one environment to another. Compiler related portability Hardware related portability Language related portability OS related portability Software related portability Time zone related portability. Reliability The capability of the software product to maintain a specified level of performance when used under specified conditions. Architecture related reliability Data related reliability Exception handling Fault tolerance Instruction related reliability Logic related reliability Resource related reliability Synchronization related reliability Unit tests coverage. Reusability The capability of the software product to be reused within the development process. Modularity Transportability. Security The capability of the software product to protect information and data so that unauthorized persons or systems cannot read or modify them and authorized persons or systems are not denied access to them. API abuse Errors (e.g. leaving a system in a vulnerable state) Input validatation and representation Security features. Testability The capability of the software product to enable modified software to be validated. Integration level testability Unit level testability. Severity of the rule Blocker Will or may result in a bug. Critical Will have a high/direct impact on the maintenance cost. Major Will have a medium/potential impact on the maintenance cost. Minor Will have a low impact on the maintenance cost. Info Very low impact; it is just a remediation cost report. Keywords used Keyword Meaning Always Emphasizes this rule must be enforced. Never Emphasizes this action must not happen. Avoid Emphasizes that the action should be prevented, but some exceptions may exist. Try Emphasizes that the rule should be attempted whenever possible and appropriate. Example Precedes text used to illustrate a rule or a recommendation. Reason Explains the thoughts and purpose behind a rule or a recommendation. Restriction Describes the circumstances to be fulfilled to make use of a rule.","title":"Document Conventions"},{"location":"1-document-conventions/1-document-conventions/#document-conventions","text":"This document describes rules and recommendations for developing applications using the PL/SQL & SQL Language.","title":"Document Conventions"},{"location":"1-document-conventions/1-document-conventions/#scope","text":"This document applies to the PL/SQL and SQL language as used within ORACLE databases and tools, which access ORACLE databases.","title":"Scope"},{"location":"1-document-conventions/1-document-conventions/#sqale","text":"SQALE (Software Quality Assessment based on Lifecycle Expectations) is a method to support the evaluation of a software application source code. It is a generic method, independent of the language and source code analysis tools.","title":"SQALE"},{"location":"1-document-conventions/1-document-conventions/#sqale-characteristics-and-subcharacteristics","text":"Characteristic Description and Subcharacteristics Changeability The capability of the software product to enable a specified modification to be implemented. Architecture related changeability Logic related changeability Data related changeability Efficiency The capability of the software product to provide appropriate performance, relative to the amount of resources used, under stated conditions. Memory use Processor use Network use Maintainability The capability of the software product to be modified. Modifications may include corrections, improvements or adaptation of the software to changes in environment, and in requirements and functional specifications. Understandability Readability Portability The capability of the software product to be transferred from one environment to another. Compiler related portability Hardware related portability Language related portability OS related portability Software related portability Time zone related portability. Reliability The capability of the software product to maintain a specified level of performance when used under specified conditions. Architecture related reliability Data related reliability Exception handling Fault tolerance Instruction related reliability Logic related reliability Resource related reliability Synchronization related reliability Unit tests coverage. Reusability The capability of the software product to be reused within the development process. Modularity Transportability. Security The capability of the software product to protect information and data so that unauthorized persons or systems cannot read or modify them and authorized persons or systems are not denied access to them. API abuse Errors (e.g. leaving a system in a vulnerable state) Input validatation and representation Security features. Testability The capability of the software product to enable modified software to be validated. Integration level testability Unit level testability.","title":"SQALE characteristics and subcharacteristics"},{"location":"1-document-conventions/1-document-conventions/#severity-of-the-rule","text":"Blocker Will or may result in a bug. Critical Will have a high/direct impact on the maintenance cost. Major Will have a medium/potential impact on the maintenance cost. Minor Will have a low impact on the maintenance cost. Info Very low impact; it is just a remediation cost report.","title":"Severity of the rule"},{"location":"1-document-conventions/1-document-conventions/#keywords-used","text":"Keyword Meaning Always Emphasizes this rule must be enforced. Never Emphasizes this action must not happen. Avoid Emphasizes that the action should be prevented, but some exceptions may exist. Try Emphasizes that the rule should be attempted whenever possible and appropriate. Example Precedes text used to illustrate a rule or a recommendation. Reason Explains the thoughts and purpose behind a rule or a recommendation. Restriction Describes the circumstances to be fulfilled to make use of a rule.","title":"Keywords used"},{"location":"2-naming-conventions/naming-conventions/","text":"Naming Conventions General Guidelines Never use names with a leading numeric character. Always choose meaningful and specific names. Avoid using abbreviations. If abbreviations are used, they must be widely known and accepted. Create a glossary with all accepted abbreviations. Never use ORACLE keywords as names. A list of ORACLEs keywords may be found in the dictionary view V$RESERVED_WORDS . Avoid adding redundant or meaningless prefixes and suffixes to identifiers. Example: CREATE TABLE emp_table . Always use one spoken language (e.g. English, German, French) for all objects in your application. Always use the same names for elements with the same meaning. Naming Conventions for PL/SQL In general, ORACLE is not case sensitive with names. A variable named personname is equal to one named PersonName, as well as to one named PERSONNAME. Some products (e.g. TMDA by Trivadis, APEX, OWB) put each name within double quotes (\") so ORACLE will treat these names to be case sensitive. Using case sensitive variable names force developers to use double quotes for each reference to the variable. Our recommendation is to write all names in lowercase and to avoid double quoted identifiers. A widely used convention is to follow a {prefix}variablecontent{suffix} pattern. The following table shows a possible set of naming conventions. Identifier Prefix Suffix Example Global Variable g_ g_version Local Variable l_ l_version Constants * k_ k_employee_permanent Record r_ r_employee Array / Table t_ t_employee Object o_ o_employee Cursor Parameter p_ p_empno In Parameter p_ | in_ p_empno Out Parameter x_ | out_ x_ename In/Out Parameter x_ | io_ io_employee Record Type Definitions r_ _type r_employee_type Array/Table Type Definitions t_ _type t_employee_type Exception e_ e_employee_exists Subtypes _type big_string_type Cursor _cur employee_cur * Why k_ instead of c_ for constants? A k is hard (straight lines, hard sound when pronouced in English) while a c is soft (curved lines and soft sound when pronounced in English). C also has the possibility of being vague (some folks use c_ for cursors) and sounds changable... Also, very big companies (like Google in their coding standards) use k as a prefix for constants. Database Object Naming Conventions Never enclose object names (table names, column names, etc.) in double quotes to enforce mixed case or lower case object names in the data dictionary. Edition Based Redefinition (EBR) is one major exception to this guideline. When naming tables that will be covered by editioning views, it is preferable to name the covered table in lower case begining with an underscore (for example: \"_employee\" ). The base table will be covered by an editioning view that has the name employee . This greatly simplifies migration from non-EBR systems to EBR systems since all existing code already references data stored in employee . \"Embracing the abomination of forced lower case names\" highlights the fact that these objects shouldn't be directly referenced (execpt, obviously, by forward and reverse cross edition triggers during edition migration, and simple auditing/surrogate key triggers, if they are used). Since developers and users should only be referencing data through editioning views (which to them are effectively the tables of the applications) they won't be tempted to use the base table. In addition, when using tools to look at the list of tables, all editioning view covered tables will be aligned together and thus clearly delinated from non-covered tables. Collection Type A collection type should include the name of the collected objects in their name. Furthermore, they should have the suffix _ct to identify it as a collection. Optionally prefixed by a project abbreviation. Examples: employee_ct order_ct Column Singular name of what is stored in the column (unless the column data type is a collection, in this case you use plural names) Add a useful comment to the database dictionary for every column. DML / Instead of Trigger Choose a naming convention that includes: either the name of the object the trigger is added to, the activity done by the trigger, the suffix _trg or the name of the object the trigger is added to, any of the triggering events: _br_iud for Before Row on Insert, Update and Delete _io_id for Instead of Insert and Delete Examples: employee_br_iud order_audit_trg order_journal_trg Foreign Key Constraint Table name followed by referenced table name followed by a _fk and an optional number suffix. If working on a pre-12.2 database, then you will probably end up being forced into abbreviations due to short object name lengths in older databases. Examples: employee_department_fk sct_icmd_ic_fk1 --Pre 12.2 database Function Name is built from a verb followed by a noun in general. Nevertheless, it is not sensible to call a function get_... as a function always gets something. The name of the function should answer the question \u201cWhat is the outcome of the function?\u201d Optionally prefixed by a project abbreviation. Example: employee_by_id If more than one function provides the same outcome, you have to be more specific with the name. Index Indexes serving a constraint (primary, unique or foreign key) are named accordingly. Other indexes should have the name of the table and columns (or their purpose) in their name and should also have _idx as a suffix. Object Type The name of an object type is built by its content (singular) followed by a _ot suffix. Optionally prefixed by a project abbreviation. Example: employee_ot Package Name is built from the content that is contained within the package. Optionally prefixed by a project abbreviation. Examples: employee_api - API for the employee table logger - Utilities including logging support constants - Constants for use across a project types - Types for use across a project Primary Key Constraint Table name or table abbreviation followed by the suffix _pk . Examples: employee_pk department_pk contract_pk Procedure Name is built from a verb followed by a noun. The name of the procedure should answer the question \u201cWhat is done?\u201d Procedures and functions are often named with underscores between words because some editors write all letters in uppercase in the object tree, so it is difficult to read them. Optionally prefixed by a project abbreviation. Examples: calculate_salary set_hiredate check_order_state Sequence Version: Pre 12 only, 12 and later use identity columns, or potentially even better, use a default of to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') . Name is built from the table name the sequence serves as primary key generator and the suffix _seq or the purpose of the sequence followed by a _seq . Optionally prefixed by a project abbreviation. Examples: employee_seq order_number_seq Synonym Synonyms should share the name with the object referenced in another schema. System Trigger Name of the event the trigger is based on. Activity done by the trigger Suffix _trg Examples: ddl_audit_trg logon_trg Table Singular name of what is contained in the table. Add a comment to the database dictionary for every table and every column in the table. Optionally prefixed by a project abbreviation. Examples: employee department sct_contract sct_contract_line sct_incentive_module Reason: Singular names have the following advantages over plural names: 1. In general, tables represent entities. Entities are singular. This encourages the art of Entity-Relationship modeling. 2. If all table names are singular, then you don't have to know if a table has a single row or multiple rows before you use it. 3. Plural names can be vastly different from singular names. What is the plural of news? lotus? knife? cactus? nucleus? There are so many words that are difficult and nonstandard to pluralize that it can add significant work to a project to 'figure out the plurals'. 4. For non-native speakers of whatever language is being used for table names, point number 3 is magnified significantly. 5. Plurals add extra unnecessary length to table names. 6. By far the biggest reason: There is no value in going through all the work to plural a table name. SQL statements often deal with a single row from a table with multiple rows, so you can't make the argument that employees is better than employee 'because the SQL will read better'. Example (bad): 1 2 3 4 5 6 well_bores well_bore_completions well_bore_completion_components well_bore_studies well_bore_study_results wells Example (good): 1 2 3 4 5 6 well well_bore well_bore_completion well_bore_completion_component well_bore_study well_bore_study_result Surrogate Key Columns Surrogate primary key columns should be the table name with an underscore and id appended. For example: employee_id Reason: Naming the surrogate primary key column the same name that it would have (at least 99% of the time) when used as a foreign key allows the use of the using clause in SQL which greatly increases readability and maintainability of SQL code. When each table has a surrogate primary key column named id , then select clauses that select multiple id columns will need aliases (more code, harder to read and maintain). Additionaly, the id surrogate key column means that every join will be forced into the on syntax which is more error-prone and harder to read than the using clause. Example (bad): 1 2 3 4 5 6 select e.id as employee_id ,d.id as department_id ,e.last_name ,d.name from employee e join department d on (e.department_id = d.id); Example (good): 1 2 3 4 5 6 select e.employee_id ,department_id ,e.last_name ,d.name from employee e join department d using (department_id); Temporary Table (Global Temporary Table) Naming as described for tables. Ideally suffixed by _gtt Optionally prefixed by a project abbreviation. Examples: employee_gtt contract_gtt Unique Key Constraint Table name followed by the role of the unique key constraint, a _uk and an optional number suffix, if necessary. Examples: employee_name_uk department_deptno_uk sct_contract_uk View Singular name of what is contained in the view. Ideally, suffixed by an indicator identifying the object as a view like _v or _vw (mostly used, when a 1:1 view layer lies above the table layer, but not used for editioning views) Add a comment to the database dictionary for every view and every column. Optionally prefixed by a project abbreviation. Examples: active_order -- A view that selects only active orders from the order table order_v -- A view to the order table order -- An editioning view that covers the \"_order\" base table","title":"Naming Conventions"},{"location":"2-naming-conventions/naming-conventions/#naming-conventions","text":"","title":"Naming Conventions"},{"location":"2-naming-conventions/naming-conventions/#general-guidelines","text":"Never use names with a leading numeric character. Always choose meaningful and specific names. Avoid using abbreviations. If abbreviations are used, they must be widely known and accepted. Create a glossary with all accepted abbreviations. Never use ORACLE keywords as names. A list of ORACLEs keywords may be found in the dictionary view V$RESERVED_WORDS . Avoid adding redundant or meaningless prefixes and suffixes to identifiers. Example: CREATE TABLE emp_table . Always use one spoken language (e.g. English, German, French) for all objects in your application. Always use the same names for elements with the same meaning.","title":"General Guidelines"},{"location":"2-naming-conventions/naming-conventions/#naming-conventions-for-plsql","text":"In general, ORACLE is not case sensitive with names. A variable named personname is equal to one named PersonName, as well as to one named PERSONNAME. Some products (e.g. TMDA by Trivadis, APEX, OWB) put each name within double quotes (\") so ORACLE will treat these names to be case sensitive. Using case sensitive variable names force developers to use double quotes for each reference to the variable. Our recommendation is to write all names in lowercase and to avoid double quoted identifiers. A widely used convention is to follow a {prefix}variablecontent{suffix} pattern. The following table shows a possible set of naming conventions. Identifier Prefix Suffix Example Global Variable g_ g_version Local Variable l_ l_version Constants * k_ k_employee_permanent Record r_ r_employee Array / Table t_ t_employee Object o_ o_employee Cursor Parameter p_ p_empno In Parameter p_ | in_ p_empno Out Parameter x_ | out_ x_ename In/Out Parameter x_ | io_ io_employee Record Type Definitions r_ _type r_employee_type Array/Table Type Definitions t_ _type t_employee_type Exception e_ e_employee_exists Subtypes _type big_string_type Cursor _cur employee_cur * Why k_ instead of c_ for constants? A k is hard (straight lines, hard sound when pronouced in English) while a c is soft (curved lines and soft sound when pronounced in English). C also has the possibility of being vague (some folks use c_ for cursors) and sounds changable... Also, very big companies (like Google in their coding standards) use k as a prefix for constants.","title":"Naming Conventions for PL/SQL"},{"location":"2-naming-conventions/naming-conventions/#database-object-naming-conventions","text":"Never enclose object names (table names, column names, etc.) in double quotes to enforce mixed case or lower case object names in the data dictionary. Edition Based Redefinition (EBR) is one major exception to this guideline. When naming tables that will be covered by editioning views, it is preferable to name the covered table in lower case begining with an underscore (for example: \"_employee\" ). The base table will be covered by an editioning view that has the name employee . This greatly simplifies migration from non-EBR systems to EBR systems since all existing code already references data stored in employee . \"Embracing the abomination of forced lower case names\" highlights the fact that these objects shouldn't be directly referenced (execpt, obviously, by forward and reverse cross edition triggers during edition migration, and simple auditing/surrogate key triggers, if they are used). Since developers and users should only be referencing data through editioning views (which to them are effectively the tables of the applications) they won't be tempted to use the base table. In addition, when using tools to look at the list of tables, all editioning view covered tables will be aligned together and thus clearly delinated from non-covered tables.","title":"Database Object Naming Conventions"},{"location":"2-naming-conventions/naming-conventions/#collection-type","text":"A collection type should include the name of the collected objects in their name. Furthermore, they should have the suffix _ct to identify it as a collection. Optionally prefixed by a project abbreviation. Examples: employee_ct order_ct","title":"Collection Type"},{"location":"2-naming-conventions/naming-conventions/#column","text":"Singular name of what is stored in the column (unless the column data type is a collection, in this case you use plural names) Add a useful comment to the database dictionary for every column.","title":"Column"},{"location":"2-naming-conventions/naming-conventions/#dml-instead-of-trigger","text":"Choose a naming convention that includes: either the name of the object the trigger is added to, the activity done by the trigger, the suffix _trg or the name of the object the trigger is added to, any of the triggering events: _br_iud for Before Row on Insert, Update and Delete _io_id for Instead of Insert and Delete Examples: employee_br_iud order_audit_trg order_journal_trg","title":"DML / Instead of Trigger"},{"location":"2-naming-conventions/naming-conventions/#foreign-key-constraint","text":"Table name followed by referenced table name followed by a _fk and an optional number suffix. If working on a pre-12.2 database, then you will probably end up being forced into abbreviations due to short object name lengths in older databases. Examples: employee_department_fk sct_icmd_ic_fk1 --Pre 12.2 database","title":"Foreign Key Constraint"},{"location":"2-naming-conventions/naming-conventions/#function","text":"Name is built from a verb followed by a noun in general. Nevertheless, it is not sensible to call a function get_... as a function always gets something. The name of the function should answer the question \u201cWhat is the outcome of the function?\u201d Optionally prefixed by a project abbreviation. Example: employee_by_id If more than one function provides the same outcome, you have to be more specific with the name.","title":"Function"},{"location":"2-naming-conventions/naming-conventions/#index","text":"Indexes serving a constraint (primary, unique or foreign key) are named accordingly. Other indexes should have the name of the table and columns (or their purpose) in their name and should also have _idx as a suffix.","title":"Index"},{"location":"2-naming-conventions/naming-conventions/#object-type","text":"The name of an object type is built by its content (singular) followed by a _ot suffix. Optionally prefixed by a project abbreviation. Example: employee_ot","title":"Object Type"},{"location":"2-naming-conventions/naming-conventions/#package","text":"Name is built from the content that is contained within the package. Optionally prefixed by a project abbreviation. Examples: employee_api - API for the employee table logger - Utilities including logging support constants - Constants for use across a project types - Types for use across a project","title":"Package"},{"location":"2-naming-conventions/naming-conventions/#primary-key-constraint","text":"Table name or table abbreviation followed by the suffix _pk . Examples: employee_pk department_pk contract_pk","title":"Primary Key Constraint"},{"location":"2-naming-conventions/naming-conventions/#procedure","text":"Name is built from a verb followed by a noun. The name of the procedure should answer the question \u201cWhat is done?\u201d Procedures and functions are often named with underscores between words because some editors write all letters in uppercase in the object tree, so it is difficult to read them. Optionally prefixed by a project abbreviation. Examples: calculate_salary set_hiredate check_order_state","title":"Procedure"},{"location":"2-naming-conventions/naming-conventions/#sequence","text":"Version: Pre 12 only, 12 and later use identity columns, or potentially even better, use a default of to_number(sys_guid(), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX') . Name is built from the table name the sequence serves as primary key generator and the suffix _seq or the purpose of the sequence followed by a _seq . Optionally prefixed by a project abbreviation. Examples: employee_seq order_number_seq","title":"Sequence"},{"location":"2-naming-conventions/naming-conventions/#synonym","text":"Synonyms should share the name with the object referenced in another schema.","title":"Synonym"},{"location":"2-naming-conventions/naming-conventions/#system-trigger","text":"Name of the event the trigger is based on. Activity done by the trigger Suffix _trg Examples: ddl_audit_trg logon_trg","title":"System Trigger"},{"location":"2-naming-conventions/naming-conventions/#table","text":"Singular name of what is contained in the table. Add a comment to the database dictionary for every table and every column in the table. Optionally prefixed by a project abbreviation. Examples: employee department sct_contract sct_contract_line sct_incentive_module Reason: Singular names have the following advantages over plural names: 1. In general, tables represent entities. Entities are singular. This encourages the art of Entity-Relationship modeling. 2. If all table names are singular, then you don't have to know if a table has a single row or multiple rows before you use it. 3. Plural names can be vastly different from singular names. What is the plural of news? lotus? knife? cactus? nucleus? There are so many words that are difficult and nonstandard to pluralize that it can add significant work to a project to 'figure out the plurals'. 4. For non-native speakers of whatever language is being used for table names, point number 3 is magnified significantly. 5. Plurals add extra unnecessary length to table names. 6. By far the biggest reason: There is no value in going through all the work to plural a table name. SQL statements often deal with a single row from a table with multiple rows, so you can't make the argument that employees is better than employee 'because the SQL will read better'. Example (bad): 1 2 3 4 5 6 well_bores well_bore_completions well_bore_completion_components well_bore_studies well_bore_study_results wells Example (good): 1 2 3 4 5 6 well well_bore well_bore_completion well_bore_completion_component well_bore_study well_bore_study_result","title":"Table"},{"location":"2-naming-conventions/naming-conventions/#surrogate-key-columns","text":"Surrogate primary key columns should be the table name with an underscore and id appended. For example: employee_id Reason: Naming the surrogate primary key column the same name that it would have (at least 99% of the time) when used as a foreign key allows the use of the using clause in SQL which greatly increases readability and maintainability of SQL code. When each table has a surrogate primary key column named id , then select clauses that select multiple id columns will need aliases (more code, harder to read and maintain). Additionaly, the id surrogate key column means that every join will be forced into the on syntax which is more error-prone and harder to read than the using clause. Example (bad): 1 2 3 4 5 6 select e.id as employee_id ,d.id as department_id ,e.last_name ,d.name from employee e join department d on (e.department_id = d.id); Example (good): 1 2 3 4 5 6 select e.employee_id ,department_id ,e.last_name ,d.name from employee e join department d using (department_id);","title":"Surrogate Key Columns"},{"location":"2-naming-conventions/naming-conventions/#temporary-table-global-temporary-table","text":"Naming as described for tables. Ideally suffixed by _gtt Optionally prefixed by a project abbreviation. Examples: employee_gtt contract_gtt","title":"Temporary Table (Global Temporary Table)"},{"location":"2-naming-conventions/naming-conventions/#unique-key-constraint","text":"Table name followed by the role of the unique key constraint, a _uk and an optional number suffix, if necessary. Examples: employee_name_uk department_deptno_uk sct_contract_uk","title":"Unique Key Constraint"},{"location":"2-naming-conventions/naming-conventions/#view","text":"Singular name of what is contained in the view. Ideally, suffixed by an indicator identifying the object as a view like _v or _vw (mostly used, when a 1:1 view layer lies above the table layer, but not used for editioning views) Add a comment to the database dictionary for every view and every column. Optionally prefixed by a project abbreviation. Examples: active_order -- A view that selects only active orders from the order table order_v -- A view to the order table order -- An editioning view that covers the \"_order\" base table","title":"View"},{"location":"3-coding-style/01-coding-style/","text":"General Style Formatting Rules Rule Description 1 All code is written in lowercase. 2 3 space indention. 3 One command per line. 4 Keywords loop , else , elseif , end if , when on a new line. 5 Commas in front of separated elements. 6 Call parameters aligned, operators aligned, values aligned. 7 SQL keywords are right aligned within a SQL command. 8 Within a program unit only line comments -- are used. 9 Brackets are used when needed or when helpful to clarify a construct. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 procedure set_salary ( in_employee_id IN employee . employee_id % type ) is cursor c_employee ( p_employee_id IN employee . employee_id % type ) is select last_name , first_name , salary from employee where employee_id = p_employee_id order by last_name , first_name ; r_employee c_employee % rowtype ; l_new_salary employee . salary % type ; begin open c_employee ( p_employee_id => in_employee_id ); fetch c_employee into r_employee ; close c_employee ; new_salary ( in_employee_id => in_employee_id , out_salary => l_new_salary ); -- Check whether salary has changed if r_employee . salary <> l_new_salary then update employee set salary = l_new_salary where employee_id = in_employee_id ; end if ; end set_salary ; Package Version Function When version control is not available, each package could have a package_version function that returns a varchar2. Note: If you are using a version control system (like Git for example) to track all code changes and you feel that you'll be able to track everything below using your version control system, and everyone that might need to figure out 'what is happening', from all developers to purely operational DBAs, knows how to use the version control system to figure out the below, then you might consider the below redundant and ' extra work '. If so, feel free not implement this function. Package Spec 1 2 3 4 5 6 --This function returns the version number of the package using the following rules: -- 1. If there is a major change that impacts multiple packages, increment the first digit, e.g. 03.05.09 -> 04.00.00 -- 2. If there is a change to the package spec, increment the first dot, e.g. 03.02.05 -> 03.03.00 -- 3. If there is a minor change, only to the package body, increment the last dot e.g. 03.02.05 -> 03.02.06 -- 4. If the function returns a value ending in WIP, then the package is actively being worked on by a developer. function package_version return varchar2 ; Package Body 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Increment the version number based upon the following rules -- 1. If there is a major change that impacts multiple packages, increment the first digit, e.g. 03.05.09 -> 04.00.00 -- 2. If there is a change to the package spec, increment the first dot, e.g. 03.02.05 -> 03.03.00 -- 3. If there is a minor change, only to the package body, increment the last dot e.g. 03.02.05 -> 03.02.06 -- 4. If a developer begins work on a package, increment the comment version and include the words 'IN PROGRESS' in -- the new version line. Increment the return value and add WIP to the return value. Example: return '01.00.01 WIP' -- And then IMMEDIATELY push/commit & compile the package. -- As you are working on the package and make updates to lines, use the version number at the end of the line to indicate when -- the line was changed. Example: l_person := 'Bob'; -- 01.00.01 Bob is the new person, was Joe. -- 5. Once work is complete, remove 'IN PROGRESS' from the comment and remove WIP from the return value. -- 6. If your work crosses the boundary of a sprint, having WIP in the return value will indicate that the package should not be promoted. function package_version return varchar2 is begin -- 01.00.00 YYYY-MM-DD First & Last Name Initial Version -- 01.00.01 YYYY-MM-DD First & Last Name Fixed issue number 72 documented in Jira ticket 87: https://ourjiraurl.com/f?p=87 return '01.00.01' ; end package_version ; Some notes on the above: We are computer scientists, we write dates as YYYY-MM-DD, not DD-MON-RR or MON-DD-YYYY or any other way. If you are in the middle of an update, then the function would look like this: 1 2 3 4 5 6 [ snip ] -- 01.00.00 YYYY-MM-DD First & Last Name Initial Version -- 01.00.01 YYYY-MM-DD First & Last Name Fixed issue documented in Jira ticket 87: https://ourjiraurl.com/f?p=87 -- 01.00.02 2019-10-25 Rich Soule IN PROGRESS Fixing issue documented in Jira ticket 90: https://ourjiraurl.com/f?p=90 return '01.00.02 WIP' ; end package_version ;","title":"General Style"},{"location":"3-coding-style/01-coding-style/#general-style","text":"","title":"General Style"},{"location":"3-coding-style/01-coding-style/#formatting","text":"","title":"Formatting"},{"location":"3-coding-style/01-coding-style/#rules","text":"Rule Description 1 All code is written in lowercase. 2 3 space indention. 3 One command per line. 4 Keywords loop , else , elseif , end if , when on a new line. 5 Commas in front of separated elements. 6 Call parameters aligned, operators aligned, values aligned. 7 SQL keywords are right aligned within a SQL command. 8 Within a program unit only line comments -- are used. 9 Brackets are used when needed or when helpful to clarify a construct.","title":"Rules"},{"location":"3-coding-style/01-coding-style/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 procedure set_salary ( in_employee_id IN employee . employee_id % type ) is cursor c_employee ( p_employee_id IN employee . employee_id % type ) is select last_name , first_name , salary from employee where employee_id = p_employee_id order by last_name , first_name ; r_employee c_employee % rowtype ; l_new_salary employee . salary % type ; begin open c_employee ( p_employee_id => in_employee_id ); fetch c_employee into r_employee ; close c_employee ; new_salary ( in_employee_id => in_employee_id , out_salary => l_new_salary ); -- Check whether salary has changed if r_employee . salary <> l_new_salary then update employee set salary = l_new_salary where employee_id = in_employee_id ; end if ; end set_salary ;","title":"Example"},{"location":"3-coding-style/01-coding-style/#package-version-function","text":"When version control is not available, each package could have a package_version function that returns a varchar2. Note: If you are using a version control system (like Git for example) to track all code changes and you feel that you'll be able to track everything below using your version control system, and everyone that might need to figure out 'what is happening', from all developers to purely operational DBAs, knows how to use the version control system to figure out the below, then you might consider the below redundant and ' extra work '. If so, feel free not implement this function.","title":"Package Version Function"},{"location":"3-coding-style/01-coding-style/#package-spec","text":"1 2 3 4 5 6 --This function returns the version number of the package using the following rules: -- 1. If there is a major change that impacts multiple packages, increment the first digit, e.g. 03.05.09 -> 04.00.00 -- 2. If there is a change to the package spec, increment the first dot, e.g. 03.02.05 -> 03.03.00 -- 3. If there is a minor change, only to the package body, increment the last dot e.g. 03.02.05 -> 03.02.06 -- 4. If the function returns a value ending in WIP, then the package is actively being worked on by a developer. function package_version return varchar2 ;","title":"Package Spec"},{"location":"3-coding-style/01-coding-style/#package-body","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Increment the version number based upon the following rules -- 1. If there is a major change that impacts multiple packages, increment the first digit, e.g. 03.05.09 -> 04.00.00 -- 2. If there is a change to the package spec, increment the first dot, e.g. 03.02.05 -> 03.03.00 -- 3. If there is a minor change, only to the package body, increment the last dot e.g. 03.02.05 -> 03.02.06 -- 4. If a developer begins work on a package, increment the comment version and include the words 'IN PROGRESS' in -- the new version line. Increment the return value and add WIP to the return value. Example: return '01.00.01 WIP' -- And then IMMEDIATELY push/commit & compile the package. -- As you are working on the package and make updates to lines, use the version number at the end of the line to indicate when -- the line was changed. Example: l_person := 'Bob'; -- 01.00.01 Bob is the new person, was Joe. -- 5. Once work is complete, remove 'IN PROGRESS' from the comment and remove WIP from the return value. -- 6. If your work crosses the boundary of a sprint, having WIP in the return value will indicate that the package should not be promoted. function package_version return varchar2 is begin -- 01.00.00 YYYY-MM-DD First & Last Name Initial Version -- 01.00.01 YYYY-MM-DD First & Last Name Fixed issue number 72 documented in Jira ticket 87: https://ourjiraurl.com/f?p=87 return '01.00.01' ; end package_version ; Some notes on the above: We are computer scientists, we write dates as YYYY-MM-DD, not DD-MON-RR or MON-DD-YYYY or any other way. If you are in the middle of an update, then the function would look like this: 1 2 3 4 5 6 [ snip ] -- 01.00.00 YYYY-MM-DD First & Last Name Initial Version -- 01.00.01 YYYY-MM-DD First & Last Name Fixed issue documented in Jira ticket 87: https://ourjiraurl.com/f?p=87 -- 01.00.02 2019-10-25 Rich Soule IN PROGRESS Fixing issue documented in Jira ticket 90: https://ourjiraurl.com/f?p=90 return '01.00.02 WIP' ; end package_version ;","title":"Package Body"},{"location":"3-coding-style/02-coding-style-comments/","text":"Comments Style Commenting Goals Code comments are there to help future readers of the code (there is a good chance that future reader is you... Any code that you wrote six months to a year ago might as well have been written by someone else) understand how to use the code (especially in PL/SQL package specs) and how to maintain the code (especially in PL/SQL package bodies). The JavaDoc Template Use the JavaDoc style comments, as seen in the example below and read more here JavaDoc Template and JavaDoc for the Oracle Database a la DBDOC . 1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Description * * * @example * * @issue * * @author * @created * @param * @return */ Commenting Tags Tag Meaning Example example Code snippet that shows how the procedure or function can be called. issue Ticketing system issue or ticket that explains the code functionality @issue IE-234 param Description of a parameter. @param in_string input string return Description of the return value of a function. @return result of the calculation throws Describe errors that may be raised by the program unit. @throws no_data_found Generated Documentation If you used the JavaDoc syntax then you can use plsql-md-doc to generate an easy to read document. Alternatively, Oracle SQL Developer or PL/SQL Developer include documentation functionality based on a javadoc-like tagging. Commenting Conventions Inside a program unit only use the line commenting technique -- unless you temporarly deactivate code sections for testing. To comment the source code for later document generation, comments like /** ... */ are used. Within these documentation comments, tags may be used to define the documentation structure. Code Instrumentation Code Instrumentation refers, among other things, to an ability to monitor, measure, and diagnose errors. In short, we'll call them debug messages or log messages. By far, the best logging framework available is Logger from OraOpenSource . Consider using logger calls instead of comments when the information will, explain the logic, help diagnose errors, and monitor execution flow. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 procedure verify_valid_auth is l_scope logger_logs . scope % type : = k_scope_prefix || 'verify_valid_auth' ; begin logger . log ( 'BEGIN' , l_scope ); if is_token_expired then logger . log ( 'Time to renew the expired token, and set headers.' , l_scope ); hubspot_auth ; else logger . log ( 'We have a good token, set headers.' , l_scope ); set_rest_headers ; end if ; logger . log ( 'END' , l_scope ); exception when OTHERS then logger . log_error ( 'Unhandled Exception' , l_scope ); raise ; end verify_valid_auth ;","title":"Comments Style"},{"location":"3-coding-style/02-coding-style-comments/#comments-style","text":"","title":"Comments Style"},{"location":"3-coding-style/02-coding-style-comments/#commenting-goals","text":"Code comments are there to help future readers of the code (there is a good chance that future reader is you... Any code that you wrote six months to a year ago might as well have been written by someone else) understand how to use the code (especially in PL/SQL package specs) and how to maintain the code (especially in PL/SQL package bodies).","title":"Commenting Goals"},{"location":"3-coding-style/02-coding-style-comments/#the-javadoc-template","text":"Use the JavaDoc style comments, as seen in the example below and read more here JavaDoc Template and JavaDoc for the Oracle Database a la DBDOC . 1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Description * * * @example * * @issue * * @author * @created * @param * @return */","title":"The JavaDoc Template"},{"location":"3-coding-style/02-coding-style-comments/#commenting-tags","text":"Tag Meaning Example example Code snippet that shows how the procedure or function can be called. issue Ticketing system issue or ticket that explains the code functionality @issue IE-234 param Description of a parameter. @param in_string input string return Description of the return value of a function. @return result of the calculation throws Describe errors that may be raised by the program unit. @throws no_data_found","title":"Commenting Tags"},{"location":"3-coding-style/02-coding-style-comments/#generated-documentation","text":"If you used the JavaDoc syntax then you can use plsql-md-doc to generate an easy to read document. Alternatively, Oracle SQL Developer or PL/SQL Developer include documentation functionality based on a javadoc-like tagging.","title":"Generated Documentation"},{"location":"3-coding-style/02-coding-style-comments/#commenting-conventions","text":"Inside a program unit only use the line commenting technique -- unless you temporarly deactivate code sections for testing. To comment the source code for later document generation, comments like /** ... */ are used. Within these documentation comments, tags may be used to define the documentation structure.","title":"Commenting Conventions"},{"location":"3-coding-style/02-coding-style-comments/#code-instrumentation","text":"Code Instrumentation refers, among other things, to an ability to monitor, measure, and diagnose errors. In short, we'll call them debug messages or log messages. By far, the best logging framework available is Logger from OraOpenSource . Consider using logger calls instead of comments when the information will, explain the logic, help diagnose errors, and monitor execution flow. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 procedure verify_valid_auth is l_scope logger_logs . scope % type : = k_scope_prefix || 'verify_valid_auth' ; begin logger . log ( 'BEGIN' , l_scope ); if is_token_expired then logger . log ( 'Time to renew the expired token, and set headers.' , l_scope ); hubspot_auth ; else logger . log ( 'We have a good token, set headers.' , l_scope ); set_rest_headers ; end if ; logger . log ( 'END' , l_scope ); exception when OTHERS then logger . log_error ( 'Unhandled Exception' , l_scope ); raise ; end verify_valid_auth ;","title":"Code Instrumentation"},{"location":"4-language-usage/1-general/g-1010/","text":"G-1010: Try to label your sub blocks. Minor Maintainability Reason It's a good alternative for comments to indicate the start and end of a named processing. Example (bad) 1 2 3 4 5 6 7 8 9 10 begin begin null ; end ; begin null ; end ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 << good >> begin << prepare_data >> begin null ; end prepare_data ; << process_data >> begin null ; end process_data ; end good ; /","title":"G-1010: Try to label your sub blocks."},{"location":"4-language-usage/1-general/g-1010/#g-1010-try-to-label-your-sub-blocks","text":"Minor Maintainability","title":"G-1010: Try to label your sub blocks."},{"location":"4-language-usage/1-general/g-1010/#reason","text":"It's a good alternative for comments to indicate the start and end of a named processing.","title":"Reason"},{"location":"4-language-usage/1-general/g-1010/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 begin begin null ; end ; begin null ; end ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1010/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 << good >> begin << prepare_data >> begin null ; end prepare_data ; << process_data >> begin null ; end process_data ; end good ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1020/","text":"G-1020: Have a matching loop or block label. Minor Maintainability Reason Use a label directly in front of loops and nested anonymous blocks: To give a name to that portion of code and thereby self-document what it is doing. So that you can repeat that name with the end statement of that block or loop. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 declare i integer ; k_min_value constant integer : = 1 ; k_max_value constant integer : = 10 ; k_increment constant integer : = 1 ; begin << prepare_data >> begin null ; end ; << process_data >> begin null ; end ; i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop ; << basic_loop >> loop exit basic_loop ; end loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 declare i integer ; k_min_value constant integer : = 1 ; k_max_value constant integer : = 10 ; k_increment constant integer : = 1 ; begin << prepare_data >> begin null ; end prepare_data ; << process_data >> begin null ; end process_data ; i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; end ; /","title":"G-1020: Have a matching loop or block label."},{"location":"4-language-usage/1-general/g-1020/#g-1020-have-a-matching-loop-or-block-label","text":"Minor Maintainability","title":"G-1020: Have a matching loop or block label."},{"location":"4-language-usage/1-general/g-1020/#reason","text":"Use a label directly in front of loops and nested anonymous blocks: To give a name to that portion of code and thereby self-document what it is doing. So that you can repeat that name with the end statement of that block or loop.","title":"Reason"},{"location":"4-language-usage/1-general/g-1020/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 declare i integer ; k_min_value constant integer : = 1 ; k_max_value constant integer : = 10 ; k_increment constant integer : = 1 ; begin << prepare_data >> begin null ; end ; << process_data >> begin null ; end ; i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop ; << basic_loop >> loop exit basic_loop ; end loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1020/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 declare i integer ; k_min_value constant integer : = 1 ; k_max_value constant integer : = 10 ; k_increment constant integer : = 1 ; begin << prepare_data >> begin null ; end prepare_data ; << process_data >> begin null ; end process_data ; i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; end ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1030/","text":"G-1030: Avoid defining variables that are not used. Minor Efficiency, Maintainability Reason Unused variables decrease the maintainability and readability of your code. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; l_first_name employee . first_name % type ; k_department_id constant department . department_id % type : = 10 ; e_good exception ; begin select e . last_name into l_last_name from employee e where e . department_id = k_department_id ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end my_proc ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; k_department_id constant department . department_id % type : = 10 ; e_good exception ; begin select e . last_name into l_last_name from employee e where e . department_id = k_department_id ; raise e_good ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end my_proc ; end my_package ; /","title":"G-1030: Avoid defining variables that are not used."},{"location":"4-language-usage/1-general/g-1030/#g-1030-avoid-defining-variables-that-are-not-used","text":"Minor Efficiency, Maintainability","title":"G-1030: Avoid defining variables that are not used."},{"location":"4-language-usage/1-general/g-1030/#reason","text":"Unused variables decrease the maintainability and readability of your code.","title":"Reason"},{"location":"4-language-usage/1-general/g-1030/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; l_first_name employee . first_name % type ; k_department_id constant department . department_id % type : = 10 ; e_good exception ; begin select e . last_name into l_last_name from employee e where e . department_id = k_department_id ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end my_proc ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1030/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; k_department_id constant department . department_id % type : = 10 ; e_good exception ; begin select e . last_name into l_last_name from employee e where e . department_id = k_department_id ; raise e_good ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end my_proc ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1040/","text":"G-1040: Always avoid dead code. Minor Maintainability Reason Any part of your code, which is no longer used or cannot be reached, should be eliminated from your programs to simplify the code. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 declare k_dept_purchasing constant departments . department_id % type : = 30 ; begin if 2 = 3 then null ; -- some dead code here end if ; null ; -- some enabled code here << my_loop >> loop exit my_loop ; null ; -- some dead code here end loop my_loop ; null ; -- some other enabled code here case when 1 = 1 and 'x' = 'y' then null ; -- some dead code here else null ; -- some further enabled code here end case ; << my_loop2 >> for r_emp in ( select last_name from employee where department_id = k_dept_purchasing or commission_pct is not null and 5 = 6 ) -- \"or commission_pct is not null\" is dead code loop sys . dbms_output . put_line ( r_emp . last_name ); end loop my_loop2 ; return ; null ; -- some dead code here end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare k_dept_admin constant dept . deptno % type : = 10 ; begin null ; -- some enabled code here null ; -- some other enabled code here null ; -- some further enabled code here << my_loop2 >> for r_emp in ( select last_name from employee where department_id = k_dept_admin or commission_pct is not null ) loop sys . dbms_output . put_line ( r_emp . last_name ); end loop my_loop2 ; end ; /","title":"G-1040: Always avoid dead code."},{"location":"4-language-usage/1-general/g-1040/#g-1040-always-avoid-dead-code","text":"Minor Maintainability","title":"G-1040: Always avoid dead code."},{"location":"4-language-usage/1-general/g-1040/#reason","text":"Any part of your code, which is no longer used or cannot be reached, should be eliminated from your programs to simplify the code.","title":"Reason"},{"location":"4-language-usage/1-general/g-1040/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 declare k_dept_purchasing constant departments . department_id % type : = 30 ; begin if 2 = 3 then null ; -- some dead code here end if ; null ; -- some enabled code here << my_loop >> loop exit my_loop ; null ; -- some dead code here end loop my_loop ; null ; -- some other enabled code here case when 1 = 1 and 'x' = 'y' then null ; -- some dead code here else null ; -- some further enabled code here end case ; << my_loop2 >> for r_emp in ( select last_name from employee where department_id = k_dept_purchasing or commission_pct is not null and 5 = 6 ) -- \"or commission_pct is not null\" is dead code loop sys . dbms_output . put_line ( r_emp . last_name ); end loop my_loop2 ; return ; null ; -- some dead code here end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1040/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare k_dept_admin constant dept . deptno % type : = 10 ; begin null ; -- some enabled code here null ; -- some other enabled code here null ; -- some further enabled code here << my_loop2 >> for r_emp in ( select last_name from employee where department_id = k_dept_admin or commission_pct is not null ) loop sys . dbms_output . put_line ( r_emp . last_name ); end loop my_loop2 ; end ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1050/","text":"G-1050: Avoid using literals in your code. Minor Changeability Reason Literals are often used more than once in your code. Having them defined as a constant reduces typos in your code and improves the maintainability. All constants should be collated in just one package used as a library. If these constants should be used in SQL too it is good practice to write a deterministic package function for every constant. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 declare l_job employee . job_id % type ; begin select e . job_id into l_job from employee e where e . manager_id is null ; if l_job = 'ad_pres' then null ; end if ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace package constants is k_president constant employee . job_id % type : = 'ad_pres' ; end constants ; / declare l_job employee . job_id % type ; begin select e . job_id into l_job from employee e where e . manager_id is null ; if l_job = constants . k_president then null ; end if ; exception when no_data_found then null ; -- handle_no_data_found ; when too_many_rows then null ; -- handle_too_many_rows ; end ; /","title":"G-1050: Avoid using literals in your code."},{"location":"4-language-usage/1-general/g-1050/#g-1050-avoid-using-literals-in-your-code","text":"Minor Changeability","title":"G-1050: Avoid using literals in your code."},{"location":"4-language-usage/1-general/g-1050/#reason","text":"Literals are often used more than once in your code. Having them defined as a constant reduces typos in your code and improves the maintainability. All constants should be collated in just one package used as a library. If these constants should be used in SQL too it is good practice to write a deterministic package function for every constant.","title":"Reason"},{"location":"4-language-usage/1-general/g-1050/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 declare l_job employee . job_id % type ; begin select e . job_id into l_job from employee e where e . manager_id is null ; if l_job = 'ad_pres' then null ; end if ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1050/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace package constants is k_president constant employee . job_id % type : = 'ad_pres' ; end constants ; / declare l_job employee . job_id % type ; begin select e . job_id into l_job from employee e where e . manager_id is null ; if l_job = constants . k_president then null ; end if ; exception when no_data_found then null ; -- handle_no_data_found ; when too_many_rows then null ; -- handle_too_many_rows ; end ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1060/","text":"G-1060: Avoid storing ROWIDs or UROWIDs in database tables. Major Reliability Reason It is an extremely dangerous practice to store ROWIDs in a table, except for some very limited scenarios of runtime duration. Any manually explicit or system generated implicit table reorganization will reassign the row's ROWID and break the data consistency. Instead of using ROWID for later reference to the original row one should use the primary key column(s). Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 begin insert into employee_log ( employee_id , last_name , first_name , rid ) select employee_id , last_name , first_name , rowid from employee ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 begin insert into employee_log ( employee_id , last_name , first_name ) select employee_id , last_name , first_name from employee ; end ; /","title":"G-1060: Avoid storing ROWIDs or UROWIDs in database tables."},{"location":"4-language-usage/1-general/g-1060/#g-1060-avoid-storing-rowids-or-urowids-in-database-tables","text":"Major Reliability","title":"G-1060: Avoid storing ROWIDs or UROWIDs in database tables."},{"location":"4-language-usage/1-general/g-1060/#reason","text":"It is an extremely dangerous practice to store ROWIDs in a table, except for some very limited scenarios of runtime duration. Any manually explicit or system generated implicit table reorganization will reassign the row's ROWID and break the data consistency. Instead of using ROWID for later reference to the original row one should use the primary key column(s).","title":"Reason"},{"location":"4-language-usage/1-general/g-1060/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 begin insert into employee_log ( employee_id , last_name , first_name , rid ) select employee_id , last_name , first_name , rowid from employee ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1060/#example-good","text":"1 2 3 4 5 6 7 8 9 10 begin insert into employee_log ( employee_id , last_name , first_name ) select employee_id , last_name , first_name from employee ; end ; /","title":"Example (good)"},{"location":"4-language-usage/1-general/g-1070/","text":"G-1070: Avoid nesting comment blocks. Minor Maintainability Reason Having an end-of-comment within a block comment will end that block-comment. This does not only influence your code but is also very hard to read. Example (bad) 1 2 3 4 5 6 7 begin /* comment one -- nested comment two */ null ; -- comment three /* nested comment four */ null ; end ; / Example (good) 1 2 3 4 5 6 7 begin /* comment one, comment two */ null ; -- comment three, comment four null ; end ; /","title":"G-1070: Avoid nesting comment blocks."},{"location":"4-language-usage/1-general/g-1070/#g-1070-avoid-nesting-comment-blocks","text":"Minor Maintainability","title":"G-1070: Avoid nesting comment blocks."},{"location":"4-language-usage/1-general/g-1070/#reason","text":"Having an end-of-comment within a block comment will end that block-comment. This does not only influence your code but is also very hard to read.","title":"Reason"},{"location":"4-language-usage/1-general/g-1070/#example-bad","text":"1 2 3 4 5 6 7 begin /* comment one -- nested comment two */ null ; -- comment three /* nested comment four */ null ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/1-general/g-1070/#example-good","text":"1 2 3 4 5 6 7 begin /* comment one, comment two */ null ; -- comment three, comment four null ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2110/","text":"G-2110: Try to use anchored declarations for variables, constants and types. Major Maintainability, Reliability Reason Changing the size of the database column last_name in the employee table from varchar2(20 char) to varchar2(30 char) will result in an error within your code whenever a value larger than the hard coded size is read from the table. This can be avoided using anchored declarations. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is procedure my_proc is l_last_name varchar2 ( 20 char ); k_first_row constant integer : = 1 ; begin select e . last_name into l_last_name from employee e where rownum = k_first_row ; exception when no_data_found then null ; -- handle no_data_found when too_many_rows then null ; -- handle too_many_rows (impossible) end my_proc ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; k_first_row constant integer : = 1 ; begin select e . last_name into l_last_name from employee e where rownum = k_first_row ; exception when no_data_found then null ; -- handle no_data_found when too_many_rows then null ; -- handle too_many_rows (impossible) end my_proc ; end my_package ; /","title":"G-2110: Try to use anchored declarations for variables, constants and types."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2110/#g-2110-try-to-use-anchored-declarations-for-variables-constants-and-types","text":"Major Maintainability, Reliability","title":"G-2110: Try to use anchored declarations for variables, constants and types."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2110/#reason","text":"Changing the size of the database column last_name in the employee table from varchar2(20 char) to varchar2(30 char) will result in an error within your code whenever a value larger than the hard coded size is read from the table. This can be avoided using anchored declarations.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2110/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is procedure my_proc is l_last_name varchar2 ( 20 char ); k_first_row constant integer : = 1 ; begin select e . last_name into l_last_name from employee e where rownum = k_first_row ; exception when no_data_found then null ; -- handle no_data_found when too_many_rows then null ; -- handle too_many_rows (impossible) end my_proc ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2110/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is procedure my_proc is l_last_name employee . last_name % type ; k_first_row constant integer : = 1 ; begin select e . last_name into l_last_name from employee e where rownum = k_first_row ; exception when no_data_found then null ; -- handle no_data_found when too_many_rows then null ; -- handle too_many_rows (impossible) end my_proc ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2120/","text":"G-2120: Try to have a single location to define your types. Minor Changeability Reason Single point of change when changing the data type. No need to argue where to define types or where to look for existing definitions. A single location could be either a type specification package or the database (database-defined types). Example (bad) 1 2 3 4 5 6 7 8 9 create or replace package body my_package is procedure my_proc is subtype big_string_type is varchar2 ( 1000 char ); l_note big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package types is subtype big_string_type is varchar2 ( 1000 char ); end types ; / create or replace package body my_package is procedure my_proc is l_note types . big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"G-2120: Try to have a single location to define your types."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2120/#g-2120-try-to-have-a-single-location-to-define-your-types","text":"Minor Changeability","title":"G-2120: Try to have a single location to define your types."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2120/#reason","text":"Single point of change when changing the data type. No need to argue where to define types or where to look for existing definitions. A single location could be either a type specification package or the database (database-defined types).","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2120/#example-bad","text":"1 2 3 4 5 6 7 8 9 create or replace package body my_package is procedure my_proc is subtype big_string_type is varchar2 ( 1000 char ); l_note big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2120/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package types is subtype big_string_type is varchar2 ( 1000 char ); end types ; / create or replace package body my_package is procedure my_proc is l_note types . big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/","text":"G-2130: Try to use subtypes for constructs used often in your code. Minor Changeability Reason Single point of change when changing the data type. Your code will be easier to read as the usage of a variable/constant may be derived from its definition. Examples of possible subtype definitions Type Usage ora_name_type Object corresponding to the ORACLE naming conventions (table, variable, column, package, etc.). max_vc2_type String variable with maximal VARCHAR2 size. array_index_type Best fitting data type for array navigation. id_type Data type used for all primary key (table_name_id) columns. Example (bad) 1 2 3 4 5 6 7 8 create or replace package body my_package is procedure my_proc is l_note varchar2 ( 1000 char ); begin l_note : = some_function (); end my_proc ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package types is subtype big_string_type is varchar2 ( 1000 char ); end types ; / create or replace package body my_package is procedure my_proc is l_note types . big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"G-2130: Try to use subtypes for constructs used often in your code."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/#g-2130-try-to-use-subtypes-for-constructs-used-often-in-your-code","text":"Minor Changeability","title":"G-2130: Try to use subtypes for constructs used often in your code."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/#reason","text":"Single point of change when changing the data type. Your code will be easier to read as the usage of a variable/constant may be derived from its definition.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/#examples-of-possible-subtype-definitions","text":"Type Usage ora_name_type Object corresponding to the ORACLE naming conventions (table, variable, column, package, etc.). max_vc2_type String variable with maximal VARCHAR2 size. array_index_type Best fitting data type for array navigation. id_type Data type used for all primary key (table_name_id) columns.","title":"Examples of possible subtype definitions"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/#example-bad","text":"1 2 3 4 5 6 7 8 create or replace package body my_package is procedure my_proc is l_note varchar2 ( 1000 char ); begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2130/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package types is subtype big_string_type is varchar2 ( 1000 char ); end types ; / create or replace package body my_package is procedure my_proc is l_note types . big_string_type ; begin l_note : = some_function (); end my_proc ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2140/","text":"G-2140: Never initialize variables with NULL. Minor Maintainability Reason Variables are initialized to NULL by default. Example (bad) 1 2 3 4 5 6 declare l_note big_string_type : = null ; begin sys . dbms_output . put_line ( l_note ); end ; / Example (good) 1 2 3 4 5 6 declare l_note big_string_type ; begin sys . dbms_output . put_line ( l_note ); end ; /","title":"G-2140: Never initialize variables with NULL."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2140/#g-2140-never-initialize-variables-with-null","text":"Minor Maintainability","title":"G-2140: Never initialize variables with NULL."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2140/#reason","text":"Variables are initialized to NULL by default.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2140/#example-bad","text":"1 2 3 4 5 6 declare l_note big_string_type : = null ; begin sys . dbms_output . put_line ( l_note ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2140/#example-good","text":"1 2 3 4 5 6 declare l_note big_string_type ; begin sys . dbms_output . put_line ( l_note ); end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2150/","text":"G-2150: Never use comparisons with NULL values, use IS [NOT] NULL. Blocker Portability, Reliability Reason The NULL value can cause confusion both from the standpoint of code review and code execution. You must always use the IS NULL or IS NOT NULL syntax when you need to check if a value is or is not NULL . Example (bad) 1 2 3 4 5 6 7 8 declare l_value integer ; begin if l_value = null then null ; -- Nothing ever equals null, so this code will never be run end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 declare l_value integer ; begin if l_value is null then null ; end if ; end ; /","title":"G-2150: Never use comparisons with NULL values, use IS [NOT] NULL."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2150/#g-2150-never-use-comparisons-with-null-values-use-is-not-null","text":"Blocker Portability, Reliability","title":"G-2150: Never use comparisons with NULL values, use IS [NOT] NULL."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2150/#reason","text":"The NULL value can cause confusion both from the standpoint of code review and code execution. You must always use the IS NULL or IS NOT NULL syntax when you need to check if a value is or is not NULL .","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2150/#example-bad","text":"1 2 3 4 5 6 7 8 declare l_value integer ; begin if l_value = null then null ; -- Nothing ever equals null, so this code will never be run end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2150/#example-good","text":"1 2 3 4 5 6 7 8 declare l_value integer ; begin if l_value is null then null ; end if ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2160/","text":"G-2160: Avoid initializing variables using functions in the declaration section. Critical Reliability Reason If your initialization fails, you will not be able to handle the error in your exceptions block. Example (bad) 1 2 3 4 5 6 7 8 declare k_department_id constant integer : = 100 ; l_department_name department . department_name % type : = department_api . name_by_id ( in_id => k_department_id ); begin sys . dbms_output . put_line ( l_department_name ); end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 declare k_department_id constant integer : = 100 ; k_unkown_name constant department . department_name % type : = 'unknown' ; l_department_name department . department_name % type ; begin << init >> begin l_department_name : = department_api . name_by_id ( in_id => k_department_id ); exception when value_error then l_department_name : = k_unkown_name ; end init ; sys . dbms_output . put_line ( l_department_name ); end ; /","title":"G-2160: Avoid initializing variables using functions in the declaration section."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2160/#g-2160-avoid-initializing-variables-using-functions-in-the-declaration-section","text":"Critical Reliability","title":"G-2160: Avoid initializing variables using functions in the declaration section."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2160/#reason","text":"If your initialization fails, you will not be able to handle the error in your exceptions block.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2160/#example-bad","text":"1 2 3 4 5 6 7 8 declare k_department_id constant integer : = 100 ; l_department_name department . department_name % type : = department_api . name_by_id ( in_id => k_department_id ); begin sys . dbms_output . put_line ( l_department_name ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2160/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 declare k_department_id constant integer : = 100 ; k_unkown_name constant department . department_name % type : = 'unknown' ; l_department_name department . department_name % type ; begin << init >> begin l_department_name : = department_api . name_by_id ( in_id => k_department_id ); exception when value_error then l_department_name : = k_unkown_name ; end init ; sys . dbms_output . put_line ( l_department_name ); end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2170/","text":"G-2170: Never overload variables. Major Reliability Reason The readability of your code will be higher when you do not overload variables. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 begin << main >> declare k_main constant user_objects . object_name % type : = 'test_main' ; k_sub constant user_objects . object_name % type : = 'test_sub' ; k_sep constant user_objects . object_name % type : = ' - ' ; l_variable user_objects . object_name % type : = k_main ; begin << sub >> declare l_variable user_objects . object_name % type : = k_sub ; begin sys . dbms_output . put_line ( l_variable || k_sep || main . l_variable ); end sub ; end main ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 begin << main >> declare k_main constant user_objects . object_name % type : = 'test_main' ; k_sub constant user_objects . object_name % type : = 'test_sub' ; k_sep constant user_objects . object_name % type : = ' - ' ; l_main_variable user_objects . object_name % type : = k_main ; begin << sub >> declare l_sub_variable user_objects . object_name % type : = k_sub ; begin sys . dbms_output . put_line ( l_sub_variable || k_sep || l_main_variable ); end sub ; end main ; end ; /","title":"G-2170: Never overload variables."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2170/#g-2170-never-overload-variables","text":"Major Reliability","title":"G-2170: Never overload variables."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2170/#reason","text":"The readability of your code will be higher when you do not overload variables.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2170/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 begin << main >> declare k_main constant user_objects . object_name % type : = 'test_main' ; k_sub constant user_objects . object_name % type : = 'test_sub' ; k_sep constant user_objects . object_name % type : = ' - ' ; l_variable user_objects . object_name % type : = k_main ; begin << sub >> declare l_variable user_objects . object_name % type : = k_sub ; begin sys . dbms_output . put_line ( l_variable || k_sep || main . l_variable ); end sub ; end main ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2170/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 begin << main >> declare k_main constant user_objects . object_name % type : = 'test_main' ; k_sub constant user_objects . object_name % type : = 'test_sub' ; k_sep constant user_objects . object_name % type : = ' - ' ; l_main_variable user_objects . object_name % type : = k_main ; begin << sub >> declare l_sub_variable user_objects . object_name % type : = k_sub ; begin sys . dbms_output . put_line ( l_sub_variable || k_sep || l_main_variable ); end sub ; end main ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2180/","text":"G-2180: Never use quoted identifiers. Major Maintainability Reason Quoted identifiers make your code hard to read and maintain. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 declare \"sal+comm\" integer ; \"my constant\" constant integer : = 1 ; \"my exception\" exception ; begin \"sal+comm\" : = \"my constant\" ; exception when \"my exception\" then null ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 declare l_sal_comm integer ; k_my_constant constant integer : = 1 ; e_my_exception exception ; begin l_sal_comm : = k_my_constant ; exception when e_my_exception then null ; end ; /","title":"G-2180: Never use quoted identifiers."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2180/#g-2180-never-use-quoted-identifiers","text":"Major Maintainability","title":"G-2180: Never use quoted identifiers."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2180/#reason","text":"Quoted identifiers make your code hard to read and maintain.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2180/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 declare \"sal+comm\" integer ; \"my constant\" constant integer : = 1 ; \"my exception\" exception ; begin \"sal+comm\" : = \"my constant\" ; exception when \"my exception\" then null ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2180/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 declare l_sal_comm integer ; k_my_constant constant integer : = 1 ; e_my_exception exception ; begin l_sal_comm : = k_my_constant ; exception when e_my_exception then null ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2185/","text":"G-2185: Avoid using overly short names for explicitly or implicitly declared identifiers. Minor Maintainability Reason You should ensure that the name you have chosen well defines its purpose and usage. While you can save a few keystrokes typing very short names, the resulting code is obscure and hard for anyone besides the author to understand. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 declare i integer ; c constant integer : = 1 ; e exception ; begin i : = c ; exception when e then null ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 declare l_sal_comm integer ; k_my_constant constant integer : = 1 ; e_my_exception exception ; begin l_sal_comm : = k_my_constant ; exception when e_my_exception then null ; end ; /","title":"G-2185: Avoid using overly short names for explicitly or implicitly declared identifiers."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2185/#g-2185-avoid-using-overly-short-names-for-explicitly-or-implicitly-declared-identifiers","text":"Minor Maintainability","title":"G-2185: Avoid using overly short names for explicitly or implicitly declared identifiers."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2185/#reason","text":"You should ensure that the name you have chosen well defines its purpose and usage. While you can save a few keystrokes typing very short names, the resulting code is obscure and hard for anyone besides the author to understand.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2185/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 declare i integer ; c constant integer : = 1 ; e exception ; begin i : = c ; exception when e then null ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2185/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 declare l_sal_comm integer ; k_my_constant constant integer : = 1 ; e_my_exception exception ; begin l_sal_comm : = k_my_constant ; exception when e_my_exception then null ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2190/","text":"G-2190: Avoid using ROWID or UROWID. Major Portability, Reliability Reason Be careful about your use of Oracle-specific data types like ROWID and UROWID . They might offer a slight improvement in performance over other means of identifying a single row (primary key or unique index value), but that is by no means guaranteed. Use of ROWID or UROWID means that your SQL statement will not be portable to other SQL databases. Many developers are also not familiar with these data types, which can make the code harder to maintain. Example (bad) 1 2 3 4 5 6 7 8 9 declare l_department_name department . department_name % type ; l_rowid rowid ; begin update department set department_name = l_department_name where rowid = l_rowid ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 declare l_department_name department . department_name % type ; l_department_id department . department_id % type ; begin update department set department_name = l_department_name where department_id = l_department_id ; end ; /","title":"G-2190: Avoid using ROWID or UROWID."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2190/#g-2190-avoid-using-rowid-or-urowid","text":"Major Portability, Reliability","title":"G-2190: Avoid using ROWID or UROWID."},{"location":"4-language-usage/2-variables-and-types/1-general/g-2190/#reason","text":"Be careful about your use of Oracle-specific data types like ROWID and UROWID . They might offer a slight improvement in performance over other means of identifying a single row (primary key or unique index value), but that is by no means guaranteed. Use of ROWID or UROWID means that your SQL statement will not be portable to other SQL databases. Many developers are also not familiar with these data types, which can make the code harder to maintain.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2190/#example-bad","text":"1 2 3 4 5 6 7 8 9 declare l_department_name department . department_name % type ; l_rowid rowid ; begin update department set department_name = l_department_name where rowid = l_rowid ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/1-general/g-2190/#example-good","text":"1 2 3 4 5 6 7 8 9 declare l_department_name department . department_name % type ; l_department_id department . department_id % type ; begin update department set department_name = l_department_name where department_id = l_department_id ; end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2220/","text":"G-2220: Try to use PLS_INTEGER instead of NUMBER for arithmetic operations with integer values. Minor Efficiency Reason PLS_INTEGER having a length of -2,147,483,648 to 2,147,483,647, on a 32bit system. There are many reasons to use PLS_INTEGER instead of NUMBER : PLS_INTEGER uses less memory PLS_INTEGER uses machine arithmetic, which is up to three times faster than library arithmetic, which is used by NUMBER . Example (bad) 1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant number ( 1 , 0 ) : = 1 ; function big_increase return number is begin return k_big_increase ; end big_increase ; end constants ; / Example (good) 1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant pls_integer : = 1 ; function big_increase return pls_integer is begin return k_big_increase ; end big_increase ; end constants ; /","title":"G-2220: Try to use PLS_INTEGER instead of NUMBER for arithmetic operations with integer values."},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2220/#g-2220-try-to-use-pls_integer-instead-of-number-for-arithmetic-operations-with-integer-values","text":"Minor Efficiency","title":"G-2220: Try to use PLS_INTEGER instead of NUMBER for arithmetic operations with integer values."},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2220/#reason","text":"PLS_INTEGER having a length of -2,147,483,648 to 2,147,483,647, on a 32bit system. There are many reasons to use PLS_INTEGER instead of NUMBER : PLS_INTEGER uses less memory PLS_INTEGER uses machine arithmetic, which is up to three times faster than library arithmetic, which is used by NUMBER .","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2220/#example-bad","text":"1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant number ( 1 , 0 ) : = 1 ; function big_increase return number is begin return k_big_increase ; end big_increase ; end constants ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2220/#example-good","text":"1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant pls_integer : = 1 ; function big_increase return pls_integer is begin return k_big_increase ; end big_increase ; end constants ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/","text":"G-2230: Try to use SIMPLE_INTEGER datatype when appropriate. Minor Efficiency Restriction ORACLE 11g or later Reason SIMPLE_INTEGER does no checks on numeric overflow, which results in better performance compared to the other numeric datatypes. With ORACLE 11g, the new data type SIMPLE_INTEGER has been introduced. It is a sub-type of PLS_INTEGER and covers the same range. The basic difference is that SIMPLE_INTEGER is always NOT NULL . When the value of the declared variable is never going to be null then you can declare it as SIMPLE_INTEGER . Another major difference is that you will never face a numeric overflow using SIMPLE_INTEGER as this data type wraps around without giving any error. SIMPLE_INTEGER data type gives major performance boost over PLS_INTEGER when code is compiled in NATIVE mode, because arithmetic operations on SIMPLE_INTEGER type are performed directly at the hardware level. Example (bad) 1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant number ( 1 , 0 ) : = 1 ; function big_increase return number is begin return co_big_increase ; end big_increase ; end constants ; / Example (good) 1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant simple_integer : = 1 ; function big_increase return simple_integer is begin return co_big_increase ; end big_increase ; end constants ; /","title":"G-2230: Try to use SIMPLE_INTEGER datatype when appropriate."},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/#g-2230-try-to-use-simple_integer-datatype-when-appropriate","text":"Minor Efficiency","title":"G-2230: Try to use SIMPLE_INTEGER datatype when appropriate."},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/#restriction","text":"ORACLE 11g or later","title":"Restriction"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/#reason","text":"SIMPLE_INTEGER does no checks on numeric overflow, which results in better performance compared to the other numeric datatypes. With ORACLE 11g, the new data type SIMPLE_INTEGER has been introduced. It is a sub-type of PLS_INTEGER and covers the same range. The basic difference is that SIMPLE_INTEGER is always NOT NULL . When the value of the declared variable is never going to be null then you can declare it as SIMPLE_INTEGER . Another major difference is that you will never face a numeric overflow using SIMPLE_INTEGER as this data type wraps around without giving any error. SIMPLE_INTEGER data type gives major performance boost over PLS_INTEGER when code is compiled in NATIVE mode, because arithmetic operations on SIMPLE_INTEGER type are performed directly at the hardware level.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/#example-bad","text":"1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant number ( 1 , 0 ) : = 1 ; function big_increase return number is begin return co_big_increase ; end big_increase ; end constants ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/2-numeric-data-types/g-2230/#example-good","text":"1 2 3 4 5 6 7 8 9 create or replace package body constants is k_big_increase constant simple_integer : = 1 ; function big_increase return simple_integer is begin return co_big_increase ; end big_increase ; end constants ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2310/","text":"G-2310: Avoid using CHAR data type. Major Reliability Reason CHAR is a fixed length data type, which should only be used when appropriate. CHAR columns/variables are always filled to its specified lengths; this may lead to unwanted side effects and undesired results. Example (bad) 1 2 3 4 5 create or replace package types is subtype description_type is char ( 200 ); end types ; / Example (good) 1 2 3 4 5 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"G-2310: Avoid using CHAR data type."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2310/#g-2310-avoid-using-char-data-type","text":"Major Reliability","title":"G-2310: Avoid using CHAR data type."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2310/#reason","text":"CHAR is a fixed length data type, which should only be used when appropriate. CHAR columns/variables are always filled to its specified lengths; this may lead to unwanted side effects and undesired results.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2310/#example-bad","text":"1 2 3 4 5 create or replace package types is subtype description_type is char ( 200 ); end types ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2310/#example-good","text":"1 2 3 4 5 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2320/","text":"G-2320: Avoid using VARCHAR data type. Major Portability Reason Do not use the VARCHAR data type. Use the VARCHAR2 data type instead. Although the VARCHAR data type is currently synonymous with VARCHAR2 , the VARCHAR data type is scheduled to be redefined as a separate data type used for variable-length character strings compared with different comparison semantics. Example (bad) 1 2 3 4 create or replace package types is subtype description_type is varchar ( 200 char ); end types ; / Example (good) 1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"G-2320: Avoid using VARCHAR data type."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2320/#g-2320-avoid-using-varchar-data-type","text":"Major Portability","title":"G-2320: Avoid using VARCHAR data type."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2320/#reason","text":"Do not use the VARCHAR data type. Use the VARCHAR2 data type instead. Although the VARCHAR data type is currently synonymous with VARCHAR2 , the VARCHAR data type is scheduled to be redefined as a separate data type used for variable-length character strings compared with different comparison semantics.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2320/#example-bad","text":"1 2 3 4 create or replace package types is subtype description_type is varchar ( 200 char ); end types ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2320/#example-good","text":"1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2330/","text":"G-2330: Never use zero-length strings to substitute NULL. Major Portability Reason Today zero-length strings and NULL are currently handled identical by ORACLE. There is no guarantee that this will still be the case in future releases, therefore if you mean NULL use NULL . Example (bad) 1 2 3 4 5 6 7 8 9 create or replace package body constants is k_null_string constant varchar2 ( 1 ) : = '' ; function null_string return varchar2 is begin return k_null_string ; end null_string ; end constants ; / Example (good) 1 2 3 4 5 6 7 8 create or replace package body constants is function empty_string return varchar2 is begin return null ; end empty_string ; end constants ; /","title":"G-2330: Never use zero-length strings to substitute NULL."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2330/#g-2330-never-use-zero-length-strings-to-substitute-null","text":"Major Portability","title":"G-2330: Never use zero-length strings to substitute NULL."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2330/#reason","text":"Today zero-length strings and NULL are currently handled identical by ORACLE. There is no guarantee that this will still be the case in future releases, therefore if you mean NULL use NULL .","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2330/#example-bad","text":"1 2 3 4 5 6 7 8 9 create or replace package body constants is k_null_string constant varchar2 ( 1 ) : = '' ; function null_string return varchar2 is begin return k_null_string ; end null_string ; end constants ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2330/#example-good","text":"1 2 3 4 5 6 7 8 create or replace package body constants is function empty_string return varchar2 is begin return null ; end empty_string ; end constants ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2340/","text":"G-2340: Always define your VARCHAR2 variables using CHAR SEMANTIC (if not defined anchored). Minor Reliability Reason Changes to NLS_LENGTH_SEMANTICS will only be picked up by your code after a recompilation. In a multibyte environment a VARCHAR2(50) definition may not necessarily hold 50 characters, when multibyte characters a part of the value that should be stored unless the definition was done using the char semantic. Additionally, business users never say last names should be 50 bytes in length . Example (bad) 1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 ); end types ; / Example (good) 1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"G-2340: Always define your VARCHAR2 variables using CHAR SEMANTIC (if not defined anchored)."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2340/#g-2340-always-define-your-varchar2-variables-using-char-semantic-if-not-defined-anchored","text":"Minor Reliability","title":"G-2340: Always define your VARCHAR2 variables using CHAR SEMANTIC (if not defined anchored)."},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2340/#reason","text":"Changes to NLS_LENGTH_SEMANTICS will only be picked up by your code after a recompilation. In a multibyte environment a VARCHAR2(50) definition may not necessarily hold 50 characters, when multibyte characters a part of the value that should be stored unless the definition was done using the char semantic. Additionally, business users never say last names should be 50 bytes in length .","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2340/#example-bad","text":"1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 ); end types ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/3-character-data-types/g-2340/#example-good","text":"1 2 3 4 create or replace package types is subtype description_type is varchar2 ( 200 char ); end types ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/","text":"G-2410: Try to use boolean data type for values with dual meaning. Minor Maintainability Reason The use of TRUE and FALSE clarifies that this is a boolean value and makes the code easier to read. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger pls_integer ; begin if k_newfile < k_oldfile then l_bigger : = constants . k_numeric_true ; else l_bigger : = constants . k_numeric_false ; end if ; end ; / Example (better) 1 2 3 4 5 6 7 8 9 10 11 12 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger boolean ; begin if k_newfile < k_oldfile then l_bigger : = true ; else l_bigger : = false ; end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger boolean ; begin l_bigger : = nvl ( k_newfile < k_oldfile , false ); end ; /","title":"G-2410: Try to use boolean data type for values with dual meaning."},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/#g-2410-try-to-use-boolean-data-type-for-values-with-dual-meaning","text":"Minor Maintainability","title":"G-2410: Try to use boolean data type for values with dual meaning."},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/#reason","text":"The use of TRUE and FALSE clarifies that this is a boolean value and makes the code easier to read.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger pls_integer ; begin if k_newfile < k_oldfile then l_bigger : = constants . k_numeric_true ; else l_bigger : = constants . k_numeric_false ; end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/#example-better","text":"1 2 3 4 5 6 7 8 9 10 11 12 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger boolean ; begin if k_newfile < k_oldfile then l_bigger : = true ; else l_bigger : = false ; end if ; end ; /","title":"Example (better)"},{"location":"4-language-usage/2-variables-and-types/4-boolean-data-types/g-2410/#example-good","text":"1 2 3 4 5 6 7 8 declare k_newfile constant pls_integer : = 1000 ; k_oldfile constant pls_integer : = 500 ; l_bigger boolean ; begin l_bigger : = nvl ( k_newfile < k_oldfile , false ); end ; /","title":"Example (good)"},{"location":"4-language-usage/2-variables-and-types/5-large-objects/g-2510/","text":"G-2510: Avoid using the LONG and LONG RAW data types. Major Portability Reason LONG and LONG RAW data types have been deprecated by ORACLE since version 8i - support might be discontinued in future ORACLE releases. There are many constraints to LONG datatypes in comparison to the LOB types. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package example_package is g_long long ; g_raw long raw ; procedure do_something ; end example_package ; / create or replace package body example_package is procedure do_something is begin null ; end do_something ; end example_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package example_package is procedure do_something ; end example_package ; / create or replace package body example_package is g_long clob ; g_raw blob ; procedure do_something is begin null ; end do_something ; end example_package ; /","title":"G-2510: Avoid using the LONG and LONG RAW data types."},{"location":"4-language-usage/2-variables-and-types/5-large-objects/g-2510/#g-2510-avoid-using-the-long-and-long-raw-data-types","text":"Major Portability","title":"G-2510: Avoid using the LONG and LONG RAW data types."},{"location":"4-language-usage/2-variables-and-types/5-large-objects/g-2510/#reason","text":"LONG and LONG RAW data types have been deprecated by ORACLE since version 8i - support might be discontinued in future ORACLE releases. There are many constraints to LONG datatypes in comparison to the LOB types.","title":"Reason"},{"location":"4-language-usage/2-variables-and-types/5-large-objects/g-2510/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package example_package is g_long long ; g_raw long raw ; procedure do_something ; end example_package ; / create or replace package body example_package is procedure do_something is begin null ; end do_something ; end example_package ; /","title":"Example (bad)"},{"location":"4-language-usage/2-variables-and-types/5-large-objects/g-2510/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package example_package is procedure do_something ; end example_package ; / create or replace package body example_package is g_long clob ; g_raw blob ; procedure do_something is begin null ; end do_something ; end example_package ; /","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3110/","text":"G-3110: Always specify the target columns when coding an insert statement. Major Maintainability, Reliability Reason Data structures often change. Having the target columns in your insert statements will lead to change-resistant code. Example (bad) 1 2 3 4 5 insert into department values ( department_seq . nextval , 'Support' , 100 , 10 ); Example (good) 1 2 3 4 5 6 7 8 insert into department ( department_id , department_name , manager_id , location_id ) values ( null , 'Support' , 100 , 10 ); Note: The above good example assumes the use of an identity column for department_id.","title":"G-3110: Always specify the target columns when coding an insert statement."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3110/#g-3110-always-specify-the-target-columns-when-coding-an-insert-statement","text":"Major Maintainability, Reliability","title":"G-3110: Always specify the target columns when coding an insert statement."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3110/#reason","text":"Data structures often change. Having the target columns in your insert statements will lead to change-resistant code.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3110/#example-bad","text":"1 2 3 4 5 insert into department values ( department_seq . nextval , 'Support' , 100 , 10 );","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3110/#example-good","text":"1 2 3 4 5 6 7 8 insert into department ( department_id , department_name , manager_id , location_id ) values ( null , 'Support' , 100 , 10 ); Note: The above good example assumes the use of an identity column for department_id.","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/","text":"G-3120: Always use table aliases when your SQL statement involves more than one source. Major Maintainability Reason It is more human readable to use aliases instead of writing columns with no table information. Especially when using subqueries the omission of table aliases may end in unexpected behaviors and results. Also, note that even if you have a single table statement, it will almost always at some point in the future end up getting joined to another table, so you get bonus points if you use table aliases all the time. Example (bad) 1 2 3 4 5 6 select last_name , first_name , department_name from employee join department using ( department_id ) where extract ( month from hire_date ) = extract ( month from sysdate ); Example (better) 1 2 3 4 5 6 select e . last_name , e . first_name , d . department_name from employee e join department d using ( department_id ) where extract ( month from e . hire_date ) = extract ( month from sysdate ); Example (good) Using meaningful aliases improves the readability of your code. 1 2 3 4 5 6 select emp . last_name , emp . first_name , dept . department_name from employee emp join department dept using ( department_id ) where extract ( month from emp . hire_date ) = extract ( month from sysdate ); Example Subquery (bad) If the job table has no employee_id column and employee has one this query will not raise an error but return all rows of the employee table as a subquery is allowed to access columns of all its parent tables - this construct is known as correlated subquery. 1 2 3 4 5 6 select last_name , first_name from employee where employee_id in ( select employee_id from job where job_title like '%manager%' ); Example Subquery (good) If the job table has no employee_id column this query will return an error due to the directive (given by adding the table alias to the column) to read the employee_id column from the job table. 1 2 3 4 5 6 select emp . last_name , emp . first_name from employee emp where emp . employee_id in ( select j . employee_id from job j where j . job_title like '%manager%' );","title":"G-3120: Always use table aliases when your SQL statement involves more than one source."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#g-3120-always-use-table-aliases-when-your-sql-statement-involves-more-than-one-source","text":"Major Maintainability","title":"G-3120: Always use table aliases when your SQL statement involves more than one source."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#reason","text":"It is more human readable to use aliases instead of writing columns with no table information. Especially when using subqueries the omission of table aliases may end in unexpected behaviors and results. Also, note that even if you have a single table statement, it will almost always at some point in the future end up getting joined to another table, so you get bonus points if you use table aliases all the time.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#example-bad","text":"1 2 3 4 5 6 select last_name , first_name , department_name from employee join department using ( department_id ) where extract ( month from hire_date ) = extract ( month from sysdate );","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#example-better","text":"1 2 3 4 5 6 select e . last_name , e . first_name , d . department_name from employee e join department d using ( department_id ) where extract ( month from e . hire_date ) = extract ( month from sysdate );","title":"Example (better)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#example-good","text":"Using meaningful aliases improves the readability of your code. 1 2 3 4 5 6 select emp . last_name , emp . first_name , dept . department_name from employee emp join department dept using ( department_id ) where extract ( month from emp . hire_date ) = extract ( month from sysdate );","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#example-subquery-bad","text":"If the job table has no employee_id column and employee has one this query will not raise an error but return all rows of the employee table as a subquery is allowed to access columns of all its parent tables - this construct is known as correlated subquery. 1 2 3 4 5 6 select last_name , first_name from employee where employee_id in ( select employee_id from job where job_title like '%manager%' );","title":"Example Subquery (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3120/#example-subquery-good","text":"If the job table has no employee_id column this query will return an error due to the directive (given by adding the table alias to the column) to read the employee_id column from the job table. 1 2 3 4 5 6 select emp . last_name , emp . first_name from employee emp where emp . employee_id in ( select j . employee_id from job j where j . job_title like '%manager%' );","title":"Example Subquery (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3130/","text":"G-3130: Try to use ANSI SQL-92 join syntax. Minor Maintainability, Portability Reason ANSI SQL-92 join syntax supports the full outer join. A further advantage of the ANSI SQL-92 join syntax is the separation of the join condition from the query filters. Example (bad) 1 2 3 4 5 6 7 8 select e . employee_id , e . last_name , e . first_name , d . department_name from employees e , departments d where e . department_id = d . department_id and extract ( month from e . hire_date ) = extract ( month from sysdate ); Example (good) 1 2 3 4 5 6 7 select emp . employee_id , emp . last_name , emp . first_name , dept . department_name from employees emp join departments dept using ( department_id ) where extract ( month from emp . hire_date ) = extract ( month from sysdate );","title":"G-3130: Try to use ANSI SQL-92 join syntax."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3130/#g-3130-try-to-use-ansi-sql-92-join-syntax","text":"Minor Maintainability, Portability","title":"G-3130: Try to use ANSI SQL-92 join syntax."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3130/#reason","text":"ANSI SQL-92 join syntax supports the full outer join. A further advantage of the ANSI SQL-92 join syntax is the separation of the join condition from the query filters.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3130/#example-bad","text":"1 2 3 4 5 6 7 8 select e . employee_id , e . last_name , e . first_name , d . department_name from employees e , departments d where e . department_id = d . department_id and extract ( month from e . hire_date ) = extract ( month from sysdate );","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3130/#example-good","text":"1 2 3 4 5 6 7 select emp . employee_id , emp . last_name , emp . first_name , dept . department_name from employees emp join departments dept using ( department_id ) where extract ( month from emp . hire_date ) = extract ( month from sysdate );","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3140/","text":"G-3140: Try to use anchored records as targets for your cursors. Major Maintainability, Reliability Reason Using cursor-anchored records as targets for your cursors results enables the possibility of changing the structure of the cursor without regard to the target structure. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare cursor c_employee is select employee_id , first_name , last_name from employee ; l_employee_id employee . employee_id % type ; l_first_name employee . first_name % type ; l_last_name employee . last_name % type ; begin open c_employee ; fetch c_employee into l_employee_id , l_first_name , l_last_name ; << process_employee >> while c_employee % found loop -- do something with the data fetch c_employee into l_employee_id , l_first_name , l_last_name ; end loop process_employee ; close c_employee ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare cursor c_employee is select employee_id , first_name , last_name from employee ; r_employee c_employee % rowtype ; begin open c_employee ; fetch c_employee into r_employee ; << process_employee >> while c_employee % found loop -- do something with the data fetch c_employee into r_employee ; end loop process_employee ; close c_employee ; end ; /","title":"G-3140: Try to use anchored records as targets for your cursors."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3140/#g-3140-try-to-use-anchored-records-as-targets-for-your-cursors","text":"Major Maintainability, Reliability","title":"G-3140: Try to use anchored records as targets for your cursors."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3140/#reason","text":"Using cursor-anchored records as targets for your cursors results enables the possibility of changing the structure of the cursor without regard to the target structure.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3140/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 declare cursor c_employee is select employee_id , first_name , last_name from employee ; l_employee_id employee . employee_id % type ; l_first_name employee . first_name % type ; l_last_name employee . last_name % type ; begin open c_employee ; fetch c_employee into l_employee_id , l_first_name , l_last_name ; << process_employee >> while c_employee % found loop -- do something with the data fetch c_employee into l_employee_id , l_first_name , l_last_name ; end loop process_employee ; close c_employee ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3140/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare cursor c_employee is select employee_id , first_name , last_name from employee ; r_employee c_employee % rowtype ; begin open c_employee ; fetch c_employee into r_employee ; << process_employee >> while c_employee % found loop -- do something with the data fetch c_employee into r_employee ; end loop process_employee ; close c_employee ; end ; /","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/","text":"G-3150: Try to use identity columns for surrogate keys. Minor Maintainability, Reliability Restriction ORACLE 12c or higher Reason An identity column is a surrogate key by design \u2013 there is no reason why we should not take advantage of this natural implementation when the keys are generated on database level. Using identity column (and therefore assigning sequences as default values on columns) has a huge performance advantage over a trigger solution. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 create table location ( location_id number ( 10 ) not null , location_name varchar2 ( 60 char ) not null , city varchar2 ( 30 char ) not null , constraint location_pk primary key ( location_id ) ) / create sequence location_seq start with 1 cache 20 / create or replace trigger location_bri before insert on location for each row begin : new . location_id : = location_seq . nextval ; end ; / Example (good) 1 2 3 4 5 6 create table location ( location_id number ( 10 ) generated by default on null as identity , location_name varchar2 ( 60 char ) not null , city varchar2 ( 30 char ) not null , constraint location_pk primary key ( location_id )) /","title":"G-3150: Try to use identity columns for surrogate keys."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/#g-3150-try-to-use-identity-columns-for-surrogate-keys","text":"Minor Maintainability, Reliability","title":"G-3150: Try to use identity columns for surrogate keys."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/#restriction","text":"ORACLE 12c or higher","title":"Restriction"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/#reason","text":"An identity column is a surrogate key by design \u2013 there is no reason why we should not take advantage of this natural implementation when the keys are generated on database level. Using identity column (and therefore assigning sequences as default values on columns) has a huge performance advantage over a trigger solution.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 create table location ( location_id number ( 10 ) not null , location_name varchar2 ( 60 char ) not null , city varchar2 ( 30 char ) not null , constraint location_pk primary key ( location_id ) ) / create sequence location_seq start with 1 cache 20 / create or replace trigger location_bri before insert on location for each row begin : new . location_id : = location_seq . nextval ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3150/#example-good","text":"1 2 3 4 5 6 create table location ( location_id number ( 10 ) generated by default on null as identity , location_name varchar2 ( 60 char ) not null , city varchar2 ( 30 char ) not null , constraint location_pk primary key ( location_id )) /","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/","text":"G-3160: Avoid visible virtual columns. Major Maintainability, Reliability Restriction ORACLE 12c Reason In contrast to visible columns, invisible columns are not part of a record defined using %rowtype construct. This is helpful as a virtual column may not be programmatically populated. If your virtual column is visible you have to manually define the record types used in API packages to be able to exclude them from being part of the record definition. Invisible columns may be accessed by explicitly adding them to the column list in a SELECT statement. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 alter table employee add total_salary generated always as ( salary + nvl ( commission_pct , 0 ) * salary ) / declare r_employee employee % rowtype ; l_id employee . employee_id % type : = 107 ; begin r_employee : = employee_api . employee_by_id ( l_id ); r_employee . salary : = r_employee . salary * constants . small_increase (); update employee set row = r_employee where employee_id = l_id ; end ; / Error report - ORA - 54017 : UPDATE operation disallowed ON virtual COLUMNS ORA - 06512 : at line 9 Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 alter table employee add total_salary invisible generated always as ( salary + nvl ( commission_pct , 0 ) * salary ) / declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin r_employee : = employee_api . employee_by_id ( k_id ); r_employee . salary : = r_employee . salary * constants . small_increase (); update employee set row = r_employee where employee_id = k_id ; end ; /","title":"G-3160: Avoid visible virtual columns."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/#g-3160-avoid-visible-virtual-columns","text":"Major Maintainability, Reliability","title":"G-3160: Avoid visible virtual columns."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/#restriction","text":"ORACLE 12c","title":"Restriction"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/#reason","text":"In contrast to visible columns, invisible columns are not part of a record defined using %rowtype construct. This is helpful as a virtual column may not be programmatically populated. If your virtual column is visible you have to manually define the record types used in API packages to be able to exclude them from being part of the record definition. Invisible columns may be accessed by explicitly adding them to the column list in a SELECT statement.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 alter table employee add total_salary generated always as ( salary + nvl ( commission_pct , 0 ) * salary ) / declare r_employee employee % rowtype ; l_id employee . employee_id % type : = 107 ; begin r_employee : = employee_api . employee_by_id ( l_id ); r_employee . salary : = r_employee . salary * constants . small_increase (); update employee set row = r_employee where employee_id = l_id ; end ; / Error report - ORA - 54017 : UPDATE operation disallowed ON virtual COLUMNS ORA - 06512 : at line 9","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3160/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 alter table employee add total_salary invisible generated always as ( salary + nvl ( commission_pct , 0 ) * salary ) / declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin r_employee : = employee_api . employee_by_id ( k_id ); r_employee . salary : = r_employee . salary * constants . small_increase (); update employee set row = r_employee where employee_id = k_id ; end ; /","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/","text":"G-3170: Always use DEFAULT ON NULL declarations to assign default values to table columns if you refuse to store NULL values. Major Reliability Restriction ORACLE 12c Reason Default values have been nullifiable until ORACLE 12c. Meaning any tool sending null as a value for a column having a default value bypassed the default value. Starting with ORACLE 12c default definitions may have an ON NULL definition in addition, which will assign the default value in case of a null value too. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create table null_test ( test_case number ( 2 ) not null , column_defaulted varchar2 ( 10 ) default 'Default' ) / insert into null_test ( test_case , column_defaulted ) values ( 1 , 'value' ); insert into null_test ( test_case , column_defaulted ) values ( 2 , default ); insert into null_test ( test_case , column_defaulted ) values ( 3 , null ); select * from null_test ; TEST_CASE COLUMN_DEF --------- ----------- 1 Value 2 Default 3 Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create table null_test ( test_case number ( 2 ) not null , column_defaulted varchar2 ( 10 char ) default on null 'Default' ) / insert into null_test ( test_case , column_defaulted ) values ( 1 , 'value' ); insert into null_test ( test_case , column_defaulted ) values ( 2 , default ); insert into null_test ( test_case , column_defaulted ) values ( 3 , null ); SELECT * FROM null_test ; TEST_CASE COLUMN_DEF ---------- ---------- 1 Value 2 Default 3 Default","title":"G-3170: Always use DEFAULT ON NULL declarations to assign default values to table columns if you refuse to store NULL values."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/#g-3170-always-use-default-on-null-declarations-to-assign-default-values-to-table-columns-if-you-refuse-to-store-null-values","text":"Major Reliability","title":"G-3170: Always use DEFAULT ON NULL declarations to assign default values to table columns if you refuse to store NULL values."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/#restriction","text":"ORACLE 12c","title":"Restriction"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/#reason","text":"Default values have been nullifiable until ORACLE 12c. Meaning any tool sending null as a value for a column having a default value bypassed the default value. Starting with ORACLE 12c default definitions may have an ON NULL definition in addition, which will assign the default value in case of a null value too.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create table null_test ( test_case number ( 2 ) not null , column_defaulted varchar2 ( 10 ) default 'Default' ) / insert into null_test ( test_case , column_defaulted ) values ( 1 , 'value' ); insert into null_test ( test_case , column_defaulted ) values ( 2 , default ); insert into null_test ( test_case , column_defaulted ) values ( 3 , null ); select * from null_test ; TEST_CASE COLUMN_DEF --------- ----------- 1 Value 2 Default 3","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3170/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create table null_test ( test_case number ( 2 ) not null , column_defaulted varchar2 ( 10 char ) default on null 'Default' ) / insert into null_test ( test_case , column_defaulted ) values ( 1 , 'value' ); insert into null_test ( test_case , column_defaulted ) values ( 2 , default ); insert into null_test ( test_case , column_defaulted ) values ( 3 , null ); SELECT * FROM null_test ; TEST_CASE COLUMN_DEF ---------- ---------- 1 Value 2 Default 3 Default","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3180/","text":"G-3180: Always specify column names instead of positional references in ORDER BY clauses. Major Changeability, Reliability Reason If you change your select list afterwards the ORDER BY will still work but order your rows differently, when not changing the positional number. Furthermore, it is not comfortable to the readers of the code, if they have to count the columns in the SELECT list to know the way the result is ordered. Example (bad) 1 2 3 4 5 6 select upper ( first_name ) , last_name , salary , hire_date from employee order by 4 , 1 , 3 ; Example (good) 1 2 3 4 5 6 7 8 select upper ( first_name ) as first_name , last_name , salary , hire_date from employee order by hire_date , first_name , salary ;","title":"G-3180: Always specify column names instead of positional references in ORDER BY clauses."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3180/#g-3180-always-specify-column-names-instead-of-positional-references-in-order-by-clauses","text":"Major Changeability, Reliability","title":"G-3180: Always specify column names instead of positional references in ORDER BY clauses."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3180/#reason","text":"If you change your select list afterwards the ORDER BY will still work but order your rows differently, when not changing the positional number. Furthermore, it is not comfortable to the readers of the code, if they have to count the columns in the SELECT list to know the way the result is ordered.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3180/#example-bad","text":"1 2 3 4 5 6 select upper ( first_name ) , last_name , salary , hire_date from employee order by 4 , 1 , 3 ;","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3180/#example-good","text":"1 2 3 4 5 6 7 8 select upper ( first_name ) as first_name , last_name , salary , hire_date from employee order by hire_date , first_name , salary ;","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3190/","text":"G-3190: Avoid using NATURAL JOIN. Major Changeability, Reliability Reason A natural join joins tables on equally named columns. This may comfortably fit on first sight, but adding logging columns to a table (updated_by, updated) will result in inappropriate join conditions. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select department_name , last_name , first_name from employee natural join department order by department_name , last_name ; DEPARTMENT_NAME LAST_NAME FIRST_NAME ------------------------------ ------------------------- -------------------- Accounting Gietz William Executive De Haan Lex \u2026 alter table department add updated date default on null sysdate ; alter table employee add updated date default on null sysdate ; select department_name , last_name , first_name from employee natural join department order by department_name , last_name ; No data found Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 select dept . department_name , emp . last_name , emp . first_name from employee emp join department dept using ( department_id ) order by dept . department_name , emp . last_name ; DEPARTMENT_NAME LAST_NAME FIRST_NAME ------------------------------ ------------------------- -------------------- Accounting Gietz William Executive De Haan Lex \u2026","title":"G-3190: Avoid using NATURAL JOIN."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3190/#g-3190-avoid-using-natural-join","text":"Major Changeability, Reliability","title":"G-3190: Avoid using NATURAL JOIN."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3190/#reason","text":"A natural join joins tables on equally named columns. This may comfortably fit on first sight, but adding logging columns to a table (updated_by, updated) will result in inappropriate join conditions.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3190/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select department_name , last_name , first_name from employee natural join department order by department_name , last_name ; DEPARTMENT_NAME LAST_NAME FIRST_NAME ------------------------------ ------------------------- -------------------- Accounting Gietz William Executive De Haan Lex \u2026 alter table department add updated date default on null sysdate ; alter table employee add updated date default on null sysdate ; select department_name , last_name , first_name from employee natural join department order by department_name , last_name ; No data found","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3190/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 select dept . department_name , emp . last_name , emp . first_name from employee emp join department dept using ( department_id ) order by dept . department_name , emp . last_name ; DEPARTMENT_NAME LAST_NAME FIRST_NAME ------------------------------ ------------------------- -------------------- Accounting Gietz William Executive De Haan Lex \u2026","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3200/","text":"G-3200: Avoid using an ON clause when a USING clause will work. Minor Maintainability Reason An on clause requires more code than a using clause and presents a greater possibility for making errors. The using clause is easier to read and maintain. Note that the using clause prevents the use of a table alias for the join column in any of the other clauses of the sql statement. Example (bad) 1 2 3 4 5 select e . deparment_id , d . department_name , e . last_name , e . first_name from employee e join department d on ( e . department_id = d . department_id ); Example (good) 1 2 3 4 5 select department_id dept . department_name , emp . last_name , emp . first_name from employee emp join department dept using ( department_id );","title":"G-3200: Avoid using an ON clause when a USING clause will work."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3200/#g-3200-avoid-using-an-on-clause-when-a-using-clause-will-work","text":"Minor Maintainability","title":"G-3200: Avoid using an ON clause when a USING clause will work."},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3200/#reason","text":"An on clause requires more code than a using clause and presents a greater possibility for making errors. The using clause is easier to read and maintain. Note that the using clause prevents the use of a table alias for the join column in any of the other clauses of the sql statement.","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3200/#example-bad","text":"1 2 3 4 5 select e . deparment_id , d . department_name , e . last_name , e . first_name from employee e join department d on ( e . department_id = d . department_id );","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/1-general/g-3200/#example-good","text":"1 2 3 4 5 select department_id dept . department_name , emp . last_name , emp . first_name from employee emp join department dept using ( department_id );","title":"Example (good)"},{"location":"4-language-usage/3-dml-and-sql/2-bulk-operations/g-3210/","text":"G-3210: Always use BULK OPERATIONS (BULK COLLECT, FORALL) whenever you have to execute a DML statement for more than 4 times. Major Efficiency Reason Context switches between PL/SQL and SQL are extremely costly. BULK Operations reduce the number of switches by passing an array to the SQL engine, which is used to execute the given statements repeatedly. (Depending on the PLSQL_OPTIMIZE_LEVEL parameter a conversion to BULK COLLECT will be done by the PL/SQL compiler automatically.) Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare t_employee_ids employee_api . t_employee_ids_type ; k_increase constant employee . salary % type : = 0 . 1 ; k_department_id constant departments . department_id % type : = 10 ; begin t_employee_ids : = employee_api . employee_ids_by_department ( id_in => k_department_id ); << process_employees >> for i in 1 .. t_employee_ids . count () loop update employee set salary = salary + ( salary * k_increase ) where employee_id = t_employee_ids ( i ); end loop process_employees ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare t_employee_ids employee_api . t_employee_ids_type ; k_increase constant employee . salary % type : = 0 . 1 ; k_department_id constant departments . department_id % type : = 10 ; begin t_employee_ids : = employee_api . employee_ids_by_department ( id_in => k_department_id ); << process_employees >> forall i in 1 .. t_employee_ids . count () update employee set salary = salary + ( salary * k_increase ) where employee_id = t_employee_ids ( i ); end ; /","title":"G-3210: Always use BULK OPERATIONS (BULK COLLECT, FORALL) whenever you have to execute a DML statement for more than 4 times."},{"location":"4-language-usage/3-dml-and-sql/2-bulk-operations/g-3210/#g-3210-always-use-bulk-operations-bulk-collect-forall-whenever-you-have-to-execute-a-dml-statement-for-more-than-4-times","text":"Major Efficiency","title":"G-3210: Always use BULK OPERATIONS (BULK COLLECT, FORALL) whenever you have to execute a DML statement for more than 4 times."},{"location":"4-language-usage/3-dml-and-sql/2-bulk-operations/g-3210/#reason","text":"Context switches between PL/SQL and SQL are extremely costly. BULK Operations reduce the number of switches by passing an array to the SQL engine, which is used to execute the given statements repeatedly. (Depending on the PLSQL_OPTIMIZE_LEVEL parameter a conversion to BULK COLLECT will be done by the PL/SQL compiler automatically.)","title":"Reason"},{"location":"4-language-usage/3-dml-and-sql/2-bulk-operations/g-3210/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 declare t_employee_ids employee_api . t_employee_ids_type ; k_increase constant employee . salary % type : = 0 . 1 ; k_department_id constant departments . department_id % type : = 10 ; begin t_employee_ids : = employee_api . employee_ids_by_department ( id_in => k_department_id ); << process_employees >> for i in 1 .. t_employee_ids . count () loop update employee set salary = salary + ( salary * k_increase ) where employee_id = t_employee_ids ( i ); end loop process_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/3-dml-and-sql/2-bulk-operations/g-3210/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare t_employee_ids employee_api . t_employee_ids_type ; k_increase constant employee . salary % type : = 0 . 1 ; k_department_id constant departments . department_id % type : = 10 ; begin t_employee_ids : = employee_api . employee_ids_by_department ( id_in => k_department_id ); << process_employees >> forall i in 1 .. t_employee_ids . count () update employee set salary = salary + ( salary * k_increase ) where employee_id = t_employee_ids ( i ); end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4110/","text":"G-4110: Always use %NOTFOUND instead of NOT %FOUND to check whether a cursor returned data. Minor Maintainability Reason The readability of your code will be higher when you avoid negative sentences. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare cursor employee_cur is select last_name , first_name from employee where commission_pct is not null ; r_employee employee_cur % rowtype ; begin open employee_cur ; << read_employees >> loop fetch employee_cur into r_employee ; exit read_employees when not employee_cur % found ; end loop read_employees ; close employee_cur ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare cursor employee_cur is select last_name , first_name from employee where commission_pct is not null ; r_employee employee_cur % rowtype ; begin open employee_cur ; << read_employees >> loop fetch employee_cur into r_employee ; exit read_employees when employee_cur % notfound ; end loop read_employees ; close employee_cur ; end ; /","title":"G-4110: Always use %NOTFOUND instead of NOT %FOUND to check whether a cursor returned data."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4110/#g-4110-always-use-notfound-instead-of-not-found-to-check-whether-a-cursor-returned-data","text":"Minor Maintainability","title":"G-4110: Always use %NOTFOUND instead of NOT %FOUND to check whether a cursor returned data."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4110/#reason","text":"The readability of your code will be higher when you avoid negative sentences.","title":"Reason"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4110/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare cursor employee_cur is select last_name , first_name from employee where commission_pct is not null ; r_employee employee_cur % rowtype ; begin open employee_cur ; << read_employees >> loop fetch employee_cur into r_employee ; exit read_employees when not employee_cur % found ; end loop read_employees ; close employee_cur ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4110/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare cursor employee_cur is select last_name , first_name from employee where commission_pct is not null ; r_employee employee_cur % rowtype ; begin open employee_cur ; << read_employees >> loop fetch employee_cur into r_employee ; exit read_employees when employee_cur % notfound ; end loop read_employees ; close employee_cur ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/","text":"G-4120: Avoid using %NOTFOUND directly after the FETCH when working with BULK OPERATIONS and LIMIT clause. Critical Reliability Reason %notfound is set to true as soon as less than the number of rows defined by the limit clause has been read. Example (bad) The employee table holds 107 rows. The example below will only show 100 rows as the cursor attribute notfound is set to true as soon as the number of rows to be fetched defined by the limit clause is not fulfilled anymore. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; exit process_employees when employee_cur % notfound ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; end loop process_employees ; close employee_cur ; end ; / Example (better) This example will show all 107 rows but execute one fetch too much (12 instead of 11). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; exit process_employees when t_employee . count () = 0 ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; end loop process_employees ; close employee_cur ; end ; / Example (good) This example does the trick (11 fetches only to process all rows) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; exit process_employees when t_employee . count () <> k_bulk_size ; end loop process_employees ; close employee_cur ; end ; /","title":"G-4120: Avoid using %NOTFOUND directly after the FETCH when working with BULK OPERATIONS and LIMIT clause."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/#g-4120-avoid-using-notfound-directly-after-the-fetch-when-working-with-bulk-operations-and-limit-clause","text":"Critical Reliability","title":"G-4120: Avoid using %NOTFOUND directly after the FETCH when working with BULK OPERATIONS and LIMIT clause."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/#reason","text":"%notfound is set to true as soon as less than the number of rows defined by the limit clause has been read.","title":"Reason"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/#example-bad","text":"The employee table holds 107 rows. The example below will only show 100 rows as the cursor attribute notfound is set to true as soon as the number of rows to be fetched defined by the limit clause is not fulfilled anymore. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; exit process_employees when employee_cur % notfound ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; end loop process_employees ; close employee_cur ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/#example-better","text":"This example will show all 107 rows but execute one fetch too much (12 instead of 11). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; exit process_employees when t_employee . count () = 0 ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; end loop process_employees ; close employee_cur ; end ; /","title":"Example (better)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4120/#example-good","text":"This example does the trick (11 fetches only to process all rows) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare cursor employee_cur is select * from employee order by employee_id ; type t_employee_type is table of employee_cur % rowtype ; t_employee t_employee_type ; k_bulk_size constant simple_integer : = 10 ; begin open employee_cur ; << process_employees >> loop fetch employee_cur bulk collect into t_employee limit k_bulk_size ; << display_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i ). last_name ); end loop display_employees ; exit process_employees when t_employee . count () <> k_bulk_size ; end loop process_employees ; close employee_cur ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4130/","text":"G-4130: Always close locally opened cursors. Major Efficiency, Reliability Reason Any cursors left open can consume additional memory space (i.e. SGA) within the database instance, potentially in both the shared and private SQL pools. Furthermore, failure to explicitly close cursors may also cause the owning session to exceed its maximum limit of open cursors (as specified by the OPEN_CURSORS database initialization parameter), potentially resulting in the Oracle error of \u201cORA-01000: maximum open cursors exceeded\u201d. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api as function department_salary ( in_dept_id in department . department_id % type ) return number is cursor department_salary_cur ( p_dept_id in department . department_id % type ) is select sum ( salary ) as sum_salary from employee where department_id = p_dept_id ; r_department_salary department_salary_cur % rowtype ; begin open department_salary_cur ( p_dept_id => in_dept_id ); fetch department_salary_cur into r_department_salary ; return r_department_salary . sum_salary ; end department_salary ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api as function department_salary ( in_dept_id in department . department_id % type ) return number is cursor department_salary_cur ( p_dept_id in department . department_id % type ) is select sum ( salary ) as sum_salary from employee where department_id = p_dept_id ; r_department_salary department_salary_cur % rowtype ; begin open department_salary_cur ( p_dept_id => in_dept_id ); fetch department_salary_cur into r_department_salary ; close department_salary_cur ; return r_department_salary . sum_salary ; end department_salary ; end employee_api ; /","title":"G-4130: Always close locally opened cursors."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4130/#g-4130-always-close-locally-opened-cursors","text":"Major Efficiency, Reliability","title":"G-4130: Always close locally opened cursors."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4130/#reason","text":"Any cursors left open can consume additional memory space (i.e. SGA) within the database instance, potentially in both the shared and private SQL pools. Furthermore, failure to explicitly close cursors may also cause the owning session to exceed its maximum limit of open cursors (as specified by the OPEN_CURSORS database initialization parameter), potentially resulting in the Oracle error of \u201cORA-01000: maximum open cursors exceeded\u201d.","title":"Reason"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4130/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api as function department_salary ( in_dept_id in department . department_id % type ) return number is cursor department_salary_cur ( p_dept_id in department . department_id % type ) is select sum ( salary ) as sum_salary from employee where department_id = p_dept_id ; r_department_salary department_salary_cur % rowtype ; begin open department_salary_cur ( p_dept_id => in_dept_id ); fetch department_salary_cur into r_department_salary ; return r_department_salary . sum_salary ; end department_salary ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4130/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api as function department_salary ( in_dept_id in department . department_id % type ) return number is cursor department_salary_cur ( p_dept_id in department . department_id % type ) is select sum ( salary ) as sum_salary from employee where department_id = p_dept_id ; r_department_salary department_salary_cur % rowtype ; begin open department_salary_cur ( p_dept_id => in_dept_id ); fetch department_salary_cur into r_department_salary ; close department_salary_cur ; return r_department_salary . sum_salary ; end department_salary ; end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4140/","text":"G-4140: Avoid executing any statements between a SQL operation and the usage of an implicit cursor attribute. Major Reliability Reason Oracle provides a variety of cursor attributes (like %found and %rowcount ) that can be used to obtain information about the status of a cursor, either implicit or explicit. You should avoid inserting any statements between the cursor operation and the use of an attribute against that cursor. Interposing such a statement can affect the value returned by the attribute, thereby potentially corrupting the logic of your program. In the following example, a procedure call is inserted between the DELETE statement and a check for the value of sql%rowcount , which returns the number of rows modified by that last SQL statement executed in the session. If this procedure includes a commit / rollback or another implicit cursor the value of sql%rowcount is affected. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 create or replace package body employee_api as k_one constant simple_integer : = 1 ; procedure process_dept ( in_dept_id in departments . department_id % type ) is begin null ; end process_dept ; procedure remove_employee ( in_employee_id in employee . employee_id % type ) is l_dept_id employee . department_id % type ; begin delete from employee where employee_id = in_employee_id returning department_id into l_dept_id ; process_dept ( in_dept_id => l_dept_id ); if sql % rowcount > k_one then -- too many rows deleted. rollback ; end if ; end remove_employee ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 create or replace package body employee_api as k_one constant simple_integer : = 1 ; procedure process_dept ( in_dept_id in departments . department_id % type ) is begin null ; end process_dept ; procedure remove_employee ( in_employee_id in employee . employee_id % type ) is l_dept_id employee . department_id % type ; l_deleted_emps simple_integer ; begin delete from employee where employee_id = in_employee_id returning department_id into l_dept_id ; l_deleted_emps : = sql % rowcount ; process_dept ( in_dept_id => l_dept_id ); if l_deleted_emps > k_one then -- too many rows deleted. rollback ; end if ; end remove_employee ; end employee_api ; /","title":"G-4140: Avoid executing any statements between a SQL operation and the usage of an implicit cursor attribute."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4140/#g-4140-avoid-executing-any-statements-between-a-sql-operation-and-the-usage-of-an-implicit-cursor-attribute","text":"Major Reliability","title":"G-4140: Avoid executing any statements between a SQL operation and the usage of an implicit cursor attribute."},{"location":"4-language-usage/4-control-structures/1-cursor/g-4140/#reason","text":"Oracle provides a variety of cursor attributes (like %found and %rowcount ) that can be used to obtain information about the status of a cursor, either implicit or explicit. You should avoid inserting any statements between the cursor operation and the use of an attribute against that cursor. Interposing such a statement can affect the value returned by the attribute, thereby potentially corrupting the logic of your program. In the following example, a procedure call is inserted between the DELETE statement and a check for the value of sql%rowcount , which returns the number of rows modified by that last SQL statement executed in the session. If this procedure includes a commit / rollback or another implicit cursor the value of sql%rowcount is affected.","title":"Reason"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4140/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 create or replace package body employee_api as k_one constant simple_integer : = 1 ; procedure process_dept ( in_dept_id in departments . department_id % type ) is begin null ; end process_dept ; procedure remove_employee ( in_employee_id in employee . employee_id % type ) is l_dept_id employee . department_id % type ; begin delete from employee where employee_id = in_employee_id returning department_id into l_dept_id ; process_dept ( in_dept_id => l_dept_id ); if sql % rowcount > k_one then -- too many rows deleted. rollback ; end if ; end remove_employee ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/1-cursor/g-4140/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 create or replace package body employee_api as k_one constant simple_integer : = 1 ; procedure process_dept ( in_dept_id in departments . department_id % type ) is begin null ; end process_dept ; procedure remove_employee ( in_employee_id in employee . employee_id % type ) is l_dept_id employee . department_id % type ; l_deleted_emps simple_integer ; begin delete from employee where employee_id = in_employee_id returning department_id into l_dept_id ; l_deleted_emps : = sql % rowcount ; process_dept ( in_dept_id => l_dept_id ); if l_deleted_emps > k_one then -- too many rows deleted. rollback ; end if ; end remove_employee ; end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4210/","text":"G-4210: Try to use CASE rather than an IF statement with multiple ELSIF paths. Major Maintainability, Testability Reason Often if statements containing multiple elsif tend to become complex quickly. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 declare l_color varchar2 ( 7 char ); begin if l_color = constants . k_red then my_package . do_red (); elsif l_color = constants . k_blue then my_package . do_blue (); elsif l_color = constants . k_black then my_package . do_black (); end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare l_color types . color_code_type ; begin case l_color when constants . k_red then my_package . do_red (); when constants . k_blue then my_package . do_blue (); when constants . k_black then my_package . do_black (); else null ; end case ; end ; /","title":"G-4210: Try to use CASE rather than an IF statement with multiple ELSIF paths."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4210/#g-4210-try-to-use-case-rather-than-an-if-statement-with-multiple-elsif-paths","text":"Major Maintainability, Testability","title":"G-4210: Try to use CASE rather than an IF statement with multiple ELSIF paths."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4210/#reason","text":"Often if statements containing multiple elsif tend to become complex quickly.","title":"Reason"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4210/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 declare l_color varchar2 ( 7 char ); begin if l_color = constants . k_red then my_package . do_red (); elsif l_color = constants . k_blue then my_package . do_blue (); elsif l_color = constants . k_black then my_package . do_black (); end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4210/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare l_color types . color_code_type ; begin case l_color when constants . k_red then my_package . do_red (); when constants . k_blue then my_package . do_blue (); when constants . k_black then my_package . do_black (); else null ; end case ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4220/","text":"G-4220: Try to use CASE rather than DECODE. Minor Maintainability, Portability Reason DECODE is an ORACLE specific function that can be hard to understand (particularly when not formatted well) and is restricted to SQL only. The CASE function is much more common has a better readability and may be used within PL/SQL too. Example (bad) 1 2 3 4 5 select decode ( dummy , 'x' , 1 , 'y' , 2 , 'z' , 3 , 0 ) from dual ; Example (good) 1 2 3 4 5 6 7 select case dummy when 'x' then 1 when 'y' then 2 when 'z' then 3 else 0 end from dual ;","title":"G-4220: Try to use CASE rather than DECODE."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4220/#g-4220-try-to-use-case-rather-than-decode","text":"Minor Maintainability, Portability","title":"G-4220: Try to use CASE rather than DECODE."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4220/#reason","text":"DECODE is an ORACLE specific function that can be hard to understand (particularly when not formatted well) and is restricted to SQL only. The CASE function is much more common has a better readability and may be used within PL/SQL too.","title":"Reason"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4220/#example-bad","text":"1 2 3 4 5 select decode ( dummy , 'x' , 1 , 'y' , 2 , 'z' , 3 , 0 ) from dual ;","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4220/#example-good","text":"1 2 3 4 5 6 7 select case dummy when 'x' then 1 when 'y' then 2 when 'z' then 3 else 0 end from dual ;","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4230/","text":"G-4230: Always use a COALESCE instead of a NVL command, if parameter 2 of the NVL function is a function call or a SELECT statement. Critical Efficiency, Reliability Reason The nvl function always evaluates both parameters before deciding which one to use. This can be harmful if parameter 2 is either a function call or a select statement, as it will be executed regardless of whether parameter 1 contains a NULL value or not. The coalesce function does not have this drawback. Example (bad) 1 2 select nvl ( dummy , my_package . expensive_null ( value_in => dummy )) from dual ; Example (good) 1 2 select coalesce ( dummy , my_package . expensive_null ( value_in => dummy )) from dual ;","title":"G-4230: Always use a COALESCE instead of a NVL command, if parameter 2 of the NVL function is a function call or a SELECT statement."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4230/#g-4230-always-use-a-coalesce-instead-of-a-nvl-command-if-parameter-2-of-the-nvl-function-is-a-function-call-or-a-select-statement","text":"Critical Efficiency, Reliability","title":"G-4230: Always use a COALESCE instead of a NVL command, if parameter 2 of the NVL function is a function call or a SELECT statement."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4230/#reason","text":"The nvl function always evaluates both parameters before deciding which one to use. This can be harmful if parameter 2 is either a function call or a select statement, as it will be executed regardless of whether parameter 1 contains a NULL value or not. The coalesce function does not have this drawback.","title":"Reason"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4230/#example-bad","text":"1 2 select nvl ( dummy , my_package . expensive_null ( value_in => dummy )) from dual ;","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4230/#example-good","text":"1 2 select coalesce ( dummy , my_package . expensive_null ( value_in => dummy )) from dual ;","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4240/","text":"G-4240: Always use a CASE instead of a NVL2 command if parameter 2 or 3 of NVL2 is either a function call or a SELECT statement. Critical Efficiency, Reliability Reason The nvl2 function always evaluates all parameters before deciding which one to use. This can be harmful, if parameter 2 or 3 is either a function call or a select statement, as they will be executed regardless of whether parameter 1 contains a null value or not. Example (bad) 1 2 3 select nvl2 ( dummy , my_package . expensive_nn ( value_in => dummy ), my_package . expensive_null ( value_in => dummy )) from dual ; Example (good) 1 2 3 4 5 6 7 select case when dummy is null then my_package . expensive_null ( value_in => dummy ) else my_package . expensive_nn ( value_in => dummy ) end from dual ;","title":"G-4240: Always use a CASE instead of a NVL2 command if parameter 2 or 3 of NVL2 is either a function call or a SELECT statement."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4240/#g-4240-always-use-a-case-instead-of-a-nvl2-command-if-parameter-2-or-3-of-nvl2-is-either-a-function-call-or-a-select-statement","text":"Critical Efficiency, Reliability","title":"G-4240: Always use a CASE instead of a NVL2 command if parameter 2 or 3 of NVL2 is either a function call or a SELECT statement."},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4240/#reason","text":"The nvl2 function always evaluates all parameters before deciding which one to use. This can be harmful, if parameter 2 or 3 is either a function call or a select statement, as they will be executed regardless of whether parameter 1 contains a null value or not.","title":"Reason"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4240/#example-bad","text":"1 2 3 select nvl2 ( dummy , my_package . expensive_nn ( value_in => dummy ), my_package . expensive_null ( value_in => dummy )) from dual ;","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/2-case-if-decode-nvl-nvl2-coalesce/g-4240/#example-good","text":"1 2 3 4 5 6 7 select case when dummy is null then my_package . expensive_null ( value_in => dummy ) else my_package . expensive_nn ( value_in => dummy ) end from dual ;","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/","text":"G-4310: Never use GOTO statements in your code. Major Maintainability, Testability Reason Code containing gotos is hard to format. Indentation should be used to show logical structure and gotos have an effect on logical structure. Trying to use indentation to show the logical structure of a goto, however, is difficult or impossible. Use of gotos is a matter of religion. In modern languages, you can easily replace nine out of ten gotos with equivalent structured constructs. In these simple cases, you should replace gotos out of habit. In the hard cases, you can break the code into smaller routines; use nested ifs; test and retest a status variable; or restructure a conditional. Eliminating the goto is harder in these cases, but it's good exercise. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitarray constant string ( 10 char ) : = '0123456789' ; k_lower_bound constant simple_integer : = 1 ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; l_isdigit boolean : = false ; l_password_length pls_integer ; l_array_length pls_integer ; begin l_password_length : = length ( in_password ); l_array_length : = length ( k_digitarray ); << check_digit >> for i in k_lower_bound .. l_array_length loop << check_pw_char >> for j in k_lower_bound .. l_password_length loop if substr ( in_password , j , 1 ) = substr ( k_digitarray , i , 1 ) then l_isdigit : = true ; goto check_other_things ; end if ; end loop check_pw_char ; end loop check_digit ; << check_other_things >> null ; if not l_isdigit then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; / Example (better) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitarray constant string ( 10 char ) : = '0123456789' ; k_lower_bound constant simple_integer : = 1 ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; l_isdigit boolean : = false ; l_password_length pls_integer ; l_array_length pls_integer ; begin l_password_length : = length ( in_password ); l_array_length : = length ( k_digitarray ); << check_digit >> for i in k_lower_bound .. l_array_length loop << check_pw_char >> for j in k_lower_bound .. l_password_length loop if substr ( in_password , j , 1 ) = substr ( k_digitarray , i , 1 ) then l_isdigit : = true ; exit check_digit ; -- early exit condition end if ; end loop check_pw_char ; end loop check_digit ; << check_other_things >> null ; if not l_isdigit then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitpattern constant string ( 2 char ) : = '\\d' ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; begin if not regexp_like ( in_password , k_digitpattern ) then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; /","title":"G-4310: Never use GOTO statements in your code."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/#g-4310-never-use-goto-statements-in-your-code","text":"Major Maintainability, Testability","title":"G-4310: Never use GOTO statements in your code."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/#reason","text":"Code containing gotos is hard to format. Indentation should be used to show logical structure and gotos have an effect on logical structure. Trying to use indentation to show the logical structure of a goto, however, is difficult or impossible. Use of gotos is a matter of religion. In modern languages, you can easily replace nine out of ten gotos with equivalent structured constructs. In these simple cases, you should replace gotos out of habit. In the hard cases, you can break the code into smaller routines; use nested ifs; test and retest a status variable; or restructure a conditional. Eliminating the goto is harder in these cases, but it's good exercise.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitarray constant string ( 10 char ) : = '0123456789' ; k_lower_bound constant simple_integer : = 1 ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; l_isdigit boolean : = false ; l_password_length pls_integer ; l_array_length pls_integer ; begin l_password_length : = length ( in_password ); l_array_length : = length ( k_digitarray ); << check_digit >> for i in k_lower_bound .. l_array_length loop << check_pw_char >> for j in k_lower_bound .. l_password_length loop if substr ( in_password , j , 1 ) = substr ( k_digitarray , i , 1 ) then l_isdigit : = true ; goto check_other_things ; end if ; end loop check_pw_char ; end loop check_digit ; << check_other_things >> null ; if not l_isdigit then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/#example-better","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitarray constant string ( 10 char ) : = '0123456789' ; k_lower_bound constant simple_integer : = 1 ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; l_isdigit boolean : = false ; l_password_length pls_integer ; l_array_length pls_integer ; begin l_password_length : = length ( in_password ); l_array_length : = length ( k_digitarray ); << check_digit >> for i in k_lower_bound .. l_array_length loop << check_pw_char >> for j in k_lower_bound .. l_password_length loop if substr ( in_password , j , 1 ) = substr ( k_digitarray , i , 1 ) then l_isdigit : = true ; exit check_digit ; -- early exit condition end if ; end loop check_pw_char ; end loop check_digit ; << check_other_things >> null ; if not l_isdigit then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; /","title":"Example (better)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4310/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package body my_package is procedure password_check ( in_password in varchar2 ) is k_digitpattern constant string ( 2 char ) : = '\\d' ; k_errno constant simple_integer : = - 20501 ; k_errmsg constant string ( 100 char ) : = 'Password must contain a digit.' ; begin if not regexp_like ( in_password , k_digitpattern ) then raise_application_error ( k_errno , k_errmsg ); end if ; end password_check ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4320/","text":"G-4320: Always label your loops. Minor Maintainability Reason It's a good alternative for comments to indicate the start and end of a named loop processing. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; while ( i <= k_max_value ) loop i : = i + k_increment ; end loop ; loop exit ; end loop ; for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop ; for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); end loop ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); end loop process_employees ; end ; /","title":"G-4320: Always label your loops."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4320/#g-4320-always-label-your-loops","text":"Minor Maintainability","title":"G-4320: Always label your loops."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4320/#reason","text":"It's a good alternative for comments to indicate the start and end of a named loop processing.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4320/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; while ( i <= k_max_value ) loop i : = i + k_increment ; end loop ; loop exit ; end loop ; for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop ; for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); end loop ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4320/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); end loop process_employees ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4330/","text":"G-4330: Always use a CURSOR FOR loop to process the complete cursor results unless you are using bulk operations. Minor Maintainability Reason It is easier for the reader to see that the complete data set is processed. Using SQL to define the data to be processed is easier to maintain and typically faster than using conditional processing within the loop. Since an exit statement is similar to a goto statement, it should be avoided whenever possible. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 declare cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin open employee_cur ; << output_employee_last_names >> loop fetch employee_cur into r_employee ; exit read_employees when employee_cur % notfound ; sys . dbms_output . put_line ( r_employee . last_name ); end loop output_employee_last_names ; close employee_cur ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 declare cursor employee_cur is select employee_id , last_name from employee ; begin << output_employee_last_names >> for r_employee in employee_cur loop sys . dbms_output . put_line ( r_employee . last_name ); end loop output_employee_last_names ; end ; /","title":"G-4330: Always use a CURSOR FOR loop to process the complete cursor results unless you are using bulk operations."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4330/#g-4330-always-use-a-cursor-for-loop-to-process-the-complete-cursor-results-unless-you-are-using-bulk-operations","text":"Minor Maintainability","title":"G-4330: Always use a CURSOR FOR loop to process the complete cursor results unless you are using bulk operations."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4330/#reason","text":"It is easier for the reader to see that the complete data set is processed. Using SQL to define the data to be processed is easier to maintain and typically faster than using conditional processing within the loop. Since an exit statement is similar to a goto statement, it should be avoided whenever possible.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4330/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 declare cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin open employee_cur ; << output_employee_last_names >> loop fetch employee_cur into r_employee ; exit read_employees when employee_cur % notfound ; sys . dbms_output . put_line ( r_employee . last_name ); end loop output_employee_last_names ; close employee_cur ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4330/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 declare cursor employee_cur is select employee_id , last_name from employee ; begin << output_employee_last_names >> for r_employee in employee_cur loop sys . dbms_output . put_line ( r_employee . last_name ); end loop output_employee_last_names ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4340/","text":"G-4340: Always use a NUMERIC FOR loop to process a dense array. Minor Maintainability Reason It is easier for the reader to see that the complete array is processed. Since an exit statement is similar to a goto statement, it should be avoided whenever possible. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare type t_employee_type is varray ( 10 ) of employee . employee_id % type ; t_employee t_employee_type ; k_himuro constant integer : = 118 ; k_livingston constant integer : = 177 ; k_min_value constant simple_integer : = 1 ; k_increment constant simple_integer : = 1 ; i pls_integer ; begin t_employee : = t_employee_type ( k_himuro , k_livingston ); i : = k_min_value ; << process_employees >> loop exit process_employees when i > t_employee . count (); sys . dbms_output . put_line ( t_employee ( i )); i : = i + k_increment ; end loop process_employees ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare type t_employee_type is varray ( 10 ) of employee . employee_id % type ; t_employee t_employee_type ; k_himuro constant integer : = 118 ; k_livingston constant integer : = 177 ; begin t_employee : = t_employee_type ( k_himuro , k_livingston ); << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); end loop process_employees ; end ; /","title":"G-4340: Always use a NUMERIC FOR loop to process a dense array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4340/#g-4340-always-use-a-numeric-for-loop-to-process-a-dense-array","text":"Minor Maintainability","title":"G-4340: Always use a NUMERIC FOR loop to process a dense array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4340/#reason","text":"It is easier for the reader to see that the complete array is processed. Since an exit statement is similar to a goto statement, it should be avoided whenever possible.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4340/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare type t_employee_type is varray ( 10 ) of employee . employee_id % type ; t_employee t_employee_type ; k_himuro constant integer : = 118 ; k_livingston constant integer : = 177 ; k_min_value constant simple_integer : = 1 ; k_increment constant simple_integer : = 1 ; i pls_integer ; begin t_employee : = t_employee_type ( k_himuro , k_livingston ); i : = k_min_value ; << process_employees >> loop exit process_employees when i > t_employee . count (); sys . dbms_output . put_line ( t_employee ( i )); i : = i + k_increment ; end loop process_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4340/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare type t_employee_type is varray ( 10 ) of employee . employee_id % type ; t_employee t_employee_type ; k_himuro constant integer : = 118 ; k_livingston constant integer : = 177 ; begin t_employee : = t_employee_type ( k_himuro , k_livingston ); << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); end loop process_employees ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/","text":"G-4350: Always use 1 as lower and COUNT() as upper bound when looping through a dense array. Major Reliability Reason Doing so will not raise a value_error if the array you are looping through is empty. If you want to use first()..last() you need to check the array for emptiness beforehand to avoid the raise of value_error . Example (bad) 1 2 3 4 5 6 7 8 9 10 11 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin << process_employees >> for i in t_employee . first ().. t_employee . last () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end ; / Example (better) Raise an unitialized collection error if t_employee is not initialized. 1 2 3 4 5 6 7 8 9 10 11 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end ; / Example (good) Raises neither an error nor checking whether the array is empty. t_employee.count() always returns a number (unless the array is not initialized). If the array is empty count() returns 0 and therefore the loop will not be entered. 1 2 3 4 5 6 7 8 9 10 11 12 13 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin if t_employee is not null then << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end if ; end ; /","title":"G-4350: Always use 1 as lower and COUNT() as upper bound when looping through a dense array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/#g-4350-always-use-1-as-lower-and-count-as-upper-bound-when-looping-through-a-dense-array","text":"Major Reliability","title":"G-4350: Always use 1 as lower and COUNT() as upper bound when looping through a dense array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/#reason","text":"Doing so will not raise a value_error if the array you are looping through is empty. If you want to use first()..last() you need to check the array for emptiness beforehand to avoid the raise of value_error .","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin << process_employees >> for i in t_employee . first ().. t_employee . last () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/#example-better","text":"Raise an unitialized collection error if t_employee is not initialized. 1 2 3 4 5 6 7 8 9 10 11 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end ; /","title":"Example (better)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4350/#example-good","text":"Raises neither an error nor checking whether the array is empty. t_employee.count() always returns a number (unless the array is not initialized). If the array is empty count() returns 0 and therefore the loop will not be entered. 1 2 3 4 5 6 7 8 9 10 11 12 13 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type : = t_employee_type (); begin if t_employee is not null then << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); -- some processing end loop process_employees ; end if ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4360/","text":"G-4360: Always use a WHILE loop to process a loose array. Minor Efficiency Reason When a loose array is processed using a numeric for loop we have to check with all iterations whether the element exist to avoid a no_data_found exception. In addition, the number of iterations is not driven by the number of elements in the array but by the number of the lowest/highest element. The more gaps we have, the more superfluous iterations will be done. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare -- raises no_data_found when processing 2nd record type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type ; k_rogers constant integer : = 134 ; k_matos constant integer : = 143 ; k_mcewen constant integer : = 158 ; k_index_matos constant integer : = 2 ; begin t_employee : = t_employee_type ( k_rogers , k_matos , k_mcewen ); t_employee . delete ( k_index_matos ); if t_employee is not null then << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); end loop process_employees ; end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type ; k_rogers constant integer : = 134 ; k_matos constant integer : = 143 ; k_mcewen constant integer : = 158 ; k_index_matos constant integer : = 2 ; l_index pls_integer ; begin t_employee : = t_employee_type ( k_rogers , k_matos , k_mcewen ); t_employee . delete ( k_index_matos ); l_index : = t_employee . first (); << process_employees >> while l_index is not null loop sys . dbms_output . put_line ( t_employee ( l_index )); l_index : = t_employee . next ( l_index ); end loop process_employees ; end ; /","title":"G-4360: Always use a WHILE loop to process a loose array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4360/#g-4360-always-use-a-while-loop-to-process-a-loose-array","text":"Minor Efficiency","title":"G-4360: Always use a WHILE loop to process a loose array."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4360/#reason","text":"When a loose array is processed using a numeric for loop we have to check with all iterations whether the element exist to avoid a no_data_found exception. In addition, the number of iterations is not driven by the number of elements in the array but by the number of the lowest/highest element. The more gaps we have, the more superfluous iterations will be done.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4360/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 declare -- raises no_data_found when processing 2nd record type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type ; k_rogers constant integer : = 134 ; k_matos constant integer : = 143 ; k_mcewen constant integer : = 158 ; k_index_matos constant integer : = 2 ; begin t_employee : = t_employee_type ( k_rogers , k_matos , k_mcewen ); t_employee . delete ( k_index_matos ); if t_employee is not null then << process_employees >> for i in 1 .. t_employee . count () loop sys . dbms_output . put_line ( t_employee ( i )); end loop process_employees ; end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4360/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 declare type t_employee_type is table of employee . employee_id % type ; t_employee t_employee_type ; k_rogers constant integer : = 134 ; k_matos constant integer : = 143 ; k_mcewen constant integer : = 158 ; k_index_matos constant integer : = 2 ; l_index pls_integer ; begin t_employee : = t_employee_type ( k_rogers , k_matos , k_mcewen ); t_employee . delete ( k_index_matos ); l_index : = t_employee . first (); << process_employees >> while l_index is not null loop sys . dbms_output . put_line ( t_employee ( l_index )); l_index : = t_employee . next ( l_index ); end loop process_employees ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4370/","text":"G-4370: Avoid using EXIT to stop loop processing unless you are in a basic loop. Major Maintainability Reason A numeric for loop as well as a while loop and a cursor for loop have defined loop boundaries. If you are not able to exit your loop using those loop boundaries, then a basic loop is the right loop to choose. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; exit while_loop when i > k_max_value ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop null ; exit for_loop when i = k_max_value ; end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); null ; -- some processing exit process_employees ; end loop process_employees ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); -- some processing end loop process_employees ; end ; /","title":"G-4370: Avoid using EXIT to stop loop processing unless you are in a basic loop."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4370/#g-4370-avoid-using-exit-to-stop-loop-processing-unless-you-are-in-a-basic-loop","text":"Major Maintainability","title":"G-4370: Avoid using EXIT to stop loop processing unless you are in a basic loop."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4370/#reason","text":"A numeric for loop as well as a while loop and a cursor for loop have defined loop boundaries. If you are not able to exit your loop using those loop boundaries, then a basic loop is the right loop to choose.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4370/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; exit while_loop when i > k_max_value ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop null ; exit for_loop when i = k_max_value ; end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); null ; -- some processing exit process_employees ; end loop process_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4370/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 declare i integer ; k_min_value constant simple_integer : = 1 ; k_max_value constant simple_integer : = 10 ; k_increment constant simple_integer : = 1 ; begin i : = k_min_value ; << while_loop >> while ( i <= k_max_value ) loop i : = i + k_increment ; end loop while_loop ; << basic_loop >> loop exit basic_loop ; end loop basic_loop ; << for_loop >> for i in k_min_value .. k_max_value loop sys . dbms_output . put_line ( i ); end loop for_loop ; << process_employees >> for r_employee in ( select last_name from employee ) loop sys . dbms_output . put_line ( r_employee . last_name ); -- some processing end loop process_employees ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4375/","text":"G-4375: Always use EXIT WHEN instead of an IF statement to exit from a loop. Minor Maintainability Reason If you need to use an exit statement use its full semantic to make the code easier to understand and maintain. There is simply no need for an additional IF statement. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare k_first_year constant pls_integer : = 1900 ; begin << process_employees >> loop my_package . some_processing (); if extract ( year from sysdate ) > k_first_year then exit process_employees ; end if ; my_package . some_further_processing (); end loop process_employees ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 declare k_first_year constant pls_integer : = 1900 ; begin << process_employees >> loop my_package . some_processing (); exit process_employees when extract ( year from sysdate ) > k_first_year ; my_package . some_further_processing (); end loop process_employees ; end ; /","title":"G-4375: Always use EXIT WHEN instead of an IF statement to exit from a loop."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4375/#g-4375-always-use-exit-when-instead-of-an-if-statement-to-exit-from-a-loop","text":"Minor Maintainability","title":"G-4375: Always use EXIT WHEN instead of an IF statement to exit from a loop."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4375/#reason","text":"If you need to use an exit statement use its full semantic to make the code easier to understand and maintain. There is simply no need for an additional IF statement.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4375/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare k_first_year constant pls_integer : = 1900 ; begin << process_employees >> loop my_package . some_processing (); if extract ( year from sysdate ) > k_first_year then exit process_employees ; end if ; my_package . some_further_processing (); end loop process_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4375/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 declare k_first_year constant pls_integer : = 1900 ; begin << process_employees >> loop my_package . some_processing (); exit process_employees when extract ( year from sysdate ) > k_first_year ; my_package . some_further_processing (); end loop process_employees ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4380/","text":"G-4380 Try to label your EXIT WHEN statements. Minor Maintainability Reason It's a good alternative for comments, especially for nested loops to name the loop to exit. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare k_init_loop constant simple_integer : = 0 ; k_increment constant simple_integer : = 1 ; k_exit_value constant simple_integer : = 3 ; k_outer_text constant types . short_text_type : = 'outer loop counter is ' ; k_inner_text constant types . short_text_type : = ' inner loop counter is ' ; l_outerloop pls_integer ; l_innerloop pls_integer ; begin l_outerloop : = k_init_loop ; << outerloop >> loop l_innerloop : = k_init_loop ; l_outerloop : = nvl ( l_outerloop , k_init_loop ) + k_increment ; << innerloop >> loop l_innerloop : = nvl ( l_innerloop , k_init_loop ) + k_increment ; sys . dbms_output . put_line ( k_outer_text || l_outerloop || k_inner_text || l_innerloop ); exit when l_innerloop = k_exit_value ; end loop innerloop ; exit when l_innerloop = k_exit_value ; end loop outerloop ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare k_init_loop constant simple_integer : = 0 ; k_increment constant simple_integer : = 1 ; k_exit_value constant simple_integer : = 3 ; k_outer_text constant types . short_text_type : = 'outer loop counter is ' ; k_inner_text constant types . short_text_type : = ' inner loop counter is ' ; l_outerloop pls_integer ; l_innerloop pls_integer ; begin l_outerloop : = k_init_loop ; << outerloop >> loop l_innerloop : = k_init_loop ; l_outerloop : = nvl ( l_outerloop , k_init_loop ) + k_increment ; << innerloop >> loop l_innerloop : = nvl ( l_innerloop , k_init_loop ) + k_increment ; sys . dbms_output . put_line ( k_outer_text || l_outerloop || k_inner_text || l_innerloop ); exit outerloop when l_innerloop = k_exit_value ; end loop innerloop ; end loop outerloop ; end ; /","title":"G-4380\tTry to label your EXIT WHEN statements."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4380/#g-4380-try-to-label-your-exit-when-statements","text":"Minor Maintainability","title":"G-4380    Try to label your EXIT WHEN statements."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4380/#reason","text":"It's a good alternative for comments, especially for nested loops to name the loop to exit.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4380/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 declare k_init_loop constant simple_integer : = 0 ; k_increment constant simple_integer : = 1 ; k_exit_value constant simple_integer : = 3 ; k_outer_text constant types . short_text_type : = 'outer loop counter is ' ; k_inner_text constant types . short_text_type : = ' inner loop counter is ' ; l_outerloop pls_integer ; l_innerloop pls_integer ; begin l_outerloop : = k_init_loop ; << outerloop >> loop l_innerloop : = k_init_loop ; l_outerloop : = nvl ( l_outerloop , k_init_loop ) + k_increment ; << innerloop >> loop l_innerloop : = nvl ( l_innerloop , k_init_loop ) + k_increment ; sys . dbms_output . put_line ( k_outer_text || l_outerloop || k_inner_text || l_innerloop ); exit when l_innerloop = k_exit_value ; end loop innerloop ; exit when l_innerloop = k_exit_value ; end loop outerloop ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4380/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 declare k_init_loop constant simple_integer : = 0 ; k_increment constant simple_integer : = 1 ; k_exit_value constant simple_integer : = 3 ; k_outer_text constant types . short_text_type : = 'outer loop counter is ' ; k_inner_text constant types . short_text_type : = ' inner loop counter is ' ; l_outerloop pls_integer ; l_innerloop pls_integer ; begin l_outerloop : = k_init_loop ; << outerloop >> loop l_innerloop : = k_init_loop ; l_outerloop : = nvl ( l_outerloop , k_init_loop ) + k_increment ; << innerloop >> loop l_innerloop : = nvl ( l_innerloop , k_init_loop ) + k_increment ; sys . dbms_output . put_line ( k_outer_text || l_outerloop || k_inner_text || l_innerloop ); exit outerloop when l_innerloop = k_exit_value ; end loop innerloop ; end loop outerloop ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4385/","text":"G-4385: Never use a cursor for loop to check whether a cursor returns data. Major Efficiency Reason You might process more data than required, which leads to bad performance. Also, check out rule G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare l_employee_found boolean : = false ; cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin << check_employees >> for r_employee in employee_cur loop l_employee_found : = true ; end loop check_employees ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 declare l_employee_found boolean : = false ; cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin open employee_cur ; fetch employee_cur into r_employee ; l_employee_found : = employee_cur % found ; close employee_cur ; end ; /","title":"G-4385: Never use a cursor for loop to check whether a cursor returns data."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4385/#g-4385-never-use-a-cursor-for-loop-to-check-whether-a-cursor-returns-data","text":"Major Efficiency","title":"G-4385: Never use a cursor for loop to check whether a cursor returns data."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4385/#reason","text":"You might process more data than required, which leads to bad performance. Also, check out rule G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4385/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare l_employee_found boolean : = false ; cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin << check_employees >> for r_employee in employee_cur loop l_employee_found : = true ; end loop check_employees ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4385/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 declare l_employee_found boolean : = false ; cursor employee_cur is select employee_id , last_name from employee ; r_employee employee_cur % rowtype ; begin open employee_cur ; fetch employee_cur into r_employee ; l_employee_found : = employee_cur % found ; close employee_cur ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4390/","text":"G-4390: Avoid use of unreferenced FOR loop indexes. Major Efficiency Reason If the loop index is used for anything but traffic control inside the loop, this is one of the indicators that a numeric FOR loop is being used incorrectly. The actual body of executable statements completely ignores the loop index. When that is the case, there is a good chance that you do not need the loop at all. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 declare l_row pls_integer ; l_value pls_integer ; k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; k_row_incr constant simple_integer : = 1 ; k_value_incr constant simple_integer : = 10 ; k_delimiter constant types . short_text_type : = ' ' ; k_first_value constant simple_integer : = 100 ; begin l_row : = k_lower_bound ; l_value : = k_first_value ; << for_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( l_row || k_delimiter || l_value ); l_row : = l_row + k_row_incr ; l_value : = l_value + k_value_incr ; end loop for_loop ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; k_value_incr constant simple_integer : = 10 ; k_delimiter constant types . short_text_type : = ' ' ; k_first_value constant simple_integer : = 100 ; begin << for_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( i || k_delimiter || to_char ( k_first_value + i * k_value_incr )); end loop for_loop ; end ; /","title":"G-4390: Avoid use of unreferenced FOR loop indexes."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4390/#g-4390-avoid-use-of-unreferenced-for-loop-indexes","text":"Major Efficiency","title":"G-4390: Avoid use of unreferenced FOR loop indexes."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4390/#reason","text":"If the loop index is used for anything but traffic control inside the loop, this is one of the indicators that a numeric FOR loop is being used incorrectly. The actual body of executable statements completely ignores the loop index. When that is the case, there is a good chance that you do not need the loop at all.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4390/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 declare l_row pls_integer ; l_value pls_integer ; k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; k_row_incr constant simple_integer : = 1 ; k_value_incr constant simple_integer : = 10 ; k_delimiter constant types . short_text_type : = ' ' ; k_first_value constant simple_integer : = 100 ; begin l_row : = k_lower_bound ; l_value : = k_first_value ; << for_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( l_row || k_delimiter || l_value ); l_row : = l_row + k_row_incr ; l_value : = l_value + k_value_incr ; end loop for_loop ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4390/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; k_value_incr constant simple_integer : = 10 ; k_delimiter constant types . short_text_type : = ' ' ; k_first_value constant simple_integer : = 100 ; begin << for_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( i || k_delimiter || to_char ( k_first_value + i * k_value_incr )); end loop for_loop ; end ; /","title":"Example (good)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4395/","text":"G-4395: Avoid hard-coded upper or lower bound values with FOR loops. Minor Changeability, Maintainability Reason Your loop statement uses a hard-coded value for either its upper or lower bounds. This creates a \"weak link\" in your program because it assumes that this value will never change. A better practice is to create a named constant (or function) and reference this named element instead of the hard-coded value. Example (bad) 1 2 3 4 5 6 7 8 begin << output_loop >> for i in 1 .. 5 loop sys . dbms_output . put_line ( i ); end loop output_loop ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 declare k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; begin << output_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( i ); end loop output_loop ; end ; /","title":"G-4395: Avoid hard-coded upper or lower bound values with FOR loops."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4395/#g-4395-avoid-hard-coded-upper-or-lower-bound-values-with-for-loops","text":"Minor Changeability, Maintainability","title":"G-4395: Avoid hard-coded upper or lower bound values with FOR loops."},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4395/#reason","text":"Your loop statement uses a hard-coded value for either its upper or lower bounds. This creates a \"weak link\" in your program because it assumes that this value will never change. A better practice is to create a named constant (or function) and reference this named element instead of the hard-coded value.","title":"Reason"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4395/#example-bad","text":"1 2 3 4 5 6 7 8 begin << output_loop >> for i in 1 .. 5 loop sys . dbms_output . put_line ( i ); end loop output_loop ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/4-control-structures/3-flow-control/g-4395/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 declare k_lower_bound constant simple_integer : = 1 ; k_upper_bound constant simple_integer : = 5 ; begin << output_loop >> for i in k_lower_bound .. k_upper_bound loop sys . dbms_output . put_line ( i ); end loop output_loop ; end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5010/","text":"G-5010: Always use an error/logging framework for your application. Critical Reliability, Reusability, Testability Reason Having a framework to raise/handle/log your errors allows you to easily avoid duplicate application error numbers and having different error messages for the same type of error. This kind of framework should include Logging (different channels like table, mail, file, etc. if needed) Error Raising Multilanguage support if needed Translate ORACLE error messages to a user friendly error text Error repository By far, the best logging framework available is Logger from OraOpenSource. Example (bad) 1 2 3 4 5 6 begin sys . dbms_output . put_line ( 'start' ); -- some processing sys . dbms_output . put_line ( 'end' ); end ; / Example (good) 1 2 3 4 5 6 7 8 9 declare -- see https://github.com/oraopensource/logger l_scope logger_logs . scope % type : = 'demo' ; begin logger . log ( 'start' , l_scope ); -- some processing logger . log ( 'end' , l_scope ); end ; /","title":"G-5010: Always use an error/logging framework for your application."},{"location":"4-language-usage/5-exception-handling/g-5010/#g-5010-always-use-an-errorlogging-framework-for-your-application","text":"Critical Reliability, Reusability, Testability","title":"G-5010: Always use an error/logging framework for your application."},{"location":"4-language-usage/5-exception-handling/g-5010/#reason","text":"Having a framework to raise/handle/log your errors allows you to easily avoid duplicate application error numbers and having different error messages for the same type of error. This kind of framework should include Logging (different channels like table, mail, file, etc. if needed) Error Raising Multilanguage support if needed Translate ORACLE error messages to a user friendly error text Error repository By far, the best logging framework available is Logger from OraOpenSource.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5010/#example-bad","text":"1 2 3 4 5 6 begin sys . dbms_output . put_line ( 'start' ); -- some processing sys . dbms_output . put_line ( 'end' ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5010/#example-good","text":"1 2 3 4 5 6 7 8 9 declare -- see https://github.com/oraopensource/logger l_scope logger_logs . scope % type : = 'demo' ; begin logger . log ( 'start' , l_scope ); -- some processing logger . log ( 'end' , l_scope ); end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5020/","text":"G-5020: Never handle unnamed exceptions using the error number. Critical Maintainability Reason When literals are used for error numbers the reader needs the error message manual to unterstand what is going on. Commenting the code or using constants is an option, but it is better to use named exceptions instead, because it ensures a certain level of consistency which makes maintenance easier. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 declare k_no_data_found constant integer : = - 1 ; begin my_package . some_processing (); -- some code which raises an exception exception when too_many_rows then my_package . some_further_processing (); when others then if sqlcode = k_no_data_found then null ; end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 begin my_package . some_processing (); -- some code which raises an exception exception when too_many_rows then my_package . some_further_processing (); when no_data_found then null ; -- handle no_data_found end ; /","title":"G-5020: Never handle unnamed exceptions using the error number."},{"location":"4-language-usage/5-exception-handling/g-5020/#g-5020-never-handle-unnamed-exceptions-using-the-error-number","text":"Critical Maintainability","title":"G-5020: Never handle unnamed exceptions using the error number."},{"location":"4-language-usage/5-exception-handling/g-5020/#reason","text":"When literals are used for error numbers the reader needs the error message manual to unterstand what is going on. Commenting the code or using constants is an option, but it is better to use named exceptions instead, because it ensures a certain level of consistency which makes maintenance easier.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5020/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 declare k_no_data_found constant integer : = - 1 ; begin my_package . some_processing (); -- some code which raises an exception exception when too_many_rows then my_package . some_further_processing (); when others then if sqlcode = k_no_data_found then null ; end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5020/#example-good","text":"1 2 3 4 5 6 7 8 9 begin my_package . some_processing (); -- some code which raises an exception exception when too_many_rows then my_package . some_further_processing (); when no_data_found then null ; -- handle no_data_found end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5030/","text":"G-5030: Never assign predefined exception names to user defined exceptions. Blocker Reliability, Testability Reason This is error-prone because your local declaration overrides the global declaration. While it is technically possible to use the same names, it causes confusion for others needing to read and maintain this code. Additionally, you will need to be very careful to use the prefix standard in front of any reference that needs to use Oracle\u2019s default exception behavior. Example (bad) Using the code below, we are not able to handle the no_data_found exception raised by the select statement as we have overwritten that exception handler. In addition, our exception handler doesn't have an exception number assigned, which should be raised when the SELECT statement does not find any rows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare l_dummy dual . dummy % type ; no_data_found exception ; k_rownum constant simple_integer : = 0 ; k_no_data_found constant types . short_text_type : = 'no_data_found' ; begin select dummy into l_dummy from dual where rownum = k_rownum ; if l_dummy is null then raise no_data_found ; end if ; exception when no_data_found then sys . dbms_output . put_line ( k_no_data_found ); end ; / Error report - ORA - 01403 : no data found ORA - 06512 : at line 5 01403 . 00000 - \"no data found\" * Cause : No data was found from the objects . * Action : There was no data from the objects which may be due to end of fetch . Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 declare l_dummy dual . dummy % type ; empty_value exception ; k_rownum constant simple_integer : = 0 ; k_empty_value constant types . short_text_type : = 'empty_value' ; k_no_data_found constant types . short_text_type : = 'no_data_found' ; begin select dummy into l_dummy from dual where rownum = k_rownum ; if l_dummy is null then raise empty_value ; end if ; exception when empty_value then sys . dbms_output . put_line ( k_empty_value ); when no_data_found then sys . dbms_output . put_line ( k_no_data_found ); end ; /","title":"G-5030: Never assign predefined exception names to user defined exceptions."},{"location":"4-language-usage/5-exception-handling/g-5030/#g-5030-never-assign-predefined-exception-names-to-user-defined-exceptions","text":"Blocker Reliability, Testability","title":"G-5030: Never assign predefined exception names to user defined exceptions."},{"location":"4-language-usage/5-exception-handling/g-5030/#reason","text":"This is error-prone because your local declaration overrides the global declaration. While it is technically possible to use the same names, it causes confusion for others needing to read and maintain this code. Additionally, you will need to be very careful to use the prefix standard in front of any reference that needs to use Oracle\u2019s default exception behavior.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5030/#example-bad","text":"Using the code below, we are not able to handle the no_data_found exception raised by the select statement as we have overwritten that exception handler. In addition, our exception handler doesn't have an exception number assigned, which should be raised when the SELECT statement does not find any rows. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 declare l_dummy dual . dummy % type ; no_data_found exception ; k_rownum constant simple_integer : = 0 ; k_no_data_found constant types . short_text_type : = 'no_data_found' ; begin select dummy into l_dummy from dual where rownum = k_rownum ; if l_dummy is null then raise no_data_found ; end if ; exception when no_data_found then sys . dbms_output . put_line ( k_no_data_found ); end ; / Error report - ORA - 01403 : no data found ORA - 06512 : at line 5 01403 . 00000 - \"no data found\" * Cause : No data was found from the objects . * Action : There was no data from the objects which may be due to end of fetch .","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5030/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 declare l_dummy dual . dummy % type ; empty_value exception ; k_rownum constant simple_integer : = 0 ; k_empty_value constant types . short_text_type : = 'empty_value' ; k_no_data_found constant types . short_text_type : = 'no_data_found' ; begin select dummy into l_dummy from dual where rownum = k_rownum ; if l_dummy is null then raise empty_value ; end if ; exception when empty_value then sys . dbms_output . put_line ( k_empty_value ); when no_data_found then sys . dbms_output . put_line ( k_no_data_found ); end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5040/","text":"G-5040: Avoid use of WHEN OTHERS clause in an exception section without any other specific handlers. Major Reliability Reason There is not necessarily anything wrong with using when others , but it can cause you to \"lose\" error information unless your handler code is relatively sophisticated. Generally, you should use when others to grab any and every error only after you have thought about your executable section and decided that you are not able to trap any specific exceptions. If you know, on the other hand, that a certain exception might be raised, include a handler for that error. By declaring two different exception handlers, the code more clearly states what we expect to have happen and how we want to handle the errors. That makes it easier to maintain and enhance. We also avoid hard-coding error numbers in checks against sqlcode . Example (bad) 1 2 3 4 5 6 7 begin my_package . some_processing (); exception when others then my_package . some_further_processing (); end ; / Example (good) 1 2 3 4 5 6 7 begin my_package . some_processing (); exception when dup_val_on_index then my_package . some_further_processing (); end ; /","title":"G-5040: Avoid use of WHEN OTHERS clause in an exception section without any other specific handlers."},{"location":"4-language-usage/5-exception-handling/g-5040/#g-5040-avoid-use-of-when-others-clause-in-an-exception-section-without-any-other-specific-handlers","text":"Major Reliability","title":"G-5040: Avoid use of WHEN OTHERS clause in an exception section without any other specific handlers."},{"location":"4-language-usage/5-exception-handling/g-5040/#reason","text":"There is not necessarily anything wrong with using when others , but it can cause you to \"lose\" error information unless your handler code is relatively sophisticated. Generally, you should use when others to grab any and every error only after you have thought about your executable section and decided that you are not able to trap any specific exceptions. If you know, on the other hand, that a certain exception might be raised, include a handler for that error. By declaring two different exception handlers, the code more clearly states what we expect to have happen and how we want to handle the errors. That makes it easier to maintain and enhance. We also avoid hard-coding error numbers in checks against sqlcode .","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5040/#example-bad","text":"1 2 3 4 5 6 7 begin my_package . some_processing (); exception when others then my_package . some_further_processing (); end ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5040/#example-good","text":"1 2 3 4 5 6 7 begin my_package . some_processing (); exception when dup_val_on_index then my_package . some_further_processing (); end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5050/","text":"G-5050: Avoid use of the RAISE_APPLICATION_ERROR built-in procedure with a hard-coded 20nnn error number or hard-coded message. Major Changeability, Maintainability Reason If you are not very organized in the way you allocate, define and use the error numbers between 20999 and 20000 (those reserved by Oracle for its user community), it is very easy to end up with conflicting usages. You should assign these error numbers to named constants and consolidate all definitions within a single package. When you call raise_application_error , you should reference these named elements and error message text stored in a table. Use your own raise procedure in place of explicit calls to raise_application_error . If you are raising a \"system\" exception like no_data_found , you must use RAISE. However, when you want to raise an application-specific error, you use raise_application_error . If you use the latter, you then have to provide an error number and message. This leads to unnecessary and damaging hard-coded values. A more fail-safe approach is to provide a predefined raise procedure that automatically checks the error number and determines the correct way to raise the error. Example (bad) 1 2 3 4 begin raise_application_error ( - 20501 , 'invalid employee_id' ); end ; / Example (good) 1 2 3 4 begin errors . raise ( in_error => errors . k_invalid_employee_id ); end ; /","title":"G-5050: Avoid use of the RAISE_APPLICATION_ERROR built-in procedure with a hard-coded  20nnn error number or hard-coded message."},{"location":"4-language-usage/5-exception-handling/g-5050/#g-5050-avoid-use-of-the-raise_application_error-built-in-procedure-with-a-hard-coded-20nnn-error-number-or-hard-coded-message","text":"Major Changeability, Maintainability","title":"G-5050: Avoid use of the RAISE_APPLICATION_ERROR built-in procedure with a hard-coded  20nnn error number or hard-coded message."},{"location":"4-language-usage/5-exception-handling/g-5050/#reason","text":"If you are not very organized in the way you allocate, define and use the error numbers between 20999 and 20000 (those reserved by Oracle for its user community), it is very easy to end up with conflicting usages. You should assign these error numbers to named constants and consolidate all definitions within a single package. When you call raise_application_error , you should reference these named elements and error message text stored in a table. Use your own raise procedure in place of explicit calls to raise_application_error . If you are raising a \"system\" exception like no_data_found , you must use RAISE. However, when you want to raise an application-specific error, you use raise_application_error . If you use the latter, you then have to provide an error number and message. This leads to unnecessary and damaging hard-coded values. A more fail-safe approach is to provide a predefined raise procedure that automatically checks the error number and determines the correct way to raise the error.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5050/#example-bad","text":"1 2 3 4 begin raise_application_error ( - 20501 , 'invalid employee_id' ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5050/#example-good","text":"1 2 3 4 begin errors . raise ( in_error => errors . k_invalid_employee_id ); end ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5060/","text":"G-5060: Avoid unhandled exceptions. Major Reliability Reason This may be your intention, but you should review the code to confirm this behavior. If you are raising an error in a program, then you are clearly predicting a situation in which that error will occur. You should consider including a handler in your code for predictable errors, allowing for a graceful and informative failure. After all, it is much more difficult for an enclosing block to be aware of the various errors you might raise and more importantly, what should be done in response to the error. The form that this failure takes does not necessarily need to be an exception. When writing functions, you may well decide that in the case of certain exceptions, you will want to return a value such as NULL, rather than allow an exception to propagate out of the function. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create or replace package body department_api is function name_by_id ( in_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin select department_name into l_department_name from department where department_id = in_id ; return l_department_name ; end name_by_id ; end department_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body department_api is function name_by_id ( in_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin select department_name into l_department_name from department where department_id = in_id ; return l_department_name ; exception when no_data_found then return null ; when too_many_rows then raise ; end name_by_id ; end department_api ; /","title":"G-5060: Avoid unhandled exceptions."},{"location":"4-language-usage/5-exception-handling/g-5060/#g-5060-avoid-unhandled-exceptions","text":"Major Reliability","title":"G-5060: Avoid unhandled exceptions."},{"location":"4-language-usage/5-exception-handling/g-5060/#reason","text":"This may be your intention, but you should review the code to confirm this behavior. If you are raising an error in a program, then you are clearly predicting a situation in which that error will occur. You should consider including a handler in your code for predictable errors, allowing for a graceful and informative failure. After all, it is much more difficult for an enclosing block to be aware of the various errors you might raise and more importantly, what should be done in response to the error. The form that this failure takes does not necessarily need to be an exception. When writing functions, you may well decide that in the case of certain exceptions, you will want to return a value such as NULL, rather than allow an exception to propagate out of the function.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5060/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 create or replace package body department_api is function name_by_id ( in_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin select department_name into l_department_name from department where department_id = in_id ; return l_department_name ; end name_by_id ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5060/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body department_api is function name_by_id ( in_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin select department_name into l_department_name from department where department_id = in_id ; return l_department_name ; exception when no_data_found then return null ; when too_many_rows then raise ; end name_by_id ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/5-exception-handling/g-5070/","text":"G-5070: Avoid using Oracle predefined exceptions. Critical Reliability Reason You have raised an exception whose name was defined by Oracle. While it is possible that you have a good reason for \"using\" one of Oracle's predefined exceptions, you should make sure that you would not be better off declaring your own exception and raising that instead. If you decide to change the exception you are using, you should apply the same consideration to your own exceptions. Specifically, do not \"re-use\" exceptions. You should define a separate exception for each error condition, rather than use the same exception for different circumstances. Being as specific as possible with the errors raised will allow developers to check for, and handle, the different kinds of errors the code might produce. Example (bad) 1 2 3 4 begin raise no_data_found ; end ; / Example (good) 1 2 3 4 5 6 declare my_exception exception ; begin raise my_exception ; end ; /","title":"G-5070: Avoid using Oracle predefined exceptions."},{"location":"4-language-usage/5-exception-handling/g-5070/#g-5070-avoid-using-oracle-predefined-exceptions","text":"Critical Reliability","title":"G-5070: Avoid using Oracle predefined exceptions."},{"location":"4-language-usage/5-exception-handling/g-5070/#reason","text":"You have raised an exception whose name was defined by Oracle. While it is possible that you have a good reason for \"using\" one of Oracle's predefined exceptions, you should make sure that you would not be better off declaring your own exception and raising that instead. If you decide to change the exception you are using, you should apply the same consideration to your own exceptions. Specifically, do not \"re-use\" exceptions. You should define a separate exception for each error condition, rather than use the same exception for different circumstances. Being as specific as possible with the errors raised will allow developers to check for, and handle, the different kinds of errors the code might produce.","title":"Reason"},{"location":"4-language-usage/5-exception-handling/g-5070/#example-bad","text":"1 2 3 4 begin raise no_data_found ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/5-exception-handling/g-5070/#example-good","text":"1 2 3 4 5 6 declare my_exception exception ; begin raise my_exception ; end ; /","title":"Example (good)"},{"location":"4-language-usage/6-dynamic-sql/g-6010/","text":"G-6010: Always use a character variable to execute dynamic SQL. Major Maintainability, Testability Reason Having the executed statement in a variable makes it easier to debug your code (e.g. by logging the statement that failed). Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 procedure trx_to_collection ( p_appendix_id in px_mandate_appendix . id % TYPE ) is k_trx_collection constant varchar2 ( 10 ) : = 'TRX_LINES' ; l_param_names apex_application_global . vc_arr2 ; l_param_values apex_application_global . vc_arr2 ; begin l_param_names ( l_param_names . count + 1 ) : = 'APPENDIX_ID' ; l_param_values ( l_param_names . count ) : = p_appendix_id ; apex_collection . create_collection_from_query_b ( p_collection_name => k_trx_collection , p_query => q '[select t.id, ' Y ' include_flag, ' TRX ' type from px_billing_transactions t where t.appendix_id = :APPENDIX_ID and t.pending_invoice_flag = ' Y ']' , p_names => l_param_names , p_values => l_param_values ); end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 procedure trx_to_collection ( p_appendix_id in px_mandate_appendix . id % TYPE ) is k_trx_collection constant varchar2 ( 10 ) : = 'TRX_LINES' ; k_sql constant types . big_string_type : = q '[select t.id, ' Y ' include_flag, ' TRX ' type from px_billing_transactions t where t.appendix_id = :APPENDIX_ID and t.pending_invoice_flag = ' Y ']' ; l_param_names apex_application_global . vc_arr2 ; l_param_values apex_application_global . vc_arr2 ; begin l_param_names ( l_param_names . count + 1 ) : = 'APPENDIX_ID' ; l_param_values ( l_param_names . count ) : = p_appendix_id ; apex_collection . create_collection_from_query_b ( p_collection_name => k_trx_collection , p_query => k_sql , p_names => l_param_names , p_values => l_param_values ); end ; /","title":"G-6010: Always use a character variable to execute dynamic SQL."},{"location":"4-language-usage/6-dynamic-sql/g-6010/#g-6010-always-use-a-character-variable-to-execute-dynamic-sql","text":"Major Maintainability, Testability","title":"G-6010: Always use a character variable to execute dynamic SQL."},{"location":"4-language-usage/6-dynamic-sql/g-6010/#reason","text":"Having the executed statement in a variable makes it easier to debug your code (e.g. by logging the statement that failed).","title":"Reason"},{"location":"4-language-usage/6-dynamic-sql/g-6010/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 procedure trx_to_collection ( p_appendix_id in px_mandate_appendix . id % TYPE ) is k_trx_collection constant varchar2 ( 10 ) : = 'TRX_LINES' ; l_param_names apex_application_global . vc_arr2 ; l_param_values apex_application_global . vc_arr2 ; begin l_param_names ( l_param_names . count + 1 ) : = 'APPENDIX_ID' ; l_param_values ( l_param_names . count ) : = p_appendix_id ; apex_collection . create_collection_from_query_b ( p_collection_name => k_trx_collection , p_query => q '[select t.id, ' Y ' include_flag, ' TRX ' type from px_billing_transactions t where t.appendix_id = :APPENDIX_ID and t.pending_invoice_flag = ' Y ']' , p_names => l_param_names , p_values => l_param_values ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/6-dynamic-sql/g-6010/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 procedure trx_to_collection ( p_appendix_id in px_mandate_appendix . id % TYPE ) is k_trx_collection constant varchar2 ( 10 ) : = 'TRX_LINES' ; k_sql constant types . big_string_type : = q '[select t.id, ' Y ' include_flag, ' TRX ' type from px_billing_transactions t where t.appendix_id = :APPENDIX_ID and t.pending_invoice_flag = ' Y ']' ; l_param_names apex_application_global . vc_arr2 ; l_param_values apex_application_global . vc_arr2 ; begin l_param_names ( l_param_names . count + 1 ) : = 'APPENDIX_ID' ; l_param_values ( l_param_names . count ) : = p_appendix_id ; apex_collection . create_collection_from_query_b ( p_collection_name => k_trx_collection , p_query => k_sql , p_names => l_param_names , p_values => l_param_values ); end ; /","title":"Example (good)"},{"location":"4-language-usage/6-dynamic-sql/g-6020/","text":"G-6020: Try to use output bind arguments in the RETURNING INTO clause of dynamic DML statements rather than the USING clause. Minor Maintainability Reason When a dynamic insert , update , or delete statement has a returning clause, output bind arguments can go in the returning into clause or in the using clause. You should use the returning into clause for values returned from a DML operation. Reserve out and in out bind variables for dynamic PL/SQL blocks that return values in PL/SQL variables. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body employee_api is procedure upd_salary ( in_employee_id in employee . employee_id % type , in_increase_pct in types . percentage , out_new_salary out employee . salary % type ) is k_sql_stmt constant types . big_string_type : = 'update employee set salary = salary + (salary / 100 * :1) where employee_id = :2 returning salary into :3' ; begin execute immediate k_sql_stmt using in_increase_pct , in_employee_id , out out_new_salary ; end upd_salary ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api is procedure upd_salary ( in_employee_id in employee . employee_id % type , in_increase_pct in types . percentage , out_new_salary out employee . salary % type ) is k_sql_stmt constant types . big_string_type : = 'update employee set salary = salary + (salary / 100 * :1) where employee_id = :2 returning salary into :3' ; begin execute immediate k_sql_stmt using in_increase_pct , in_employee_id returning into out_new_salary ; end upd_salary ; end employee_api ; /","title":"G-6020: Try to use output bind arguments in the RETURNING INTO clause of dynamic DML statements rather than the USING clause."},{"location":"4-language-usage/6-dynamic-sql/g-6020/#g-6020-try-to-use-output-bind-arguments-in-the-returning-into-clause-of-dynamic-dml-statements-rather-than-the-using-clause","text":"Minor Maintainability","title":"G-6020: Try to use output bind arguments in the RETURNING INTO clause of dynamic DML statements rather than the USING clause."},{"location":"4-language-usage/6-dynamic-sql/g-6020/#reason","text":"When a dynamic insert , update , or delete statement has a returning clause, output bind arguments can go in the returning into clause or in the using clause. You should use the returning into clause for values returned from a DML operation. Reserve out and in out bind variables for dynamic PL/SQL blocks that return values in PL/SQL variables.","title":"Reason"},{"location":"4-language-usage/6-dynamic-sql/g-6020/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body employee_api is procedure upd_salary ( in_employee_id in employee . employee_id % type , in_increase_pct in types . percentage , out_new_salary out employee . salary % type ) is k_sql_stmt constant types . big_string_type : = 'update employee set salary = salary + (salary / 100 * :1) where employee_id = :2 returning salary into :3' ; begin execute immediate k_sql_stmt using in_increase_pct , in_employee_id , out out_new_salary ; end upd_salary ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/6-dynamic-sql/g-6020/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body employee_api is procedure upd_salary ( in_employee_id in employee . employee_id % type , in_increase_pct in types . percentage , out_new_salary out employee . salary % type ) is k_sql_stmt constant types . big_string_type : = 'update employee set salary = salary + (salary / 100 * :1) where employee_id = :2 returning salary into :3' ; begin execute immediate k_sql_stmt using in_increase_pct , in_employee_id returning into out_new_salary ; end upd_salary ; end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/6-dynamic-sql/g-6030/","text":"G-6030: Always verify parameters that will be used in dynamic SQL with DBMS_ASSERT Major Maintainability, Testability Reason Parameters used with dynamic sql are subject to SQL injection. The DBMS_ASSERT package provides an interface to validate properties of parameters. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 procedure schedule_refresh_data_job ( p_user varchar2 ) is l_job_action varchar2 ( 4000 ); l_scope logger_logs . scope % type : = gc_scope_prefix || 'Create refresh job' ; begin logger . log ( 'START' , l_scope ); l_job_action : = 'begin hr.hr_utils.refresh_read_only_data_from_source; end;' ; dbms_scheduler . create_job ( job_name => gk_on_demand_job_name , job_type => 'PLSQL_BLOCK' , job_action => l_job_action , start_date => sysdate , enabled => true , auto_drop => true , job_class => 'DEFAULT_JOB_CLASS' , comments => 'Refresh data from Source to Destination by ' || p_user || ' created on ' || to_char ( sysdate , 'mm/dd/yyyy hh:mi:ss am' ) ); logger . log ( 'END ' , l_scope ); exception when others then logger . log_error ( 'Unable to execute: ' || sqlerrm , l_scope ); raise_application_error ( - 20001 , 'Unable to create refresh job :' || sqlerrm ); end schedule_refresh_data_job ; Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 procedure schedule_refresh_data_job ( p_user varchar2 ) is l_job_action varchar2 ( 4000 ); l_scope logger_logs . scope % type : = gc_scope_prefix || 'Create refresh job' ; begin logger . log ( 'START' , l_scope ); l_job_action : = 'begin hr.hr_utils.refresh_read_only_data_from_source; end;' ; dbms_scheduler . create_job ( job_name => gk_on_demand_job_name , job_type => 'PLSQL_BLOCK' , job_action => l_job_action , start_date => sysdate , enabled => true , auto_drop => true , job_class => 'DEFAULT_JOB_CLASS' , comments => 'Refresh data from Source to Destination by ' || dbms_assert . simple_sql_name ( p_user ) || ' created on ' || to_char ( sysdate , 'YYYY-MM-DD hh24:mi:ss' ) ); logger . log ( 'END ' , l_scope ); exception when others then logger . log_error ( 'Unable to execute: ' || sqlerrm , l_scope ); raise_application_error ( - 20001 , 'Unable to create refresh job :' || sqlerrm ); end schedule_refresh_data_job ;","title":"G-6030: Always verify parameters that will be used in dynamic SQL with DBMS_ASSERT"},{"location":"4-language-usage/6-dynamic-sql/g-6030/#g-6030-always-verify-parameters-that-will-be-used-in-dynamic-sql-with-dbms_assert","text":"Major Maintainability, Testability","title":"G-6030: Always verify parameters that will be used in dynamic SQL with DBMS_ASSERT"},{"location":"4-language-usage/6-dynamic-sql/g-6030/#reason","text":"Parameters used with dynamic sql are subject to SQL injection. The DBMS_ASSERT package provides an interface to validate properties of parameters.","title":"Reason"},{"location":"4-language-usage/6-dynamic-sql/g-6030/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 procedure schedule_refresh_data_job ( p_user varchar2 ) is l_job_action varchar2 ( 4000 ); l_scope logger_logs . scope % type : = gc_scope_prefix || 'Create refresh job' ; begin logger . log ( 'START' , l_scope ); l_job_action : = 'begin hr.hr_utils.refresh_read_only_data_from_source; end;' ; dbms_scheduler . create_job ( job_name => gk_on_demand_job_name , job_type => 'PLSQL_BLOCK' , job_action => l_job_action , start_date => sysdate , enabled => true , auto_drop => true , job_class => 'DEFAULT_JOB_CLASS' , comments => 'Refresh data from Source to Destination by ' || p_user || ' created on ' || to_char ( sysdate , 'mm/dd/yyyy hh:mi:ss am' ) ); logger . log ( 'END ' , l_scope ); exception when others then logger . log_error ( 'Unable to execute: ' || sqlerrm , l_scope ); raise_application_error ( - 20001 , 'Unable to create refresh job :' || sqlerrm ); end schedule_refresh_data_job ;","title":"Example (bad)"},{"location":"4-language-usage/6-dynamic-sql/g-6030/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 procedure schedule_refresh_data_job ( p_user varchar2 ) is l_job_action varchar2 ( 4000 ); l_scope logger_logs . scope % type : = gc_scope_prefix || 'Create refresh job' ; begin logger . log ( 'START' , l_scope ); l_job_action : = 'begin hr.hr_utils.refresh_read_only_data_from_source; end;' ; dbms_scheduler . create_job ( job_name => gk_on_demand_job_name , job_type => 'PLSQL_BLOCK' , job_action => l_job_action , start_date => sysdate , enabled => true , auto_drop => true , job_class => 'DEFAULT_JOB_CLASS' , comments => 'Refresh data from Source to Destination by ' || dbms_assert . simple_sql_name ( p_user ) || ' created on ' || to_char ( sysdate , 'YYYY-MM-DD hh24:mi:ss' ) ); logger . log ( 'END ' , l_scope ); exception when others then logger . log_error ( 'Unable to execute: ' || sqlerrm , l_scope ); raise_application_error ( - 20001 , 'Unable to create refresh job :' || sqlerrm ); end schedule_refresh_data_job ;","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7110/","text":"G-7110: Try to use named notation when calling program units. Major Changeability, Maintainability Reason Named notation makes sure that changes to the signature of the called program unit do not affect your call. This is not needed for standard functions like ( to_char , to_date , nvl , round , etc.) but should be followed for any other stored object having more than one parameter. Example (bad) 1 2 3 4 5 6 7 declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin employee_api . employee_by_id ( r_employee , k_id ); end ; / Example (good) 1 2 3 4 5 6 7 declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin employee_api . employee_by_id ( out_row => r_employee , in_employee_id => k_id ); end ; /","title":"G-7110: Try to use named notation when calling program units."},{"location":"4-language-usage/7-stored-objects/1-general/g-7110/#g-7110-try-to-use-named-notation-when-calling-program-units","text":"Major Changeability, Maintainability","title":"G-7110: Try to use named notation when calling program units."},{"location":"4-language-usage/7-stored-objects/1-general/g-7110/#reason","text":"Named notation makes sure that changes to the signature of the called program unit do not affect your call. This is not needed for standard functions like ( to_char , to_date , nvl , round , etc.) but should be followed for any other stored object having more than one parameter.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/1-general/g-7110/#example-bad","text":"1 2 3 4 5 6 7 declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin employee_api . employee_by_id ( r_employee , k_id ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7110/#example-good","text":"1 2 3 4 5 6 7 declare r_employee employee % rowtype ; k_id constant employee . employee_id % type : = 107 ; begin employee_api . employee_by_id ( out_row => r_employee , in_employee_id => k_id ); end ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7120/","text":"G-7120 Always add the name of the program unit to its end keyword. Minor Maintainability Reason It's a good alternative for comments to indicate the end of program units, especially if they are lengthy or nested. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body employee_api is function employee_by_id ( in_employee_id in employee . employee_id % type ) return employee % rowtype is r_employee employee % rowtype ; begin select * into r_employee from employee where employee_id = in_employee_id ; return r_employee ; exception when no_data_found then null ; when too_many_rows then raise ; end ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body employee_api is function employee_by_id ( in_employee_id in employee . employee_id % type ) return employee % rowtype is r_employee employee % rowtype ; begin select * into r_employee from employee where employee_id = in_employee_id ; return r_employee ; exception when no_data_found then null ; when too_many_rows then raise ; end employee_by_id ; end employee_api ; /","title":"G-7120\tAlways add the name of the program unit to its end keyword."},{"location":"4-language-usage/7-stored-objects/1-general/g-7120/#g-7120-always-add-the-name-of-the-program-unit-to-its-end-keyword","text":"Minor Maintainability","title":"G-7120    Always add the name of the program unit to its end keyword."},{"location":"4-language-usage/7-stored-objects/1-general/g-7120/#reason","text":"It's a good alternative for comments to indicate the end of program units, especially if they are lengthy or nested.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/1-general/g-7120/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body employee_api is function employee_by_id ( in_employee_id in employee . employee_id % type ) return employee % rowtype is r_employee employee % rowtype ; begin select * into r_employee from employee where employee_id = in_employee_id ; return r_employee ; exception when no_data_found then null ; when too_many_rows then raise ; end ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7120/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body employee_api is function employee_by_id ( in_employee_id in employee . employee_id % type ) return employee % rowtype is r_employee employee % rowtype ; begin select * into r_employee from employee where employee_id = in_employee_id ; return r_employee ; exception when no_data_found then null ; when too_many_rows then raise ; end employee_by_id ; end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7130/","text":"G-7130: Always use parameters or pull in definitions rather than referencing external variables in a local program unit. Major Maintainability, Reliability, Testability Reason Local procedures and functions offer an excellent way to avoid code redundancy and make your code more readable (and thus more maintainable). Your local program refers, however, an external data structure, i.e., a variable that is declared outside of the local program. Thus, it is acting as a global variable inside the program. This external dependency is hidden, and may cause problems in the future. You should instead add a parameter to the parameter list of this program and pass the value through the list. This technique makes your program more reusable and avoids scoping problems, i.e. the program unit is less tied to particular variables in the program. In addition, unit encapsulation makes maintenance a lot easier and cheaper. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 create or replace package body employee_api is procedure calc_salary ( in_employee_id in employee . employee_id % type ) is r_employee employee % rowtype ; function commission return number is l_commission employee . salary % type : = 0 ; begin if r_employee . commission_pct is not null then l_commission : = r_employee . salary * r_employee . commission_pct ; end if ; return l_commission ; end commission ; begin select * into r_employee from employee where employee_id = in_employee_id ; sys . dbms_output . put_line ( r_employee . salary + commission ()); exception when no_data_found then null ; when too_many_rows then null ; end calc_salary ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 create or replace package body employee_api is procedure calc_salary ( in_employee_id in employee . employee_id % type ) is r_employee employee % rowtype ; function commission ( in_salary in employee . salary % type , in_comm_pct in employee . commission_pct % type ) return number is l_commission employee . salary % type : = 0 ; begin if in_comm_pct is not null then l_commission : = in_salary * in_comm_pct ; end if ; return l_commission ; end commission ; begin select * into r_employee from employee where employee_id = in_employee_id ; sys . dbms_output . put_line ( r_employee . salary + commission ( in_salary => r_employee . salary , in_comm_pct => r_employee . commission_pct ) ); exception when no_data_found then null ; when too_many_rows then null ; end calc_salary ; end employee_api ; /","title":"G-7130: Always use parameters or pull in definitions rather than referencing external variables in a local program unit."},{"location":"4-language-usage/7-stored-objects/1-general/g-7130/#g-7130-always-use-parameters-or-pull-in-definitions-rather-than-referencing-external-variables-in-a-local-program-unit","text":"Major Maintainability, Reliability, Testability","title":"G-7130: Always use parameters or pull in definitions rather than referencing external variables in a local program unit."},{"location":"4-language-usage/7-stored-objects/1-general/g-7130/#reason","text":"Local procedures and functions offer an excellent way to avoid code redundancy and make your code more readable (and thus more maintainable). Your local program refers, however, an external data structure, i.e., a variable that is declared outside of the local program. Thus, it is acting as a global variable inside the program. This external dependency is hidden, and may cause problems in the future. You should instead add a parameter to the parameter list of this program and pass the value through the list. This technique makes your program more reusable and avoids scoping problems, i.e. the program unit is less tied to particular variables in the program. In addition, unit encapsulation makes maintenance a lot easier and cheaper.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/1-general/g-7130/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 create or replace package body employee_api is procedure calc_salary ( in_employee_id in employee . employee_id % type ) is r_employee employee % rowtype ; function commission return number is l_commission employee . salary % type : = 0 ; begin if r_employee . commission_pct is not null then l_commission : = r_employee . salary * r_employee . commission_pct ; end if ; return l_commission ; end commission ; begin select * into r_employee from employee where employee_id = in_employee_id ; sys . dbms_output . put_line ( r_employee . salary + commission ()); exception when no_data_found then null ; when too_many_rows then null ; end calc_salary ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7130/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 create or replace package body employee_api is procedure calc_salary ( in_employee_id in employee . employee_id % type ) is r_employee employee % rowtype ; function commission ( in_salary in employee . salary % type , in_comm_pct in employee . commission_pct % type ) return number is l_commission employee . salary % type : = 0 ; begin if in_comm_pct is not null then l_commission : = in_salary * in_comm_pct ; end if ; return l_commission ; end commission ; begin select * into r_employee from employee where employee_id = in_employee_id ; sys . dbms_output . put_line ( r_employee . salary + commission ( in_salary => r_employee . salary , in_comm_pct => r_employee . commission_pct ) ); exception when no_data_found then null ; when too_many_rows then null ; end calc_salary ; end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7140/","text":"G-7140: Always ensure that locally defined procedures or functions are referenced. Major Maintainability, Reliability Reason This can occur as the result of changes to code over time, but you should make sure that this situation does not reflect a problem. And you should remove the declaration to avoid maintenance errors in the future. You should go through your programs and remove any part of your code that is no longer used. This is a relatively straightforward process for variables and named constants. Simply execute searches for a variable's name in that variable's scope. If you find that the only place it appears is in its declaration, delete the declaration. There is never a better time to review all the steps you took, and to understand the reasons you took them, then immediately upon completion of your program. If you wait, you will find it particularly difficult to remember those parts of the program that were needed at one point, but were rendered unnecessary in the end. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is procedure my_procedure is function my_func return number is k_true constant integer : = 1 ; begin return k_true ; end my_func ; begin null ; end my_procedure ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is procedure my_procedure is function my_func return number is k_true constant integer : = 1 ; begin return k_true ; end my_func ; begin sys . dbms_output . put_line ( my_func ()); end my_procedure ; end my_package ; /","title":"G-7140: Always ensure that locally defined procedures or functions are referenced."},{"location":"4-language-usage/7-stored-objects/1-general/g-7140/#g-7140-always-ensure-that-locally-defined-procedures-or-functions-are-referenced","text":"Major Maintainability, Reliability","title":"G-7140: Always ensure that locally defined procedures or functions are referenced."},{"location":"4-language-usage/7-stored-objects/1-general/g-7140/#reason","text":"This can occur as the result of changes to code over time, but you should make sure that this situation does not reflect a problem. And you should remove the declaration to avoid maintenance errors in the future. You should go through your programs and remove any part of your code that is no longer used. This is a relatively straightforward process for variables and named constants. Simply execute searches for a variable's name in that variable's scope. If you find that the only place it appears is in its declaration, delete the declaration. There is never a better time to review all the steps you took, and to understand the reasons you took them, then immediately upon completion of your program. If you wait, you will find it particularly difficult to remember those parts of the program that were needed at one point, but were rendered unnecessary in the end.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/1-general/g-7140/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is procedure my_procedure is function my_func return number is k_true constant integer : = 1 ; begin return k_true ; end my_func ; begin null ; end my_procedure ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7140/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is procedure my_procedure is function my_func return number is k_true constant integer : = 1 ; begin return k_true ; end my_func ; begin sys . dbms_output . put_line ( my_func ()); end my_procedure ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7150/","text":"G-7150: Try to remove unused parameters. Minor Efficiency, Maintainability Reason You should go through your programs and remove any parameter that is no longer used. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 create or replace package body department_api is function name_by_id ( in_department_id in department . department_id % type , in_manager_id in department . manager_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin << find_department >> begin select department_name into l_department_name from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_department_name : = null ; end find_department ; return l_department_name ; end name_by_id ; end department_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 create or replace package body department_api is function name_by_id ( in_department_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin << find_department >> begin select department_name into l_department_name from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_department_name : = null ; end find_department ; return l_department_name ; end name_by_id ; end department_api ; /","title":"G-7150: Try to remove unused parameters."},{"location":"4-language-usage/7-stored-objects/1-general/g-7150/#g-7150-try-to-remove-unused-parameters","text":"Minor Efficiency, Maintainability","title":"G-7150: Try to remove unused parameters."},{"location":"4-language-usage/7-stored-objects/1-general/g-7150/#reason","text":"You should go through your programs and remove any parameter that is no longer used.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/1-general/g-7150/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 create or replace package body department_api is function name_by_id ( in_department_id in department . department_id % type , in_manager_id in department . manager_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin << find_department >> begin select department_name into l_department_name from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_department_name : = null ; end find_department ; return l_department_name ; end name_by_id ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/1-general/g-7150/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 create or replace package body department_api is function name_by_id ( in_department_id in department . department_id % type ) return department . department_name % type is l_department_name department . department_name % type ; begin << find_department >> begin select department_name into l_department_name from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_department_name : = null ; end find_department ; return l_department_name ; end name_by_id ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7210/","text":"G-7210: Try to keep your packages small. Include only few procedures and functions that are used in the same context. Minor Efficiency, Maintainability Reason The entire package is loaded into memory when the package is called the first time. To optimize memory consumption and keep load time small packages should be kept small but include components that are used together.","title":"G-7210: Try to keep your packages small. Include only few procedures and functions that are used in the same context."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7210/#g-7210-try-to-keep-your-packages-small-include-only-few-procedures-and-functions-that-are-used-in-the-same-context","text":"Minor Efficiency, Maintainability","title":"G-7210: Try to keep your packages small. Include only few procedures and functions that are used in the same context."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7210/#reason","text":"The entire package is loaded into memory when the package is called the first time. To optimize memory consumption and keep load time small packages should be kept small but include components that are used together.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7220/","text":"G-7220: Always use forward declaration for private functions and procedures. Minor Changeability Reason Having forward declarations allows you to order the functions and procedures of the package in a reasonable way. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 create or replace package department_api is procedure del ( in_department_id in department . department_id % type ); end department_api ; / create or replace package body department_api is function does_exist ( in_department_id in department . department_id % type ) return boolean is l_return pls_integer ; begin << check_row_exists >> begin select 1 into l_return from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_return : = 0 ; end check_row_exists ; return l_return = 1 ; end does_exist ; procedure del ( in_department_id in department . department_id % type ) is begin if does_exist ( in_department_id ) then null ; end if ; end del ; end department_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 create or replace package department_api is procedure del ( in_department_id in department . department_id % type ); end department_api ; / create or replace package body department_api is function does_exist ( in_department_id in department . department_id % type ) return boolean ; procedure del ( in_department_id in department . department_id % type ) is begin if does_exist ( in_department_id ) then null ; end if ; end del ; function does_exist ( in_department_id in department . department_id % type ) return boolean is l_return pls_integer ; k_exists constant pls_integer : = 1 ; k_something_wrong constant pls_integer : = 0 ; begin << check_row_exists >> begin select k_exists into l_return from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_return : = k_something_wrong ; end check_row_exists ; return l_return = k_exists ; end does_exist ; end department_api ; /","title":"G-7220: Always use forward declaration for private functions and procedures."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7220/#g-7220-always-use-forward-declaration-for-private-functions-and-procedures","text":"Minor Changeability","title":"G-7220: Always use forward declaration for private functions and procedures."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7220/#reason","text":"Having forward declarations allows you to order the functions and procedures of the package in a reasonable way.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7220/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 create or replace package department_api is procedure del ( in_department_id in department . department_id % type ); end department_api ; / create or replace package body department_api is function does_exist ( in_department_id in department . department_id % type ) return boolean is l_return pls_integer ; begin << check_row_exists >> begin select 1 into l_return from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_return : = 0 ; end check_row_exists ; return l_return = 1 ; end does_exist ; procedure del ( in_department_id in department . department_id % type ) is begin if does_exist ( in_department_id ) then null ; end if ; end del ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7220/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 create or replace package department_api is procedure del ( in_department_id in department . department_id % type ); end department_api ; / create or replace package body department_api is function does_exist ( in_department_id in department . department_id % type ) return boolean ; procedure del ( in_department_id in department . department_id % type ) is begin if does_exist ( in_department_id ) then null ; end if ; end del ; function does_exist ( in_department_id in department . department_id % type ) return boolean is l_return pls_integer ; k_exists constant pls_integer : = 1 ; k_something_wrong constant pls_integer : = 0 ; begin << check_row_exists >> begin select k_exists into l_return from department where department_id = in_department_id ; exception when no_data_found or too_many_rows then l_return : = k_something_wrong ; end check_row_exists ; return l_return = k_exists ; end does_exist ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7230/","text":"G-7230: Avoid declaring global variables public. Major Reliability Reason You should always declare package-level data inside the package body. You can then define \"get and set\" methods (functions and procedures, respectively) in the package specification to provide controlled access to that data. By doing so you can guarantee data integrity, you can change your data structure implementation, and also track access to those data structures. Data structures (scalar variables, collections, cursors) declared in the package specification (not within any specific program) can be referenced directly by any program running in a session with EXECUTE rights to the package. Instead, declare all package-level data in the package body and provide \"get and set\" methods - a function to get the value and a procedure to set the value - in the package specification. Developers then can access the data using these methods - and will automatically follow all rules you set upon data modification. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace package employee_api as k_min_increase constant types . sal_increase_type : = 0 . 01 ; k_max_increase constant types . sal_increase_type : = 0 . 5 ; g_salary_increase types . sal_increase_type : = k_min_increase ; procedure set_salary_increase ( in_increase in types . sal_increase_type ); function salary_increase return types . sal_increase_type ; end employee_api ; / create or replace package body employee_api as procedure set_salary_increase ( in_increase in types . sal_increase_type ) is begin g_salary_increase : = greatest ( least ( in_increase , k_max_increase ) , k_min_increase ); end set_salary_increase ; function salary_increase return types . sal_increase_type is begin return g_salary_increase ; end salary_increase ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 create or replace package employee_api as procedure set_salary_increase ( in_increase in types . sal_increase_type ); function salary_increase return types . sal_increase_type ; end employee_api ; / create or replace package body employee_api as g_salary_increase types . sal_increase_type ( 4 , 2 ); procedure init ; procedure set_salary_increase ( in_increase in types . sal_increase_type ) is begin g_salary_increase : = greatest ( least ( in_increase , constants . max_salary_increase ()) , constants . min_salary_increase ()); end set_salary_increase ; function salary_increase return types . sal_increase_type is begin return g_salary_increase ; end salary_increase ; procedure init is begin g_salary_increase : = constants . min_salary_increase (); end init ; begin init (); end employee_api ; /","title":"G-7230: Avoid declaring global variables public."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7230/#g-7230-avoid-declaring-global-variables-public","text":"Major Reliability","title":"G-7230: Avoid declaring global variables public."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7230/#reason","text":"You should always declare package-level data inside the package body. You can then define \"get and set\" methods (functions and procedures, respectively) in the package specification to provide controlled access to that data. By doing so you can guarantee data integrity, you can change your data structure implementation, and also track access to those data structures. Data structures (scalar variables, collections, cursors) declared in the package specification (not within any specific program) can be referenced directly by any program running in a session with EXECUTE rights to the package. Instead, declare all package-level data in the package body and provide \"get and set\" methods - a function to get the value and a procedure to set the value - in the package specification. Developers then can access the data using these methods - and will automatically follow all rules you set upon data modification.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7230/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace package employee_api as k_min_increase constant types . sal_increase_type : = 0 . 01 ; k_max_increase constant types . sal_increase_type : = 0 . 5 ; g_salary_increase types . sal_increase_type : = k_min_increase ; procedure set_salary_increase ( in_increase in types . sal_increase_type ); function salary_increase return types . sal_increase_type ; end employee_api ; / create or replace package body employee_api as procedure set_salary_increase ( in_increase in types . sal_increase_type ) is begin g_salary_increase : = greatest ( least ( in_increase , k_max_increase ) , k_min_increase ); end set_salary_increase ; function salary_increase return types . sal_increase_type is begin return g_salary_increase ; end salary_increase ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7230/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 create or replace package employee_api as procedure set_salary_increase ( in_increase in types . sal_increase_type ); function salary_increase return types . sal_increase_type ; end employee_api ; / create or replace package body employee_api as g_salary_increase types . sal_increase_type ( 4 , 2 ); procedure init ; procedure set_salary_increase ( in_increase in types . sal_increase_type ) is begin g_salary_increase : = greatest ( least ( in_increase , constants . max_salary_increase ()) , constants . min_salary_increase ()); end set_salary_increase ; function salary_increase return types . sal_increase_type is begin return g_salary_increase ; end salary_increase ; procedure init is begin g_salary_increase : = constants . min_salary_increase (); end init ; begin init (); end employee_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7240/","text":"G-7240: Avoid using an IN OUT parameter as IN or OUT only. Major Efficiency, Maintainability Reason By showing the mode of parameters, you help the reader. If you do not specify a parameter mode, the default mode is in . Explicitly showing the mode indication of all parameters is a more assertive action than simply taking the default mode. Anyone reviewing the code later will be more confident that you intended the parameter mode to be in / out . Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 create or replace package body employee_up is procedure rcv_emp ( io_first_name in out employee . first_name % type , io_last_name in out employee . last_name % type , io_email in out employee . email % type , io_phone_number in out employee . phone_number % type , io_hire_date in out employee . hire_date % type , io_job_id in out employee . job_id % type , io_salary in out employee . salary % type , io_commission_pct in out employee . commission_pct % type , io_manager_id in out employee . manager_id % type , io_department_id in out employee . department_id % type , in_wait integer ) is l_status pls_integer ; k_pipe_name constant string ( 6 char ) : = 'mypipe' ; k_ok constant pls_integer : = 1 ; begin -- receive next message and unpack for each column. l_status : = sys . dbms_pipe . receive_message ( pipename => k_pipe_name , timeout => in_wait ); if l_status = k_ok then sys . dbms_pipe . unpack_message ( io_first_name ); sys . dbms_pipe . unpack_message ( io_last_name ); sys . dbms_pipe . unpack_message ( io_email ); sys . dbms_pipe . unpack_message ( io_phone_number ); sys . dbms_pipe . unpack_message ( io_hire_date ); sys . dbms_pipe . unpack_message ( io_job_id ); sys . dbms_pipe . unpack_message ( io_salary ); sys . dbms_pipe . unpack_message ( io_commission_pct ); sys . dbms_pipe . unpack_message ( io_manager_id ); sys . dbms_pipe . unpack_message ( io_department_id ); end if ; end rcv_emp ; end employee_up ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 create or replace package body employee_up is procedure rcv_emp ( out_first_name out employee . first_name % type , out_last_name out employee . last_name % type , out_email out employee . email % type , out_phone_number out employee . phone_number % type , out_hire_date out employee . hire_date % type , out_job_id out employee . job_id % type , out_salary out employee . salary % type , out_commission_pct out employee . commission_pct % type , out_manager_id out employee . manager_id % type , out_department_id out employee . department_id % type , in_wait in integer ) is l_status pls_integer ; k_pipe_name constant string ( 6 char ) : = 'mypipe' ; k_ok constant pls_integer : = 1 ; begin -- receive next message and unpack for each column. l_status : = sys . dbms_pipe . receive_message ( pipename => k_pipe_name , timeout => in_wait ); if l_status = k_ok then sys . dbms_pipe . unpack_message ( out_first_name ); sys . dbms_pipe . unpack_message ( out_last_name ); sys . dbms_pipe . unpack_message ( out_email ); sys . dbms_pipe . unpack_message ( out_phone_number ); sys . dbms_pipe . unpack_message ( out_hire_date ); sys . dbms_pipe . unpack_message ( out_job_id ); sys . dbms_pipe . unpack_message ( out_salary ); sys . dbms_pipe . unpack_message ( out_commission_pct ); sys . dbms_pipe . unpack_message ( out_manager_id ); sys . dbms_pipe . unpack_message ( out_department_id ); end if ; end rcv_emp ; end employee_up ; /","title":"G-7240: Avoid using an IN OUT parameter as IN or OUT only."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7240/#g-7240-avoid-using-an-in-out-parameter-as-in-or-out-only","text":"Major Efficiency, Maintainability","title":"G-7240: Avoid using an IN OUT parameter as IN or OUT only."},{"location":"4-language-usage/7-stored-objects/2-packages/g-7240/#reason","text":"By showing the mode of parameters, you help the reader. If you do not specify a parameter mode, the default mode is in . Explicitly showing the mode indication of all parameters is a more assertive action than simply taking the default mode. Anyone reviewing the code later will be more confident that you intended the parameter mode to be in / out .","title":"Reason"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7240/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 create or replace package body employee_up is procedure rcv_emp ( io_first_name in out employee . first_name % type , io_last_name in out employee . last_name % type , io_email in out employee . email % type , io_phone_number in out employee . phone_number % type , io_hire_date in out employee . hire_date % type , io_job_id in out employee . job_id % type , io_salary in out employee . salary % type , io_commission_pct in out employee . commission_pct % type , io_manager_id in out employee . manager_id % type , io_department_id in out employee . department_id % type , in_wait integer ) is l_status pls_integer ; k_pipe_name constant string ( 6 char ) : = 'mypipe' ; k_ok constant pls_integer : = 1 ; begin -- receive next message and unpack for each column. l_status : = sys . dbms_pipe . receive_message ( pipename => k_pipe_name , timeout => in_wait ); if l_status = k_ok then sys . dbms_pipe . unpack_message ( io_first_name ); sys . dbms_pipe . unpack_message ( io_last_name ); sys . dbms_pipe . unpack_message ( io_email ); sys . dbms_pipe . unpack_message ( io_phone_number ); sys . dbms_pipe . unpack_message ( io_hire_date ); sys . dbms_pipe . unpack_message ( io_job_id ); sys . dbms_pipe . unpack_message ( io_salary ); sys . dbms_pipe . unpack_message ( io_commission_pct ); sys . dbms_pipe . unpack_message ( io_manager_id ); sys . dbms_pipe . unpack_message ( io_department_id ); end if ; end rcv_emp ; end employee_up ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7240/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 create or replace package body employee_up is procedure rcv_emp ( out_first_name out employee . first_name % type , out_last_name out employee . last_name % type , out_email out employee . email % type , out_phone_number out employee . phone_number % type , out_hire_date out employee . hire_date % type , out_job_id out employee . job_id % type , out_salary out employee . salary % type , out_commission_pct out employee . commission_pct % type , out_manager_id out employee . manager_id % type , out_department_id out employee . department_id % type , in_wait in integer ) is l_status pls_integer ; k_pipe_name constant string ( 6 char ) : = 'mypipe' ; k_ok constant pls_integer : = 1 ; begin -- receive next message and unpack for each column. l_status : = sys . dbms_pipe . receive_message ( pipename => k_pipe_name , timeout => in_wait ); if l_status = k_ok then sys . dbms_pipe . unpack_message ( out_first_name ); sys . dbms_pipe . unpack_message ( out_last_name ); sys . dbms_pipe . unpack_message ( out_email ); sys . dbms_pipe . unpack_message ( out_phone_number ); sys . dbms_pipe . unpack_message ( out_hire_date ); sys . dbms_pipe . unpack_message ( out_job_id ); sys . dbms_pipe . unpack_message ( out_salary ); sys . dbms_pipe . unpack_message ( out_commission_pct ); sys . dbms_pipe . unpack_message ( out_manager_id ); sys . dbms_pipe . unpack_message ( out_department_id ); end if ; end rcv_emp ; end employee_up ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7250/","text":"G-7250: Always use NOCOPY when appropriate Minor Efficiency Reason When we pass OUT or IN OUT parameters in PL/SQL the Oracle Database supports two methods of passing data: By Value and By Reference. The default, By Value, will copy all the data passed into a temporary buffer. This buffer is passed to the procedure and used during the life of the procedure. Then when processing is complete, the data in the buffer is copied to the original variable. Passing By Reference is achieved by the NOCOPY hint, and, in contrast, it will pass a reference to the variable's data. Think of a pointer in the C language. This means that no temporary buffer is required. When passing significant amounts of data, the effects of passing values by reference can be significant. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure add_message ( p_msg in out message_tbl_type , p_message_text in varchar2 , p_severity in varchar2 default 'E' ) is l_index pls_integer ; begin l_index : = p_msg . count + 1 ; p_msg ( l_index ). message_text : = p_message_text ; p_msg ( l_index ). severity : = p_severity ; end add_message ; Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure add_message ( p_msg in out nocopy message_tbl_type , p_message_text in varchar2 , p_severity in varchar2 default 'E' ) is l_index pls_integer ; begin l_index : = p_msg . count + 1 ; p_msg ( l_index ). message_text : = p_message_text ; p_msg ( l_index ). severity : = p_severity ; end add_message ;","title":"G-7250: Always use NOCOPY when appropriate"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7250/#g-7250-always-use-nocopy-when-appropriate","text":"Minor Efficiency","title":"G-7250: Always use NOCOPY when appropriate"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7250/#reason","text":"When we pass OUT or IN OUT parameters in PL/SQL the Oracle Database supports two methods of passing data: By Value and By Reference. The default, By Value, will copy all the data passed into a temporary buffer. This buffer is passed to the procedure and used during the life of the procedure. Then when processing is complete, the data in the buffer is copied to the original variable. Passing By Reference is achieved by the NOCOPY hint, and, in contrast, it will pass a reference to the variable's data. Think of a pointer in the C language. This means that no temporary buffer is required. When passing significant amounts of data, the effects of passing values by reference can be significant.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7250/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure add_message ( p_msg in out message_tbl_type , p_message_text in varchar2 , p_severity in varchar2 default 'E' ) is l_index pls_integer ; begin l_index : = p_msg . count + 1 ; p_msg ( l_index ). message_text : = p_message_text ; p_msg ( l_index ). severity : = p_severity ; end add_message ;","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/2-packages/g-7250/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure add_message ( p_msg in out nocopy message_tbl_type , p_message_text in varchar2 , p_severity in varchar2 default 'E' ) is l_index pls_integer ; begin l_index : = p_msg . count + 1 ; p_msg ( l_index ). message_text : = p_message_text ; p_msg ( l_index ). severity : = p_severity ; end add_message ;","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7310/","text":"G-7310: Avoid standalone procedures \u2013 put your procedures in packages. Minor Maintainability Reason Use packages to structure your code, combine procedures and functions which belong together. Package bodies may be changed and compiled without invalidating other packages. This is major advantage compared to standalone procedures and functions. Example (bad) 1 2 3 4 5 create or replace procedure my_procedure is begin null ; end my_procedure ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 create or replace package my_package is procedure my_procedure ; end my_package ; / create or replace package body my_package is procedure my_procedure is begin null ; end my_procedure ; end my_package ; /","title":"G-7310: Avoid standalone procedures \u2013 put your procedures in packages."},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7310/#g-7310-avoid-standalone-procedures-put-your-procedures-in-packages","text":"Minor Maintainability","title":"G-7310: Avoid standalone procedures \u2013 put your procedures in packages."},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7310/#reason","text":"Use packages to structure your code, combine procedures and functions which belong together. Package bodies may be changed and compiled without invalidating other packages. This is major advantage compared to standalone procedures and functions.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7310/#example-bad","text":"1 2 3 4 5 create or replace procedure my_procedure is begin null ; end my_procedure ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7310/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 create or replace package my_package is procedure my_procedure ; end my_package ; / create or replace package body my_package is procedure my_procedure is begin null ; end my_procedure ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7320/","text":"G-7320: Avoid using RETURN statements in a PROCEDURE. Major Maintainability, Testability Reason Use of the return statement is legal within a procedure in PL/SQL, but it is very similar to a goto , which means you end up with poorly structured code that is hard to debug and maintain. A good general rule to follow as you write your PL/SQL programs is \"one way in and one way out\". In other words, there should be just one way to enter or call a program, and there should be one way out, one exit path from a program (or loop) on successful termination. By following this rule, you end up with code that is much easier to trace, debug, and maintain. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body my_package is procedure my_procedure is l_idx simple_integer : = 1 ; k_modulo constant simple_integer : = 7 ; begin << mod7_loop >> loop if mod ( l_idx , k_modulo ) = 0 then return ; end if ; l_idx : = l_idx + 1 ; end loop mod7_loop ; end my_procedure ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create or replace package body my_package is procedure my_procedure is l_idx simple_integer : = 1 ; k_modulo constant simple_integer : = 7 ; begin << mod7_loop >> loop exit mod7_loop when mod ( l_idx , k_modulo ) = 0 ; l_idx : = l_idx + 1 ; end loop mod7_loop ; end my_procedure ; end my_package ; /","title":"G-7320: Avoid using RETURN statements in a PROCEDURE."},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7320/#g-7320-avoid-using-return-statements-in-a-procedure","text":"Major Maintainability, Testability","title":"G-7320: Avoid using RETURN statements in a PROCEDURE."},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7320/#reason","text":"Use of the return statement is legal within a procedure in PL/SQL, but it is very similar to a goto , which means you end up with poorly structured code that is hard to debug and maintain. A good general rule to follow as you write your PL/SQL programs is \"one way in and one way out\". In other words, there should be just one way to enter or call a program, and there should be one way out, one exit path from a program (or loop) on successful termination. By following this rule, you end up with code that is much easier to trace, debug, and maintain.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7320/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body my_package is procedure my_procedure is l_idx simple_integer : = 1 ; k_modulo constant simple_integer : = 7 ; begin << mod7_loop >> loop if mod ( l_idx , k_modulo ) = 0 then return ; end if ; l_idx : = l_idx + 1 ; end loop mod7_loop ; end my_procedure ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/3-procedures/g-7320/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 create or replace package body my_package is procedure my_procedure is l_idx simple_integer : = 1 ; k_modulo constant simple_integer : = 7 ; begin << mod7_loop >> loop exit mod7_loop when mod ( l_idx , k_modulo ) = 0 ; l_idx : = l_idx + 1 ; end loop mod7_loop ; end my_procedure ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7410/","text":"G-7410: Avoid standalone functions \u2013 put your functions in packages. Minor Maintainability Reason Use packages to structure your code, combine procedures and functions which belong together. Package bodies may be changed and compiled without invalidating other packages. This is major advantage compared to standalone procedures and functions. Example (bad) 1 2 3 4 5 create or replace function my_function return varchar2 is begin return null ; end my_function ; / Example (good) 1 2 3 4 5 6 7 create or replace package body my_package is function my_function return varchar2 is begin return null ; end my_function ; end my_package ; /","title":"G-7410: Avoid standalone functions \u2013 put your functions in packages."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7410/#g-7410-avoid-standalone-functions-put-your-functions-in-packages","text":"Minor Maintainability","title":"G-7410: Avoid standalone functions \u2013 put your functions in packages."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7410/#reason","text":"Use packages to structure your code, combine procedures and functions which belong together. Package bodies may be changed and compiled without invalidating other packages. This is major advantage compared to standalone procedures and functions.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7410/#example-bad","text":"1 2 3 4 5 create or replace function my_function return varchar2 is begin return null ; end my_function ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7410/#example-good","text":"1 2 3 4 5 6 7 create or replace package body my_package is function my_function return varchar2 is begin return null ; end my_function ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7420/","text":"G-7420: Always make the RETURN statement the last statement of your function. Major Maintainability Reason The reader expects the return statement to be the last statement of a function. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body my_package is function my_function ( in_from in pls_integer , in_to in pls_integer ) return pls_integer is l_ret pls_integer ; begin l_ret : = in_from ; << for_loop >> for i in in_from .. in_to loop l_ret : = l_ret + i ; if i = in_to then return l_ret ; end if ; end loop for_loop ; end my_function ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is function my_function ( in_from in pls_integer , in_to in pls_integer ) return pls_integer is l_ret pls_integer ; begin l_ret : = in_from ; << for_loop >> for i in in_from .. in_to loop l_ret : = l_ret + i ; end loop for_loop ; return l_ret ; end my_function ; end my_package ; /","title":"G-7420: Always make the RETURN statement the last statement of your function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7420/#g-7420-always-make-the-return-statement-the-last-statement-of-your-function","text":"Major Maintainability","title":"G-7420: Always make the RETURN statement the last statement of your function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7420/#reason","text":"The reader expects the return statement to be the last statement of a function.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7420/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create or replace package body my_package is function my_function ( in_from in pls_integer , in_to in pls_integer ) return pls_integer is l_ret pls_integer ; begin l_ret : = in_from ; << for_loop >> for i in in_from .. in_to loop l_ret : = l_ret + i ; if i = in_to then return l_ret ; end if ; end loop for_loop ; end my_function ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7420/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is function my_function ( in_from in pls_integer , in_to in pls_integer ) return pls_integer is l_ret pls_integer ; begin l_ret : = in_from ; << for_loop >> for i in in_from .. in_to loop l_ret : = l_ret + i ; end loop for_loop ; return l_ret ; end my_function ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/","text":"G-7430: Try to use no more than one RETURN statement within a function. Major Will have a medium/potential impact on the maintenance cost. Maintainability, Testability Reason A function should have a single point of entry as well as a single exit-point. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; begin if in_value = k_yes then return true ; else return false ; end if ; end my_function ; end my_package ; / Example (better) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; l_ret boolean ; begin if in_value = k_yes then l_ret : = true ; else l_ret : = false ; end if ; return l_ret ; end my_function ; end my_package ; / Example (good) 1 2 3 4 5 6 7 8 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; begin return in_value = k_yes ; end my_function ; end my_package ; /","title":"G-7430: Try to use no more than one RETURN statement within a function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/#g-7430-try-to-use-no-more-than-one-return-statement-within-a-function","text":"Major Will have a medium/potential impact on the maintenance cost. Maintainability, Testability","title":"G-7430: Try to use no more than one RETURN statement within a function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/#reason","text":"A function should have a single point of entry as well as a single exit-point.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; begin if in_value = k_yes then return true ; else return false ; end if ; end my_function ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/#example-better","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; l_ret boolean ; begin if in_value = k_yes then l_ret : = true ; else l_ret : = false ; end if ; return l_ret ; end my_function ; end my_package ; /","title":"Example (better)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7430/#example-good","text":"1 2 3 4 5 6 7 8 create or replace package body my_package is function my_function ( in_value in pls_integer ) return boolean is k_yes constant pls_integer : = 1 ; begin return in_value = k_yes ; end my_function ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7440/","text":"G-7440: Never use OUT parameters to return values from a function. Major Reusability Reason A function should return all its data through the RETURN clause. Having an OUT parameter prohibits usage of a function within SQL statements. Example (bad) 1 2 3 4 5 6 7 8 create or replace package body my_package is function my_function ( out_date out date ) return boolean is begin out_date : = sysdate ; return true ; end my_function ; end my_package ; / Example (good) 1 2 3 4 5 6 7 create or replace package body my_package is function my_function return date is begin return sysdate ; end my_function ; end my_package ; /","title":"G-7440: Never use OUT parameters to return values from a function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7440/#g-7440-never-use-out-parameters-to-return-values-from-a-function","text":"Major Reusability","title":"G-7440: Never use OUT parameters to return values from a function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7440/#reason","text":"A function should return all its data through the RETURN clause. Having an OUT parameter prohibits usage of a function within SQL statements.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7440/#example-bad","text":"1 2 3 4 5 6 7 8 create or replace package body my_package is function my_function ( out_date out date ) return boolean is begin out_date : = sysdate ; return true ; end my_function ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7440/#example-good","text":"1 2 3 4 5 6 7 create or replace package body my_package is function my_function return date is begin return sysdate ; end my_function ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7450/","text":"G-7450: Never return a NULL value from a BOOLEAN function. Major Reliability, Testability Reason If a boolean function returns null, the caller has do deal with it. This makes the usage cumbersome and more error-prone. Example (bad) 1 2 3 4 5 6 7 create or replace package body my_package is function my_function return boolean is begin return null ; end my_function ; end my_package ; / Example (good) 1 2 3 4 5 6 7 create or replace package body my_package is function my_function return boolean is begin return true ; end my_function ; end my_package ; /","title":"G-7450: Never return a NULL value from a BOOLEAN function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7450/#g-7450-never-return-a-null-value-from-a-boolean-function","text":"Major Reliability, Testability","title":"G-7450: Never return a NULL value from a BOOLEAN function."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7450/#reason","text":"If a boolean function returns null, the caller has do deal with it. This makes the usage cumbersome and more error-prone.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7450/#example-bad","text":"1 2 3 4 5 6 7 create or replace package body my_package is function my_function return boolean is begin return null ; end my_function ; end my_package ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7450/#example-good","text":"1 2 3 4 5 6 7 create or replace package body my_package is function my_function return boolean is begin return true ; end my_function ; end my_package ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7460/","text":"G-7460: Try to define your packaged/standalone function deterministic if appropriate. Major Efficiency Reason A deterministic function (always return same result for identical parameters) which is defined to be deterministic will be executed once per different parameter within a SQL statement whereas if the function is not defined to be deterministic it is executed once per result row. Example (bad) 1 2 3 4 5 create or replace package department_api is function name_by_id ( in_department_id in departments . department_id % type ) return departments . department_name % type ; end department_api ; / Example (good) 1 2 3 4 5 create or replace package department_api is function name_by_id ( in_department_id in departments . department_id % type ) return departments . department_name % type deterministic ; end department_api ; /","title":"G-7460: Try to define your packaged/standalone function deterministic if appropriate."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7460/#g-7460-try-to-define-your-packagedstandalone-function-deterministic-if-appropriate","text":"Major Efficiency","title":"G-7460: Try to define your packaged/standalone function deterministic if appropriate."},{"location":"4-language-usage/7-stored-objects/4-functions/g-7460/#reason","text":"A deterministic function (always return same result for identical parameters) which is defined to be deterministic will be executed once per different parameter within a SQL statement whereas if the function is not defined to be deterministic it is executed once per result row.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7460/#example-bad","text":"1 2 3 4 5 create or replace package department_api is function name_by_id ( in_department_id in departments . department_id % type ) return departments . department_name % type ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/4-functions/g-7460/#example-good","text":"1 2 3 4 5 create or replace package department_api is function name_by_id ( in_department_id in departments . department_id % type ) return departments . department_name % type deterministic ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/5-oracle-supplied-packages/g-7510/","text":"G-7510: Always prefix ORACLE supplied packages with owner schema name. Major Security Reason The signature of oracle-supplied packages is well known and therefore it is quite easy to provide packages with the same name as those from oracle doing something completely different without you noticing it. Example (bad) 1 2 3 4 5 6 declare k_hello_world constant string ( 11 char ) : = 'Hello World' ; begin dbms_output . put_line ( k_hello_world ); end ; / Example (good) 1 2 3 4 5 6 declare k_hello_world constant string ( 11 char ) : = 'Hello World' ; begin sys . dbms_output . put_line ( k_hello_world ); end ; /","title":"G-7510: Always prefix ORACLE supplied packages with owner schema name."},{"location":"4-language-usage/7-stored-objects/5-oracle-supplied-packages/g-7510/#g-7510-always-prefix-oracle-supplied-packages-with-owner-schema-name","text":"Major Security","title":"G-7510: Always prefix ORACLE supplied packages with owner schema name."},{"location":"4-language-usage/7-stored-objects/5-oracle-supplied-packages/g-7510/#reason","text":"The signature of oracle-supplied packages is well known and therefore it is quite easy to provide packages with the same name as those from oracle doing something completely different without you noticing it.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/5-oracle-supplied-packages/g-7510/#example-bad","text":"1 2 3 4 5 6 declare k_hello_world constant string ( 11 char ) : = 'Hello World' ; begin dbms_output . put_line ( k_hello_world ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/5-oracle-supplied-packages/g-7510/#example-good","text":"1 2 3 4 5 6 declare k_hello_world constant string ( 11 char ) : = 'Hello World' ; begin sys . dbms_output . put_line ( k_hello_world ); end ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/6-object-types/object-types/","text":"Object Types There are no object type-specific recommendations to be defined at the time of writing.","title":"Object Types"},{"location":"4-language-usage/7-stored-objects/6-object-types/object-types/#object-types","text":"There are no object type-specific recommendations to be defined at the time of writing.","title":"Object Types"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7710/","text":"G-7710: Avoid cascading triggers. Major Maintainability, Testability Reason Having triggers that act on other tables in a way that causes triggers on that table to fire lead to obscure behavior. Note that the example below is an anti-pattern as Flashback Data Archive should be used for row history instead of history tables. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 create or replace trigger dept_br_u before update on department for each row begin insert into department_hist ( department_id , department_name , manager_id , location_id , modification_date ) values (: old . department_id ,: old . department_name ,: old . manager_id ,: old . location_id , sysdate ); end ; / create or replace trigger dept_hist_br_i before insert on department_hist for each row begin insert into department_log ( department_id , department_name , modification_date ) values (: new . department_id ,: new . department_name , sysdate ); end ; / Example (good) Note: Again, don't use triggers to maintain history, use Flashback Data Archive instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace trigger dept_br_u before update on department for each row begin insert into department_hist ( department_id , department_name , manager_id , location_id , modification_date ) values (: old . department_id ,: old . department_name ,: old . manager_id ,: old . location_id , sysdate ); insert into department_log ( department_id , department_name , modification_date ) values (: old . department_id ,: old . department_name , sysdate ); end ; /","title":"G-7710: Avoid cascading triggers."},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7710/#g-7710-avoid-cascading-triggers","text":"Major Maintainability, Testability","title":"G-7710: Avoid cascading triggers."},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7710/#reason","text":"Having triggers that act on other tables in a way that causes triggers on that table to fire lead to obscure behavior. Note that the example below is an anti-pattern as Flashback Data Archive should be used for row history instead of history tables.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7710/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 create or replace trigger dept_br_u before update on department for each row begin insert into department_hist ( department_id , department_name , manager_id , location_id , modification_date ) values (: old . department_id ,: old . department_name ,: old . manager_id ,: old . location_id , sysdate ); end ; / create or replace trigger dept_hist_br_i before insert on department_hist for each row begin insert into department_log ( department_id , department_name , modification_date ) values (: new . department_id ,: new . department_name , sysdate ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7710/#example-good","text":"Note: Again, don't use triggers to maintain history, use Flashback Data Archive instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 create or replace trigger dept_br_u before update on department for each row begin insert into department_hist ( department_id , department_name , manager_id , location_id , modification_date ) values (: old . department_id ,: old . department_name ,: old . manager_id ,: old . location_id , sysdate ); insert into department_log ( department_id , department_name , modification_date ) values (: old . department_id ,: old . department_name , sysdate ); end ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7720/","text":"G-7720: Avoid triggers for business logic Minor Efficiency, Maintainability Reason When business logic is part of a trigger, it becomes obfuscated. In general, maintainers don't look for code in a trigger. More importantly, if the code on the trigger does SQL or worse PL/SQL access, this becomes a context switch or even a nested loop that could significantly affect performance.","title":"G-7720: Avoid triggers for business logic"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7720/#g-7720-avoid-triggers-for-business-logic","text":"Minor Efficiency, Maintainability","title":"G-7720: Avoid triggers for business logic"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7720/#reason","text":"When business logic is part of a trigger, it becomes obfuscated. In general, maintainers don't look for code in a trigger. More importantly, if the code on the trigger does SQL or worse PL/SQL access, this becomes a context switch or even a nested loop that could significantly affect performance.","title":"Reason"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7730/","text":"G-7730: If using triggers, use compound triggers Minor Efficiency, Maintainability Reason A single trigger is better than several Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace trigger dept_i_trg before insert on dept for each row begin : new . id = dept_seq . nextval ; : new . created_on : = sysdate ; : new . created_by : = sys_context ( 'userenv' , 'session_user' ); end ; / create or replace trigger dept_u_trg before update on dept for each row begin : new . updated_on : = sysdate ; : new . updated_by : = sys_context ( 'userenv' , 'session_user' ); end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace trigger dept_ui_trg before insert or update on dept for each row begin if inserting then : new . id = dept_seq . nextval ; : new . created_on : = sysdate ; : new . created_by : = sys_context ( 'userenv' , 'session_user' ); elsif updating then : new . updated_on : = sysdate ; : new . updated_by : = sys_context ( 'userenv' , 'session_user' ); end if ; end ; /","title":"G-7730: If using triggers, use compound triggers"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7730/#g-7730-if-using-triggers-use-compound-triggers","text":"Minor Efficiency, Maintainability","title":"G-7730: If using triggers, use compound triggers"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7730/#reason","text":"A single trigger is better than several","title":"Reason"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7730/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace trigger dept_i_trg before insert on dept for each row begin : new . id = dept_seq . nextval ; : new . created_on : = sysdate ; : new . created_by : = sys_context ( 'userenv' , 'session_user' ); end ; / create or replace trigger dept_u_trg before update on dept for each row begin : new . updated_on : = sysdate ; : new . updated_by : = sys_context ( 'userenv' , 'session_user' ); end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/7-triggers/g-7730/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace trigger dept_ui_trg before insert or update on dept for each row begin if inserting then : new . id = dept_seq . nextval ; : new . created_on : = sysdate ; : new . created_by : = sys_context ( 'userenv' , 'session_user' ); elsif updating then : new . updated_on : = sysdate ; : new . updated_by : = sys_context ( 'userenv' , 'session_user' ); end if ; end ; /","title":"Example (good)"},{"location":"4-language-usage/7-stored-objects/8-sequences/g-7810/","text":"G-7810: Never use SQL inside PL/SQL to read sequence numbers (or SYSDATE). Major Efficiency, Maintainability Reason Since ORACLE 11g it is no longer needed to use a SELECT statement to read a sequence (which would imply a context switch). Example (bad) 1 2 3 4 5 6 7 8 declare l_sequence_number employees . emloyee_id % type ; begin select employees_seq . nextval into l_sequence_number from dual ; end ; / Example (good) 1 2 3 4 5 6 declare l_sequence_number employees . emloyee_id % type ; begin l_sequence_number : = employees_seq . nextval ; end ; /","title":"G-7810: Never use SQL inside PL/SQL to read sequence numbers (or SYSDATE)."},{"location":"4-language-usage/7-stored-objects/8-sequences/g-7810/#g-7810-never-use-sql-inside-plsql-to-read-sequence-numbers-or-sysdate","text":"Major Efficiency, Maintainability","title":"G-7810: Never use SQL inside PL/SQL to read sequence numbers (or SYSDATE)."},{"location":"4-language-usage/7-stored-objects/8-sequences/g-7810/#reason","text":"Since ORACLE 11g it is no longer needed to use a SELECT statement to read a sequence (which would imply a context switch).","title":"Reason"},{"location":"4-language-usage/7-stored-objects/8-sequences/g-7810/#example-bad","text":"1 2 3 4 5 6 7 8 declare l_sequence_number employees . emloyee_id % type ; begin select employees_seq . nextval into l_sequence_number from dual ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/7-stored-objects/8-sequences/g-7810/#example-good","text":"1 2 3 4 5 6 declare l_sequence_number employees . emloyee_id % type ; begin l_sequence_number : = employees_seq . nextval ; end ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8110/","text":"G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row. Major Efficiency Reason If you do a select count(*), all rows will be read according to the where clause even if only the availability of data is of interest. This could have a big performance impact. If we do a select count(*) where rownum = 1 there is also some overhead as there are two context switches between the PL/SQL and SQL engines. See the following example for a better solution. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 declare l_count pls_integer ; k_zero constant simple_integer : = 0 ; k_salary constant employee . salary % type : = 5000 ; begin select count ( * ) into l_count from employee where salary < k_salary ; if l_count > k_zero then << emp_loop >> for r_emp in ( select employee_id from employee ) loop if r_emp . salary < k_salary then my_package . my_proc ( in_employee_id => r_emp . employee_id ); end if ; end loop emp_loop ; end if ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare k_salary constant employee . salary % type : = 5000 ; begin << emp_loop >> for r_emp in ( select e1 . employee_id from employee e1 where exists ( select e2 . salary from employee e2 where e2 . salary < k_salary )) loop my_package . my_proc ( in_employee_id => r_emp . employee_id ); end loop emp_loop ; end ; /","title":"G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row."},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8110/#g-8110-never-use-select-count-if-you-are-only-interested-in-the-existence-of-a-row","text":"Major Efficiency","title":"G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row."},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8110/#reason","text":"If you do a select count(*), all rows will be read according to the where clause even if only the availability of data is of interest. This could have a big performance impact. If we do a select count(*) where rownum = 1 there is also some overhead as there are two context switches between the PL/SQL and SQL engines. See the following example for a better solution.","title":"Reason"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8110/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 declare l_count pls_integer ; k_zero constant simple_integer : = 0 ; k_salary constant employee . salary % type : = 5000 ; begin select count ( * ) into l_count from employee where salary < k_salary ; if l_count > k_zero then << emp_loop >> for r_emp in ( select employee_id from employee ) loop if r_emp . salary < k_salary then my_package . my_proc ( in_employee_id => r_emp . employee_id ); end if ; end loop emp_loop ; end if ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8110/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 declare k_salary constant employee . salary % type : = 5000 ; begin << emp_loop >> for r_emp in ( select e1 . employee_id from employee e1 where exists ( select e2 . salary from employee e2 where e2 . salary < k_salary )) loop my_package . my_proc ( in_employee_id => r_emp . employee_id ); end loop emp_loop ; end ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8120/","text":"G-8120: Never check existence of a row to decide whether to create it or not. Major Efficiency, Reliability Reason The result of an existence check is a snapshot of the current situation. You never know whether in the time between the check and the (insert) action someone else has decided to create a row with the values you checked. Therefore, you should only rely on constraints when it comes to preventioin of duplicate records. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body department_api is procedure ins ( in_r_department in department % rowtype ) is l_count pls_integer ; begin select count ( * ) into l_count from department where department_id = in_r_department . department_id ; if l_count = 0 then insert into department values in_r_department ; end if ; end ins ; end department_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 create or replace package body department_api is procedure ins ( in_r_department in department % rowtype ) is begin insert into department values in_r_department ; exception when dup_val_on_index then null ; -- handle exception end ins ; end department_api ; /","title":"G-8120: Never check existence of a row to decide whether to create it or not."},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8120/#g-8120-never-check-existence-of-a-row-to-decide-whether-to-create-it-or-not","text":"Major Efficiency, Reliability","title":"G-8120: Never check existence of a row to decide whether to create it or not."},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8120/#reason","text":"The result of an existence check is a snapshot of the current situation. You never know whether in the time between the check and the (insert) action someone else has decided to create a row with the values you checked. Therefore, you should only rely on constraints when it comes to preventioin of duplicate records.","title":"Reason"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8120/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create or replace package body department_api is procedure ins ( in_r_department in department % rowtype ) is l_count pls_integer ; begin select count ( * ) into l_count from department where department_id = in_r_department . department_id ; if l_count = 0 then insert into department values in_r_department ; end if ; end ins ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/1-checking-the-number-of-rows/g-8120/#example-good","text":"1 2 3 4 5 6 7 8 9 10 create or replace package body department_api is procedure ins ( in_r_department in department % rowtype ) is begin insert into department values in_r_department ; exception when dup_val_on_index then null ; -- handle exception end ins ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/2-access-objects-of-foreign-application-schemas/g-8210/","text":"G-8210: Always use synonyms when accessing objects of another application schema. Major Changeability, Maintainability Reason If a connection is needed to a table that is placed in a foreign schema, using synonyms is a good choice. If there are structural changes to that table (e.g. the table name changes or the table changes into another schema) only the synonym has to be changed no changes to the package are needed (single point of change). If you only have read access for a table inside another schema, or there is another reason that does not allow you to change data in this table, you can switch the synonym to a table in your own schema. This is also good practice for testers working on test systems. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare l_product_name oe . product . product_name % type ; k_price constant oe . product . list_price % type : = 1000 ; begin select product_name into l_product_name from oe . product where list_price > k_price ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create synonym oe_product for oe . product ; declare l_product_name oe_product . product_name % type ; k_price constant oe_product . list_price % type : = 1000 ; begin select product_name into l_product_name from oe_product where list_price > k_price ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; /","title":"G-8210: Always use synonyms when accessing objects of another application schema."},{"location":"4-language-usage/8-patterns/2-access-objects-of-foreign-application-schemas/g-8210/#g-8210-always-use-synonyms-when-accessing-objects-of-another-application-schema","text":"Major Changeability, Maintainability","title":"G-8210: Always use synonyms when accessing objects of another application schema."},{"location":"4-language-usage/8-patterns/2-access-objects-of-foreign-application-schemas/g-8210/#reason","text":"If a connection is needed to a table that is placed in a foreign schema, using synonyms is a good choice. If there are structural changes to that table (e.g. the table name changes or the table changes into another schema) only the synonym has to be changed no changes to the package are needed (single point of change). If you only have read access for a table inside another schema, or there is another reason that does not allow you to change data in this table, you can switch the synonym to a table in your own schema. This is also good practice for testers working on test systems.","title":"Reason"},{"location":"4-language-usage/8-patterns/2-access-objects-of-foreign-application-schemas/g-8210/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 declare l_product_name oe . product . product_name % type ; k_price constant oe . product . list_price % type : = 1000 ; begin select product_name into l_product_name from oe . product where list_price > k_price ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/2-access-objects-of-foreign-application-schemas/g-8210/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 create synonym oe_product for oe . product ; declare l_product_name oe_product . product_name % type ; k_price constant oe_product . list_price % type : = 1000 ; begin select product_name into l_product_name from oe_product where list_price > k_price ; exception when no_data_found then null ; -- handle_no_data_found; when too_many_rows then null ; -- handle_too_many_rows; end ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/","text":"G-8310: Always validate input parameter size by assigning the parameter to a size limited variable in the declaration section of program unit. Minor Maintainability, Reliability, Reusability, Testability Reason This technique raises an error (value_error) which may not be handled in the called program unit. This is the right way to do it, as the error is not within this unit but when calling it, so the caller should handle the error. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body department_api is function dept_by_name ( in_dept_name in department . department_name % type ) return department % rowtype is l_return department % rowtype ; begin if in_dept_name is null or length ( in_dept_name ) > 20 then raise err . e_param_to_large ; end if ; -- get the department by name select * from department where department_name = in_dept_name ; return l_return ; end dept_by_name ; end department_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body department_api is function dept_by_name ( in_dept_name in department . department_name % type ) return department % rowtype is l_dept_name department . department_name % type not null : = in_dept_name ; l_return department % rowtype ; begin -- get the department by name select * from department where department_name = l_dept_name ; return l_return ; end dept_by_name ; end department_api ; / Function call 1 2 3 4 5 ... r_deparment : = department_api . dept_by_name ( 'Far to long name of a department' ); ... exception when value_error then ...","title":"G-8310: Always validate input parameter size by assigning the parameter to a size limited variable in the declaration section of program unit."},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/#g-8310-always-validate-input-parameter-size-by-assigning-the-parameter-to-a-size-limited-variable-in-the-declaration-section-of-program-unit","text":"Minor Maintainability, Reliability, Reusability, Testability","title":"G-8310: Always validate input parameter size by assigning the parameter to a size limited variable in the declaration section of program unit."},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/#reason","text":"This technique raises an error (value_error) which may not be handled in the called program unit. This is the right way to do it, as the error is not within this unit but when calling it, so the caller should handle the error.","title":"Reason"},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 create or replace package body department_api is function dept_by_name ( in_dept_name in department . department_name % type ) return department % rowtype is l_return department % rowtype ; begin if in_dept_name is null or length ( in_dept_name ) > 20 then raise err . e_param_to_large ; end if ; -- get the department by name select * from department where department_name = in_dept_name ; return l_return ; end dept_by_name ; end department_api ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body department_api is function dept_by_name ( in_dept_name in department . department_name % type ) return department % rowtype is l_dept_name department . department_name % type not null : = in_dept_name ; l_return department % rowtype ; begin -- get the department by name select * from department where department_name = l_dept_name ; return l_return ; end dept_by_name ; end department_api ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/3-validating-input-parameter-size/g-8310/#function-call","text":"1 2 3 4 5 ... r_deparment : = department_api . dept_by_name ( 'Far to long name of a department' ); ... exception when value_error then ...","title":"Function call"},{"location":"4-language-usage/8-patterns/4-ensure-single-execution-at-a-time-of-a-program-unit/g-8410/","text":"G-8410: Always use application locks to ensure a program unit is only running once at a given time. Minor Efficiency, Reliability Reason This technique allows us to have locks across transactions as well as a proven way to clean up at the end of the session. The alternative using a table where a \u201cLock-Row\u201d is stored has the disadvantage that in case of an error a proper cleanup has to be done to \u201cunlock\u201d the program unit. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /* bad example */ create or replace package body lock_up is -- manage locks in a dedicated table created as follows: -- create table app_locks ( -- lock_name varchar2(128 char) not null primary key -- ); procedure request_lock ( in_lock_name in varchar2 ) is begin -- raises dup_val_on_index insert into app_locks ( lock_name ) values ( in_lock_name ); end request_lock ; procedure release_lock ( in_lock_name in varchar2 ) is begin delete from app_locks where lock_name = in_lock_name ; end release_lock ; end lock_up ; / /* call bad example */ declare k_lock_name constant varchar2 ( 30 char ) : = 'APPLICATION_LOCK' ; begin lock_up . request_lock ( in_lock_name => k_lock_name ); -- processing lock_up . release_lock ( in_lock_handle => l_handle ); exception when others then -- log error lock_up . release_lock ( in_lock_handle => l_handle ); raise ; end ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* good example */ create or replace package body lock_up is function request_lock ( in_lock_name in varchar2 , in_release_on_commit in boolean : = false ) return varchar2 is l_lock_handle varchar2 ( 128 char ); begin sys . dbms_lock . allocate_unique ( lockname => in_lock_name , lockhandle => l_lock_handle , expiration_secs => constants . k_one_week ); if sys . dbms_lock . request ( lockhandle => l_lock_handle , lockmode => sys . dbms_lock . x_mode , timeout => sys . dbms_lock . maxwait , release_on_commit => coalesce ( in_release_on_commit , false ) ) > 0 then raise errors . e_lock_request_failed ; end if ; return l_lock_handle ; end request_lock ; procedure release_lock ( in_lock_handle in varchar2 ) is begin if sys . dbms_lock . release ( lockhandle => in_lock_handle ) > 0 then raise errors . e_lock_request_failed ; end if ; end release_lock ; end lock_up ; / /* Call good example */ declare l_handle varchar2 ( 128 char ); k_lock_name constant varchar2 ( 30 char ) : = 'APPLICATION_LOCK' ; begin l_handle : = lock_up . request_lock ( in_lock_name => k_lock_name ); -- processing lock_up . release_lock ( in_lock_handle => l_handle ); exception when others then -- log error lock_up . release_lock ( in_lock_handle => l_handle ); raise ; end ; /","title":"G-8410: Always use application locks to ensure a program unit is only running once at a given time."},{"location":"4-language-usage/8-patterns/4-ensure-single-execution-at-a-time-of-a-program-unit/g-8410/#g-8410-always-use-application-locks-to-ensure-a-program-unit-is-only-running-once-at-a-given-time","text":"Minor Efficiency, Reliability","title":"G-8410: Always use application locks to ensure a program unit is only running once at a given time."},{"location":"4-language-usage/8-patterns/4-ensure-single-execution-at-a-time-of-a-program-unit/g-8410/#reason","text":"This technique allows us to have locks across transactions as well as a proven way to clean up at the end of the session. The alternative using a table where a \u201cLock-Row\u201d is stored has the disadvantage that in case of an error a proper cleanup has to be done to \u201cunlock\u201d the program unit.","title":"Reason"},{"location":"4-language-usage/8-patterns/4-ensure-single-execution-at-a-time-of-a-program-unit/g-8410/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /* bad example */ create or replace package body lock_up is -- manage locks in a dedicated table created as follows: -- create table app_locks ( -- lock_name varchar2(128 char) not null primary key -- ); procedure request_lock ( in_lock_name in varchar2 ) is begin -- raises dup_val_on_index insert into app_locks ( lock_name ) values ( in_lock_name ); end request_lock ; procedure release_lock ( in_lock_name in varchar2 ) is begin delete from app_locks where lock_name = in_lock_name ; end release_lock ; end lock_up ; / /* call bad example */ declare k_lock_name constant varchar2 ( 30 char ) : = 'APPLICATION_LOCK' ; begin lock_up . request_lock ( in_lock_name => k_lock_name ); -- processing lock_up . release_lock ( in_lock_handle => l_handle ); exception when others then -- log error lock_up . release_lock ( in_lock_handle => l_handle ); raise ; end ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/4-ensure-single-execution-at-a-time-of-a-program-unit/g-8410/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* good example */ create or replace package body lock_up is function request_lock ( in_lock_name in varchar2 , in_release_on_commit in boolean : = false ) return varchar2 is l_lock_handle varchar2 ( 128 char ); begin sys . dbms_lock . allocate_unique ( lockname => in_lock_name , lockhandle => l_lock_handle , expiration_secs => constants . k_one_week ); if sys . dbms_lock . request ( lockhandle => l_lock_handle , lockmode => sys . dbms_lock . x_mode , timeout => sys . dbms_lock . maxwait , release_on_commit => coalesce ( in_release_on_commit , false ) ) > 0 then raise errors . e_lock_request_failed ; end if ; return l_lock_handle ; end request_lock ; procedure release_lock ( in_lock_handle in varchar2 ) is begin if sys . dbms_lock . release ( lockhandle => in_lock_handle ) > 0 then raise errors . e_lock_request_failed ; end if ; end release_lock ; end lock_up ; / /* Call good example */ declare l_handle varchar2 ( 128 char ); k_lock_name constant varchar2 ( 30 char ) : = 'APPLICATION_LOCK' ; begin l_handle : = lock_up . request_lock ( in_lock_name => k_lock_name ); -- processing lock_up . release_lock ( in_lock_handle => l_handle ); exception when others then -- log error lock_up . release_lock ( in_lock_handle => l_handle ); raise ; end ; /","title":"Example (good)"},{"location":"4-language-usage/8-patterns/5-use-dbms-application-info-package-to-follow-progress-of-a-process/g-8510/","text":"G-8510: Always use dbms_application_info to track program process transiently. Minor Efficiency, Reliability Reason This technique allows us to view progress of a process without having to persistently write log data in either a table or a file. The information is accessible through the v$session view. Example (bad) 1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package body employee_api is procedure process_emps is begin << employees >> for emp_rec in ( select employee_id from employee order by employee_id ) loop null ; -- some processing end loop employees ; end process_emps ; end employee_api ; / Example (good) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body employee_api is procedure process_emps is begin sys . dbms_application_info . set_module ( module_name => $$ plsql_unit , action_name => 'init' ); << employees >> for emp_rec in ( select employee_id from employee order by employee_id ) loop sys . dbms_application_info . set_action ( 'processing ' || emp_rec . employee_id ); end loop employees ; end process_emps ; end employee_api ; /","title":"G-8510: Always use dbms_application_info to track program process transiently."},{"location":"4-language-usage/8-patterns/5-use-dbms-application-info-package-to-follow-progress-of-a-process/g-8510/#g-8510-always-use-dbms_application_info-to-track-program-process-transiently","text":"Minor Efficiency, Reliability","title":"G-8510: Always use dbms_application_info to track program process transiently."},{"location":"4-language-usage/8-patterns/5-use-dbms-application-info-package-to-follow-progress-of-a-process/g-8510/#reason","text":"This technique allows us to view progress of a process without having to persistently write log data in either a table or a file. The information is accessible through the v$session view.","title":"Reason"},{"location":"4-language-usage/8-patterns/5-use-dbms-application-info-package-to-follow-progress-of-a-process/g-8510/#example-bad","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 create or replace package body employee_api is procedure process_emps is begin << employees >> for emp_rec in ( select employee_id from employee order by employee_id ) loop null ; -- some processing end loop employees ; end process_emps ; end employee_api ; /","title":"Example (bad)"},{"location":"4-language-usage/8-patterns/5-use-dbms-application-info-package-to-follow-progress-of-a-process/g-8510/#example-good","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create or replace package body employee_api is procedure process_emps is begin sys . dbms_application_info . set_module ( module_name => $$ plsql_unit , action_name => 'init' ); << employees >> for emp_rec in ( select employee_id from employee order by employee_id ) loop sys . dbms_application_info . set_action ( 'processing ' || emp_rec . employee_id ); end loop employees ; end process_emps ; end employee_api ; /","title":"Example (good)"},{"location":"6-code-reviews/code-reviews/","text":"Code Reviews Code reviews check the results of software engineering. According to IEEE-Norm 729, a review is a more or less planned and structured analysis and evaluation process. Here we distinguish between code review and architect review. To perform a code review means that after or during the development one or more reviewer proof-reads the code to find potential errors, potential areas for simplification, or test cases. A code review is a very good opportunity to save costs by fixing issues before the testing phase. What can a code-review be good for? Code quality Code clarity and maintainability Quality of the overall architecture Quality of the documentation Quality of the interface specification For an effective review, the following factors must be considered: Definition of clear goals. Choice of a suitable person with constructive critical faculties. Psychological aspects. Selection of the right review techniques. Support of the review process from the management. Existence of a culture of learning and process optimization. Requirements for the reviewer: The reviewer must not be the owner of the code. Code reviews may be unpleasant for the developer, as he or she could fear that code will be criticized. If the critic is not considerate, the code writer will build up rejection and resistance against code reviews. Precheck Developers should complete the following checklist prior to requesting a peer code review. Can I answer \"Yes\" to each of these questions? Did I take time to think about what I wanted to do before doing it? Would I pay for this? Can I defend my work / decisions I made? NO sloppiness. Code is well formatted. Code is not duplicated in multiple places. Named variables. Tables have foreign keys (and associated indexes)... Run the APEX Advisor (if using APEX). Code is well commented. Package specs includes a description of what the procedure does and what the input variables represent. Package body includes comments throughout the code to indicate what is happening. The application includes end user help.","title":"Code Reviews"},{"location":"6-code-reviews/code-reviews/#code-reviews","text":"Code reviews check the results of software engineering. According to IEEE-Norm 729, a review is a more or less planned and structured analysis and evaluation process. Here we distinguish between code review and architect review. To perform a code review means that after or during the development one or more reviewer proof-reads the code to find potential errors, potential areas for simplification, or test cases. A code review is a very good opportunity to save costs by fixing issues before the testing phase. What can a code-review be good for? Code quality Code clarity and maintainability Quality of the overall architecture Quality of the documentation Quality of the interface specification For an effective review, the following factors must be considered: Definition of clear goals. Choice of a suitable person with constructive critical faculties. Psychological aspects. Selection of the right review techniques. Support of the review process from the management. Existence of a culture of learning and process optimization. Requirements for the reviewer: The reviewer must not be the owner of the code. Code reviews may be unpleasant for the developer, as he or she could fear that code will be criticized. If the critic is not considerate, the code writer will build up rejection and resistance against code reviews. Precheck Developers should complete the following checklist prior to requesting a peer code review. Can I answer \"Yes\" to each of these questions? Did I take time to think about what I wanted to do before doing it? Would I pay for this? Can I defend my work / decisions I made? NO sloppiness. Code is well formatted. Code is not duplicated in multiple places. Named variables. Tables have foreign keys (and associated indexes)... Run the APEX Advisor (if using APEX). Code is well commented. Package specs includes a description of what the procedure does and what the input variables represent. Package body includes comments throughout the code to indicate what is happening. The application includes end user help.","title":"Code Reviews"}]}